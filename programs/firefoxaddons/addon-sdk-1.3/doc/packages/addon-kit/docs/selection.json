[["version", 4], ["markdown", "<!-- contributed by Eric H. Jung [eric.jung@yahoo.com] -->\n<!-- contributed by Irakli Gozalishvili [gozala@mozilla.com] -->\n\nThe `selection` module provides a means to get and set text and HTML selections\nin the current Firefox page.  It can also observe new selections.\n\nRegistering for Selection Notifications\n---------------------------------------\n\nTo be notified when the user makes a selection, register a listener for the\n\"select\" event. Each listener will be called after a selection is made.\n\n    function myListener() {\n      console.log(\"A selection has been made.\");\n    }\n    var selection = require(\"selection\");\n    selection.on('select', myListener);\n\n    // You can remove listeners too.\n    selection.removeListener('select', myListener);\n\nIterating Over Discontiguous Selections\n---------------------------------------\n\nDiscontiguous selections can be accessed by iterating over the `selection`\nmodule itself. Each iteration yields a `Selection` object from which `text`,\n`html`, and `isContiguous` properties can be accessed.\n\n\nExamples\n--------\n\nLog the current contiguous selection as text:\n\n    var selection = require(\"selection\");\n    if (selection.text)\n      console.log(selection.text);\n\nLog the current discontiguous selections as HTML:\n\n    var selection = require(\"selection\");\n    if (!selection.isContiguous) {\n      for (var subselection in selection) {\n         console.log(subselection.html);\n      }\n    }\n\nSurround HTML selections with delimiters:\n\n    var selection = require(\"selection\");\n    selection.on('select', function () {\n      selection.html = \"\\\\\\\" + selection.html + \"///\";\n    });\n\n"], ["api-json", {"datatype": "string", "line_number": 55, "type": "property", "name": "text", "description": "Gets or sets the current selection as plain text. Setting the selection\nremoves all current selections, inserts the specified text at the location of\nthe first selection, and selects the new text. Getting the selection when\nthere is no current selection returns `null`. Setting the selection when there\nis no current selection throws an exception. Getting the selection when\n`isContiguous` is `true` returns the text of the first selection."}], ["markdown", "\n\n"], ["api-json", {"datatype": "string", "line_number": 65, "type": "property", "name": "html", "description": "Gets or sets the current selection as HTML. Setting the selection removes all\ncurrent selections, inserts the specified text at the location of the first\nselection, and selects the new text. Getting the selection when there is no\ncurrent selection returns `null`. Setting the selection when there is no\ncurrent selection throws an exception. Getting the selection when\n`isContiguous` is `true` returns the text of the first selection."}], ["markdown", "\n\n"], ["api-json", {"datatype": "boolean", "line_number": 75, "type": "property", "name": "isContiguous", "description": "`true` if the current selection is a single, contiguous selection, and `false`\nif there are two or more discrete selections, each of which may or may not be\nspatially adjacent. (Discontiguous selections can be created by the user with\nCtrl+click-and-drag.)"}], ["markdown", "\n\n"], ["api-json", {"line_number": 83, "type": "event", "name": "select", "description": "This event is emitted whenever the user makes a new selection in a page."}], ["markdown", "\n"]]