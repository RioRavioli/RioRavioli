[["version", 4], ["markdown", "The `simple-storage` module lets you easily and persistently store data across\napplication restarts.  If you're familiar with [DOM storage][] on the Web, it's\nkind of like that, but for add-ons.\n\n[DOM storage]: https://developer.mozilla.org/en/DOM/Storage\n\n\nIntroduction\n------------\n\nThe simple storage module exports an object called `storage` that is persistent\nand private to your add-on.  It's a normal JavaScript object, and you can treat\nit as you would any other.\n\nTo store a value, just assign it to a property on `storage`:\n\n    var ss = require(\"simple-storage\");\n    ss.storage.myArray = [1, 1, 2, 3, 5, 8, 13];\n    ss.storage.myBoolean = true;\n    ss.storage.myNull = null;\n    ss.storage.myNumber = 3.1337;\n    ss.storage.myObject = { a: \"foo\", b: { c: true }, d: null };\n    ss.storage.myString = \"O frabjous day!\";\n\nYou can store array, boolean, number, object, null, and string values.  If you'd\nlike to store other types of values, you'll first have to convert them to\nstrings or another one of these types.\n\nBe careful to set properties on the `storage` object and not the module itself:\n\n    // This is no good!\n    var ss = require(\"simple-storage\");\n    ss.foo = \"I will not be saved! :(\";\n\n\nQuotas\n------\n\nThe simple storage available to your add-on is limited.  Currently this limit is\nabout five megabytes (5,242,880 bytes).  You can choose to be notified when you\ngo over quota, and you should respond by reducing the amount of data in storage.\nIf the user quits the application while you are over quota, all data stored\nsince the last time you were under quota will not be persisted.  You should not\nlet that happen.\n\nTo listen for quota notifications, register a listener for the `\"OverQuota\"`\nevent.  It will be called when your storage goes over quota.\n\n    function myOnOverQuotaListener() {\n      console.log(\"Uh oh.\");\n    }\n    ss.on(\"OverQuota\", myOnOverQuotaListener);\n\nListeners can also be removed:\n\n    ss.removeListener(\"OverQuota\", myOnOverQuotaListener);\n\nTo find out how much of your quota you're using, check the module's `quotaUsage`\nproperty.  It indicates the percentage of quota your storage occupies.  If\nyou're within your quota, it's a number from 0 to 1, inclusive, and if you're\nover, it's a number greater than 1.\n\nTherefore, when you're notified that you're over quota, respond by removing\nstorage until your `quotaUsage` is less than or equal to 1.  Which particular\ndata you remove is up to you.  For example:\n\n    ss.storage.myList = [ /* some long array */ ];\n    ss.on(\"OverQuota\", function () {\n      while (ss.quotaUsage > 1)\n        ss.storage.myList.pop();\n    });\n\n\nPrivate Browsing\n----------------\n\n*This section applies only to add-ons running on Firefox.*\n\nIf your storage is related to your users' Web history, personal information, or\nother sensitive data, your add-on should respect [private browsing mode][SUMO].\nWhile private browsing mode is active, you should not store any sensitive data.\n\nBecause any kind of data can be placed into simple storage, support for private\nbrowsing is not built into the module.  Instead, use the\n[`private-browsing`](packages/addon-kit/docs/private-browsing.html) module to\ncheck private browsing status and respond accordingly.\n\nFor example, the URLs your users visit should not be stored during private\nbrowsing.  If your add-on records the URL of the selected tab, here's how you\nmight handle that:\n\n    ss.storage.history = [];\n    var privateBrowsing = require(\"private-browsing\");\n    if (!privateBrowsing.active) {\n      var url = getSelectedTabURL();\n      ss.storage.history.push(url);\n    }\n\nFor more information on supporting private browsing, see its [Mozilla Developer\nNetwork documentation][MDN].  While that page does not apply specifically to\nSDK-based add-ons (and its code samples don't apply at all), you should follow\nits guidance on best practices and policies.\n\n[SUMO]: http://support.mozilla.com/en-US/kb/Private+Browsing\n[MDN]: https://developer.mozilla.org/En/Supporting_private_browsing_mode\n\n\n"], ["api-json", {"datatype": "object", "line_number": 108, "type": "property", "name": "storage", "description": "A persistent object private to your add-on.  Properties with array, boolean,\nnumber, object, null, and string values will be persisted."}], ["markdown", "\n\n"], ["api-json", {"datatype": "number", "line_number": 114, "type": "property", "name": "quotaUsage", "description": "A number in the range [0, Infinity) that indicates the percentage of quota\noccupied by storage.  A value in the range [0, 1] indicates that the storage\nis within quota.  A value greater than 1 indicates that the storage exceeds\nquota."}], ["markdown", "\n\n"], ["api-json", {"line_number": 122, "type": "event", "name": "OverQuota", "description": "The module emits this event when your add-on's storage goes over its quota."}], ["markdown", "\n"]]