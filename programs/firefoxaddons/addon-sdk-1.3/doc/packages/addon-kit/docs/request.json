[["version", 4], ["markdown", "The `request` module lets you make simple yet powerful network requests.\n\n"], ["api-json", {"line_number": 3, "name": "Request", "constructors": [{"line_number": 53, "name": "Request", "params": [{"line_number": 58, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "string", "line_number": 59, "required": true, "name": "url", "description": "This is the url to which the request will be made.\n"}, {"datatype": "function", "line_number": 62, "required": false, "name": "onComplete", "description": "This function will be called when the request has received a response (or in\nterms of XHR, when `readyState == 4`). The function is passed a `Response`\nobject.\n"}, {"datatype": "object", "line_number": 67, "required": false, "name": "headers", "description": "An unordered collection of name/value pairs representing headers to send\nwith the request.\n"}, {"datatype": "string,object", "line_number": 71, "required": false, "name": "content", "description": "The content to send to the server. If `content` is a string, it should be\nURL-encoded (use `encodeURIComponent`). If `content` is an object, it\nshould be a collection of name/value pairs. Nested objects & arrays should\nencode safely.\n\nFor `GET` requests, the query string (`content`) will be appended to the\nURL. For `POST` requests, the query string will be sent as the body of the\nrequest.\n"}, {"datatype": "string", "line_number": 81, "required": false, "name": "contentType", "description": "The type of content to send to the server. This explicitly sets the\n`Content-Type` header. The default value is `application/x-www-form-urlencoded`.\n"}, {"datatype": "string", "line_number": 85, "required": false, "name": "overrideMimeType", "description": "Use this string to override the MIME type returned by the server in the\nresponse's Content-Type header. You can use this to treat the content as a\ndifferent MIME type, or to force text to be interpreted using a specific\ncharacter.\n\nFor example, if you're retrieving text content which was encoded as\nISO-8859-1 (Latin 1), it will be given a content type of \"utf-8\" and\ncertain characters will not display correctly. To force the response to\nbe interpreted as Latin-1, use `overrideMimeType`:\n\n    var Request = require(\"request\").Request;\n    var quijote = Request({\n      url: \"http://www.latin1files.org/quijote.txt\",\n      overrideMimeType: \"text/plain; charset=latin1\",\n      onComplete: function (response) {\n        console.log(response.text);\n      }\n    });\n\n    quijote.get();\n"}], "description": ""}], "signature": "Request(options)", "type": "constructor", "description": "This constructor creates a request object that can be used to make network\nrequests. The constructor takes a single parameter `options` which is used to\nset several properties on the resulting `Request`."}], "events": [{"arguments": [{"datatype": "Response", "line_number": 146, "description": "Listener functions are passed the response to the request as a `Response` object."}], "line_number": 141, "type": "event", "name": "complete", "description": "The `Request` object emits this event when the request has completed and a\nresponse has been received.\n"}], "methods": [{"line_number": 129, "name": "get", "returns": {"datatype": "Request", "line_number": 132, "description": ""}, "signature": "get()", "type": "method", "description": "Make a `GET` request."}, {"line_number": 135, "name": "post", "returns": {"datatype": "Request", "line_number": 138, "description": ""}, "signature": "post()", "type": "method", "description": "Make a `POST` request."}], "type": "class", "properties": [{"datatype": "string", "line_number": 109, "type": "property", "name": "url", "description": ""}, {"datatype": "object", "line_number": 113, "type": "property", "name": "headers", "description": ""}, {"datatype": "string,object", "line_number": 117, "type": "property", "name": "content", "description": ""}, {"datatype": "string", "line_number": 121, "type": "property", "name": "contentType", "description": ""}, {"datatype": "Response", "line_number": 125, "type": "property", "name": "response", "description": ""}], "description": "The `Request` object is used to make `GET` or `POST` network requests. It is\nconstructed with a URL to which the request is sent. Optionally the user may\nspecify a collection of headers and content to send alongside the request and\na callback which will be executed once the request completes.\n\nOnce a `Request` object has been created a `GET` request can be executed by\ncalling its `get()` method, or a `POST` request by calling its `post()` method.\n\nWhen the server completes the request, the `Request` object emits a \"complete\"\nevent.  Registered event listeners are passed a `Response` object.\n\nEach `Request` object is designed to be used once. Once `GET` or `POST` are\ncalled, attempting to call either will throw an error.\n\nSince the request is not being made by any particular website, requests made\nhere are not subject to the same-domain restriction that requests made in web\npages are subject to.\n\nWith the exception of `response`, all of a `Request` object's properties\ncorrespond with the options in the constructor. Each can be set by simply\nperforming an assignment. However, keep in mind that the same validation rules\nthat apply to `options` in the constructor will apply during assignment. Thus,\neach can throw if given an invalid value.\n\nThe example below shows how to use Request to get the most recent public tweet.\n\n    var Request = require(\"request\").Request;\n    var latestTweetRequest = Request({\n      url: \"http://api.twitter.com/1/statuses/public_timeline.json\",\n      onComplete: function (response) {\n        var tweet = response.json[0];\n        console.log(\"User: \" + tweet.user.screen_name);\n        console.log(\"Tweet: \" + tweet.text);\n      }\n    });\n\n    // Be a good consumer and check for rate limiting before doing more.\n    Request({\n      url: \"http://api.twitter.com/1/account/rate_limit_status.json\",\n      onComplete: function (response) {\n        if (response.json.remaining_hits) {\n          latestTweetRequest.get();\n        } else {\n          console.log(\"You have been rate limited!\");\n        }\n      }\n    }).get();\n\n\n\n\n\n\n\n\n\n"}], ["markdown", "\n\n\n"], ["api-json", {"line_number": 153, "properties": [{"datatype": "string", "line_number": 160, "type": "property", "name": "text", "description": "The content of the response as plain text."}, {"datatype": "object", "line_number": 165, "type": "property", "name": "json", "description": "The content of the response as a JavaScript object. The value will be `null`\nif the document cannot be processed by `JSON.parse`."}, {"datatype": "string", "line_number": 171, "type": "property", "name": "status", "description": "The HTTP response status code (e.g. *200*)."}, {"datatype": "string", "line_number": 176, "type": "property", "name": "statusText", "description": "The HTTP response status line (e.g. *OK*)."}, {"datatype": "object", "line_number": 181, "type": "property", "name": "headers", "description": "The HTTP response headers represented as key/value pairs.\n\nTo print all the headers you can do something like this:\n\n    for (var headerName in response.headers) {\n      console.log(headerName + \" : \" + response.headers[headerName]);\n    }\n"}], "type": "class", "name": "Response", "description": "The Response object contains the response to a network request issued using a\n`Request` object. It is returned by the `get()` or `post()` method of a\n`Request` object.\n\nAll members of a `Response` object are read-only.\n\n\n\n"}], ["markdown", "\n"]]