
<div id="selection_module_api_docs" class="module_api_docs">
<h1>selection</h1>
<div class="module_description"><!-- contributed by Eric H. Jung [eric.jung@yahoo.com] -->
<!-- contributed by Irakli Gozalishvili [gozala@mozilla.com] -->

<p>The <code>selection</code> module provides a means to get and set text and HTML selections
in the current Firefox page.  It can also observe new selections.</p>
<h2>Registering for Selection Notifications</h2>
<p>To be notified when the user makes a selection, register a listener for the
"select" event. Each listener will be called after a selection is made.</p>
<pre><code>function myListener() {
  console.log("A selection has been made.");
}
var selection = require("selection");
selection.on('select', myListener);

// You can remove listeners too.
selection.removeListener('select', myListener);
</code></pre>
<h2>Iterating Over Discontiguous Selections</h2>
<p>Discontiguous selections can be accessed by iterating over the <code>selection</code>
module itself. Each iteration yields a <code>Selection</code> object from which <code>text</code>,
<code>html</code>, and <code>isContiguous</code> properties can be accessed.</p>
<h2>Examples</h2>
<p>Log the current contiguous selection as text:</p>
<pre><code>var selection = require("selection");
if (selection.text)
  console.log(selection.text);
</code></pre>
<p>Log the current discontiguous selections as HTML:</p>
<pre><code>var selection = require("selection");
if (!selection.isContiguous) {
  for (var subselection in selection) {
     console.log(subselection.html);
  }
}
</code></pre>
<p>Surround HTML selections with delimiters:</p>
<pre><code>var selection = require("selection");
selection.on('select', function () {
  selection.html = "\\\" + selection.html + "///";
});
</code></pre>
</div>

<div class="api_reference">
<h2 class="api_header">API Reference</h2>

<div class="api_component_group">
<h3 class="api_header">Properties</h3>

<div class="api_component">
<h4 class="api_name">text : <span class="datatype">string</span></h4>
<p>Gets or sets the current selection as plain text. Setting the selection
removes all current selections, inserts the specified text at the location of
the first selection, and selects the new text. Getting the selection when
there is no current selection returns <code>null</code>. Setting the selection when there
is no current selection throws an exception. Getting the selection when
<code>isContiguous</code> is <code>true</code> returns the text of the first selection.</p>
</div>

<div class="api_component">
<h4 class="api_name">html : <span class="datatype">string</span></h4>
<p>Gets or sets the current selection as HTML. Setting the selection removes all
current selections, inserts the specified text at the location of the first
selection, and selects the new text. Getting the selection when there is no
current selection returns <code>null</code>. Setting the selection when there is no
current selection throws an exception. Getting the selection when
<code>isContiguous</code> is <code>true</code> returns the text of the first selection.</p>
</div>

<div class="api_component">
<h4 class="api_name">isContiguous : <span class="datatype">boolean</span></h4>
<p><code>true</code> if the current selection is a single, contiguous selection, and <code>false</code>
if there are two or more discrete selections, each of which may or may not be
spatially adjacent. (Discontiguous selections can be created by the user with
Ctrl+click-and-drag.)</p>
</div>

</div>

<div class="api_component_group">
<h3 class="api_header">Events</h3>

<div class="api_component">
<h4 class="api_name">select</h4>
<p>This event is emitted whenever the user makes a new selection in a page.</p>
</div>

</div>

</div>

</div>
