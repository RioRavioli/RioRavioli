[["version", 4], ["markdown", "The `self` module provides access to data that is bundled with the add-on\nas a whole. It also provides access to the\n[Program ID](dev-guide/addon-development/program-id.html), a value which is\nunique for each add-on.\n\nNote that the `self` module is completely different from the global `self`\nobject accessible to content scripts, which is used by a content script to\n[communicate with the add-on code](dev-guide/addon-development/content-scripts/using-port.html).\n\n"], ["api-json", {"datatype": "string", "line_number": 10, "type": "property", "name": "id", "description": "This property is a printable string that is unique for each add-on. It comes\nfrom the `id` property set in the `package.json` file in the main package\n(i.e. the package in which you run `cfx xpi`). While not generally of use to\nadd-on code directly, it can be used by internal API code to index local\nstorage and other resources that are associated with a particular add-on.\nEventually, this ID will be unspoofable (see\n[JEP 118](https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/118) for details)."}], ["markdown", "\n\n"], ["api-json", {"datatype": "string", "line_number": 21, "type": "property", "name": "name", "description": "This property contains the add-on's short name. It comes from the `name`\nproperty in the main package's `package.json` file."}], ["markdown", "\n\n"], ["api-json", {"datatype": "string", "line_number": 27, "type": "property", "name": "version", "description": "This property contains the add-on's version string. It comes from the\n`version` property set in the `package.json` file in the main package."}], ["markdown", "\n\n"], ["api-json", {"line_number": 33, "name": "data", "datatype": "object", "description": "The `data` object is used to access data that was bundled with the add-on.\nThis data lives in the main package's `data/` directory, immediately below\nthe `package.json` file. All files in this directory will be copied into the\nXPI and made available through the `data` object.\n\nThe [Package Specification](dev-guide/addon-development/package-spec.html)\nsection explains the `package.json` file.\n\n", "type": "property", "methods": [{"line_number": 43, "name": "data.load", "returns": {"datatype": "string", "line_number": 52, "description": ""}, "params": [{"datatype": "string", "line_number": 49, "required": true, "name": "name", "description": "The filename to be read, relative to the\npackage's `data` directory. Each package that uses the `self` module\nwill see its own `data` directory."}], "signature": "data.load(name)", "type": "method", "description": "The `data.load(NAME)` method returns the contents of an embedded data file,\nas a string. It is most useful for data that will be modified or parsed in\nsome way, such as JSON, XML, plain text, or perhaps an HTML template. For\ndata that can be displayed directly in a content frame, use `data.url(NAME)`."}, {"line_number": 55, "name": "data.url", "returns": {"datatype": "URL", "line_number": 71, "description": ""}, "params": [{"datatype": "string", "line_number": 68, "required": true, "name": "name", "description": "The filename to be read, relative to the\npackage's `data` directory. Each package that uses the `self` module\nwill see its own `data` directory."}], "signature": "data.url(name)", "type": "method", "description": "The `data.url(NAME)` method returns a URL instance that points at an embedded\ndata file. It is most useful for data that can be displayed directly in a\ncontent frame. The URL instance can be passed to a content frame constructor,\nsuch as the Panel:\n\n    var self = require(\"self\");\n    var myPanel = require(\"panel\").Panel({\n      contentURL: self.data.url(\"my-panel-content.html\")\n    });\n    myPanel.show();\n"}]}], ["markdown", "\n"]]