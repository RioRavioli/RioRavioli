[["version", 4], ["markdown", "<!-- contributed by Dietrich Ayala [dietrich@mozilla.com]  -->\n<!-- contributed by Drew Willcoxon [adw@mozilla.com]  -->\n<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->\n\nThe `widget` module provides your add-on with a simple user interface that is\nconsistent with other add-ons and blends in well with Firefox.\n\n## Introduction ##\n\n\"Widgets\" are small pieces of content that live in the Firefox 4\n[add-on bar](https://developer.mozilla.org/en/The_add-on_bar).\nThey can be simple icons or complex web pages.  You can attach\n[panels](packages/addon-kit/docs/panel.html) to them that open when they're\nclicked, or you can define a custom click handler to perform some other action,\nlike opening a web page in a tab.\n\nThere are a few advantages to using widgets over an ad hoc user interface.\nFirst, your users will be accustomed to interacting with add-ons via widgets and\nthe add-on bar.  Second, it allows Firefox to treat your interface as a\nfirst-class citizen.  For example, in the future Firefox may allow the user to\ndrag widgets from the add-on bar to other toolbars.  By exposing your interface\nas a widget, your add-on would automatically inherit such functionality.\n\n## Creation and Content ##\n\nWidgets can contain images or arbitrary web content.  You can include this\ncontent inline as a string by using the `content` property, or point to content\nusing a URL with the `contentURL` property.\n\nFor example, this widget contains an image, so it looks like a simple icon:\n\n    require(\"widget\").Widget({\n      id: \"mozilla-icon\", \n      label: \"My Mozilla Widget\",\n      contentURL: \"http://www.mozilla.org/favicon.ico\"\n    });\n\nUpon creation, the widget is automatically added to the add-on bar.\nYou can set the width of a widget, but the height is fixed so as to fit in the\nadd-on bar. If the content is an image, it is automatically scaled to be 16x16\npixels.\n\nThis widget contains an entire web page:\n\n    require(\"widget\").Widget({\n      id: \"hello-display\",\n      label: \"My Hello Widget\",\n      content: \"Hello!\",\n      width: 50\n    });\n\nWidgets are quite small by default, so this example used the `width` property to\ngrow it in order to show all the text.\n\nAs with many SDK APIs, communication with the content inside your widgets is\nhandled by [content scripts](dev-guide/addon-development/web-content.html).\nSo, for example, to be notified when your widget's content has loaded, you can\nmake a small script that calls back to the widget when it finishes loading.\n\n## Attaching Panels to Widgets ##\n\nYou can supply a [panel](packages/addon-kit/docs/panel.html) to the widget's\nconstructor: if you do this, the panel is automatically displayed when the\nuser clicks the widget.\n\n    data = require(\"self\").data\n\n    var clockPanel = require(\"panel\").Panel({\n      width:215,\n      height:160,\n      contentURL: data.url(\"clock.html\")\n    });\n\n    require(\"widget\").Widget({\n      id: \"open-clock-btn\",\n      label: \"Clock\",\n      contentURL: data.url(\"History.png\"),\n      panel: clockPanel\n    });\n\n<!-- The icon the widget displays, shown in the screenshot, is taken from the\nNuvola icon set, http://www.icon-king.com/projects/nuvola/ which is made\navailable under the LGPL 2.1:\nhttp://www.gnu.org/licenses/old-licenses/lgpl-2.1.html -->\n\n<img class=\"image-center\" src=\"static-files/media/screenshots/widget-panel-clock.png\"\nalt=\"Panel attached to a widget\">\n<br>\n\nNote that this is, at the moment, the only way you can attach a panel to a widget.\n\nYou must supply the panel in the widget's constructor for it to work. If you\nassign the panel to the widget after construction, the panel can still be shown\nbut will not be anchored to the widget:\n\n    data = require(\"self\").data\n\n    var clockPanel = require(\"panel\").Panel({\n      width:215,\n      height:160,\n      contentURL: data.url(\"clock.html\")\n    });\n\n    widget = require(\"widget\").Widget({\n      id: \"open-clock-btn\",\n      label: \"Clock\",\n      contentURL: data.url(\"History.png\")\n    });\n\n    widget.panel = clockPanel;\n\n    // Will not be anchored\n    widget.panel.show();\n\nAlso, if you try to call `panel.show()` inside your widget's `click` event\nlistener, the panel will not be anchored:\n\n    data = require(\"self\").data\n\n    var clockPanel = require(\"panel\").Panel({\n      width:215,\n      height:160,\n      contentURL: data.url(\"clock.html\")\n    });\n\n    require(\"widget\").Widget({\n      id: \"open-clock-btn\",\n      label: \"Clock\",\n      contentURL: data.url(\"History.png\"),\n      panel: clockPanel,\n      onClick: function() {\n        // Will not be anchored\n        this.panel.show();\n      }\n    });\n\nSee [bug 638142](https://bugzilla.mozilla.org/show_bug.cgi?id=638142).\n\n## Examples ##\n\nFor conciseness, these examples create their content scripts as strings and use\nthe `contentScript` property.  In your own add-ons, you will probably want to\ncreate your content scripts in separate files and pass their URLs using the\n`contentScriptFile` property.  See\n[Working with Content Scripts](dev-guide/addon-development/web-content.html) for more\ninformation.\n\n    var widgets = require(\"widget\");\n\n    // A basic click-able image widget.\n    widgets.Widget({\n      id: \"google-link\",\n      label: \"Widget with an image and a click handler\",\n      contentURL: \"http://www.google.com/favicon.ico\",\n      onClick: function() {\n        require(\"tabs\").activeTab.url = \"http://www.google.com/\";\n      }\n    });\n<br>\n\n    // A widget that changes display on mouseover.\n    widgets.Widget({\n      id: \"mouseover-effect\",\n      label: \"Widget with changing image on mouseover\",\n      contentURL: \"http://www.yahoo.com/favicon.ico\",\n      onMouseover: function() {\n        this.contentURL = \"http://www.bing.com/favicon.ico\";\n      },\n      onMouseout: function() {\n        this.contentURL = \"http://www.yahoo.com/favicon.ico\";\n      }\n    });\n<br>\n\n    // A widget that updates content on a timer.\n    widgets.Widget({\n      id: \"auto-update-widget\",\n      label: \"Widget that updates content on a timer\",\n      content: \"0\",\n      contentScript: 'setTimeout(function() {' +\n                     '  document.body.innerHTML++;' +\n                     '}, 2000)',\n      contentScriptWhen: \"ready\"\n    });\n<br>\n\n    // A widget that loads a random Flickr photo every 5 minutes.\n    widgets.Widget({\n      id: \"random-flickr\",\n      label: \"Random Flickr Photo Widget\",\n      contentURL: \"http://www.flickr.com/explore/\",\n      contentScriptWhen: \"ready\",\n      contentScript: 'postMessage(document.querySelector(\".pc_img\").src);' +\n                     'setTimeout(function() {' +\n                     '  document.location = \"http://www.flickr.com/explore/\";' +\n                     '}, 5 * 60 * 1000);',\n      onMessage: function(imgSrc) {\n        this.contentURL = imgSrc;\n      },\n      onClick: function() {\n        require(\"tabs\").activeTab.url = this.contentURL;\n      }\n    });\n<br>\n\n    // A widget created with a specified width, that grows.\n    let myWidget = widgets.Widget({\n      id: \"widget-effect\",\n      label: \"Wide widget that grows wider on a timer\",\n      content: \"I'm getting longer.\",\n      width: 50,\n    });\n    require(\"timers\").setInterval(function() {\n      myWidget.width += 10;\n    }, 1000);\n<br>\n\n    // A widget communicating bi-directionally with a content script.\n    let widget = widgets.Widget({\n      id: \"message-test\",\n      label: \"Bi-directional communication!\",\n      content: \"<foo>bar</foo>\",\n      contentScriptWhen: \"ready\",\n      contentScript: 'on(\"message\", function(message) {' +\n                     '  alert(\"Got message: \" + message);' +\n                     '});' +\n                     'postMessage(\"ready\");',\n      onMessage: function(message) {\n        if (message == \"ready\")\n          widget.postMessage(\"me too\");\n      }\n    });\n\n"], ["api-json", {"line_number": 234, "name": "Widget", "constructors": [{"line_number": 238, "name": "Widget", "params": [{"line_number": 242, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "string", "line_number": 245, "required": true, "name": "label", "description": "A required string description of the widget used for accessibility,\ntitle bars, and error reporting.\n"}, {"datatype": "string", "line_number": 249, "required": true, "name": "id", "description": "Mandatory string used to identify your widget in order to save its\nlocation when the user moves it in the browser.\nThis string has to be unique and must not be changed over time.\n"}, {"datatype": "string", "line_number": 254, "required": false, "name": "content", "description": "An optional string value containing the displayed content of the widget.\nIt may contain HTML. Widgets must have either the `content` property or the\n`contentURL` property set.\n\nIf the content is an image, it is automatically scaled to be 16x16 pixels.\n"}, {"datatype": "string", "line_number": 261, "required": false, "name": "contentURL", "description": "An optional string URL to content to load into the widget. This can be\n[local content](dev-guide/addon-development/web-content.html) or remote\ncontent, an image or web content. Widgets must have either the `content`\nproperty or the `contentURL` property set.\n\nIf the content is an image, it is automatically scaled to be 16x16 pixels.\n"}, {"datatype": "Panel", "line_number": 269, "required": false, "name": "panel", "description": "An optional [panel](packages/addon-kit/docs/panel.html) to open when the\nuser clicks on the widget. Note: If you also register a \"click\" listener,\nit will be called instead of the panel being opened.  However, you can show\nthe panel from the listener by calling `this.panel.show()`.\n"}, {"datatype": "integer", "line_number": 275, "required": false, "name": "width", "description": "Optional width in pixels of the widget. If not given, a default width is\nused.\n"}, {"datatype": "function", "line_number": 279, "required": false, "name": "onClick", "description": "Include this to listen to the widget's `click` event.\n"}, {"datatype": "function", "line_number": 282, "required": false, "name": "onMessage", "description": "Include this to listen to the widget's `message` event.\n"}, {"datatype": "function", "line_number": 285, "required": false, "name": "onMouseover", "description": "Include this to listen to the widget's `mouseover` event.\n"}, {"datatype": "function", "line_number": 288, "required": false, "name": "onMouseout", "description": "Include this to listen to the widget's `mouseout` event.\n"}, {"datatype": "function", "line_number": 291, "required": false, "name": "onAttach", "description": "Include this to listen to the widget's `attach` event.\n"}, {"datatype": "string", "line_number": 294, "required": false, "name": "tooltip", "description": "Optional text to show when the user's mouse hovers over the widget.  If not\ngiven, the `label` is used.\n"}, {"datatype": "object", "line_number": 298, "required": false, "name": "allow", "description": "An optional object describing permissions for the content.  It should\ncontain a single key named `script` whose value is a boolean that indicates\nwhether or not to execute script in the content.  `script` defaults to true.\n"}, {"datatype": "string,array", "line_number": 303, "required": false, "name": "contentScriptFile", "description": "A local file URL or an array of local file URLs of content scripts to load.\nContent scripts specified by this property are loaded *before* those\nspecified by the `contentScript` property.\n"}, {"datatype": "string,array", "line_number": 308, "required": false, "name": "contentScript", "description": "A string or an array of strings containing the texts of content scripts to\nload.  Content scripts specified by this property are loaded *after* those\nspecified by the `contentScriptFile` property.\n"}, {"line_number": 313, "name": "contentScriptWhen", "default": "\"end\"", "required": false, "datatype": "string", "description": "When to load the content scripts. This may take one of the following\nvalues:\n\n* \"start\": load content scripts immediately after the document\nelement for the widget is inserted into the DOM, but before the DOM content\nitself has been loaded\n* \"ready\": load content scripts once DOM content has been loaded,\ncorresponding to the\n[DOMContentLoaded](https://developer.mozilla.org/en/Gecko-Specific_DOM_Events)\nevent\n* \"end\": load content scripts once all the content (DOM, JS, CSS,\nimages) for the widget has been loaded, at the time the\n[window.onload event](https://developer.mozilla.org/en/DOM/window.onload)\nfires\n\nThis property is optional and defaults to \"end\".\n"}], "description": "An object with the following keys:\n"}], "signature": "Widget(options)", "type": "constructor", "description": "Creates a new widget.  The widget is immediately added to the add-on bar.\n"}], "events": [{"line_number": 464, "type": "event", "name": "attach", "description": "This event is emitted when a new `WidgetView` object is created using the\n`getView()` function."}, {"line_number": 470, "type": "event", "name": "click", "description": "This event is emitted when the widget is clicked."}, {"arguments": [{"datatype": "value", "line_number": 482, "description": "Listeners are passed a single argument which is the message posted\nfrom the content script. The message can be any\n<a href = \"dev-guide/addon-development/content-scripts/using-port.html#json_serializable\">JSON-serializable value</a>."}], "line_number": 475, "type": "event", "name": "message", "description": "If you listen to this event you can receive message events from content\nscripts associated with this widget. When a content script posts a\nmessage using `self.postMessage()`, the message is delivered to the add-on\ncode in the widget's `message` event.\n"}, {"line_number": 488, "type": "event", "name": "mouseover", "description": "This event is emitted when the user moves the mouse over the widget."}, {"line_number": 493, "type": "event", "name": "mouseout", "description": "This event is emitted when the user moves the mouse away from the widget."}], "methods": [{"line_number": 333, "signature": "destroy()", "type": "method", "name": "destroy", "description": "Removes the widget from the add-on bar."}, {"line_number": 338, "name": "postMessage", "params": [{"datatype": "value", "line_number": 341, "required": true, "name": "data", "description": "  The message to send.\n  The message can be any\n<a href = \"dev-guide/addon-development/content-scripts/using-port.html#json_serializable\">JSON-serializable value</a>."}], "signature": "postMessage(data)", "type": "method", "description": "Sends a message to the widget's content scripts."}, {"line_number": 347, "name": "on", "params": [{"datatype": "string", "line_number": 350, "required": true, "name": "type", "description": "The type of event to listen for."}, {"datatype": "function", "line_number": 352, "required": true, "name": "listener", "description": "The listener function that handles the event."}], "signature": "on(type, listener)", "type": "method", "description": "Registers an event listener with the widget."}, {"line_number": 356, "name": "removeListener", "params": [{"datatype": "string", "line_number": 359, "required": true, "name": "type", "description": "The type of event for which `listener` was registered."}, {"datatype": "function", "line_number": 361, "required": true, "name": "listener", "description": "The listener function that was registered."}], "signature": "removeListener(type, listener)", "type": "method", "description": "Unregisters an event listener from the widget."}, {"line_number": 365, "name": "getView", "returns": {"datatype": "WidgetView", "line_number": 370, "description": "A `WidgetView` instance associated with the browser window. Any changes\nsubsequently applied to this object will only be applied to the widget\nattached to that window."}, "params": [{"datatype": "BrowserWindow", "line_number": 368, "required": true, "name": "window", "description": "The [BrowserWindow](packages/addon-kit/docs/windows.html) instance to match."}], "signature": "getView(window)", "type": "method", "description": "Retrieve a `WidgetView` instance of this widget relative to a browser window."}], "type": "class", "properties": [{"datatype": "string", "line_number": 376, "type": "property", "name": "label", "description": "The widget's label.  Read-only."}, {"datatype": "string", "line_number": 381, "type": "property", "name": "content", "description": "A string containing the widget's content.  It can contain HTML.  Setting it\nupdates the widget's appearance immediately.  However, if the widget was\ncreated using `contentURL`, then this property is meaningless, and setting it\nhas no effect."}, {"datatype": "string", "line_number": 389, "type": "property", "name": "contentURL", "description": "The URL of content to load into the widget.  This can be\n[local content](dev-guide/addon-development/web-content.html) or remote\ncontent, an image or web content.  Setting it updates the widget's appearance\nimmediately.  However, if the widget was created using `content`, then this\nproperty is meaningless, and setting it has no effect."}, {"datatype": "Panel", "line_number": 398, "type": "property", "name": "panel", "description": "A [panel](packages/addon-kit/docs/panel.html) to open when the user clicks on\nthe widget."}, {"datatype": "number", "line_number": 404, "type": "property", "name": "width", "description": "The widget's width in pixels.  Setting it updates the widget's appearance\nimmediately."}, {"datatype": "string", "line_number": 410, "type": "property", "name": "tooltip", "description": "The text of the tooltip that appears when the user hovers over the widget."}, {"datatype": "object", "line_number": 415, "type": "property", "name": "allow", "description": "A object describing permissions for the content.  It contains a single key\nnamed `script` whose value is a boolean that indicates whether or not to\nexecute script in the content."}, {"datatype": "string,array", "line_number": 422, "type": "property", "name": "contentScriptFile", "description": "A local file URL or an array of local file URLs of content scripts to load."}, {"datatype": "string,array", "line_number": 427, "type": "property", "name": "contentScript", "description": "A string or an array of strings containing the texts of content scripts to\nload."}, {"datatype": "string", "line_number": 433, "type": "property", "name": "contentScriptWhen", "description": "When to load the content scripts. This may have one of the following\nvalues:\n\n* \"start\": load content scripts immediately after the document\nelement for the widget is inserted into the DOM, but before the DOM content\nitself has been loaded\n* \"ready\": load content scripts once DOM content has been loaded,\ncorresponding to the\n[DOMContentLoaded](https://developer.mozilla.org/en/Gecko-Specific_DOM_Events)\nevent\n* \"end\": load content scripts once all the content (DOM, JS, CSS,\nimages) for the widget has been loaded, at the time the\n[window.onload event](https://developer.mozilla.org/en/DOM/window.onload)\nfires\n"}, {"datatype": "EventEmitter", "line_number": 452, "type": "property", "name": "port", "description": "[EventEmitter](packages/api-utils/docs/events.html) object that allows you to:\n\n* send events to the content script using the `port.emit` function\n* receive events from the content script using the `port.on` function\n\nSee the guide to\n<a href=\"dev-guide/addon-development/content-scripts/using-port.html\">\ncommunicating using <code>port</code></a> for details."}], "description": "Represents a widget object.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}], ["markdown", "\n\n\n"], ["api-json", {"line_number": 501, "methods": [{"line_number": 537, "signature": "destroy()", "type": "method", "name": "destroy", "description": "Removes the widget view from the add-on bar."}, {"line_number": 542, "name": "postMessage", "params": [{"datatype": "value", "line_number": 545, "required": true, "name": "data", "description": "  The message to send. The message can be any\n<a href = \"dev-guide/addon-development/content-scripts/using-port.html#json_serializable\">JSON-serializable value</a>."}], "signature": "postMessage(data)", "type": "method", "description": "Sends a message to the widget view's content scripts."}, {"line_number": 550, "name": "on", "params": [{"datatype": "string", "line_number": 553, "required": true, "name": "type", "description": "The type of event to listen for."}, {"datatype": "function", "line_number": 555, "required": true, "name": "listener", "description": "The listener function that handles the event."}], "signature": "on(type, listener)", "type": "method", "description": "Registers an event listener with the widget view."}, {"line_number": 559, "name": "removeListener", "params": [{"datatype": "string", "line_number": 562, "required": true, "name": "type", "description": "The type of event for which `listener` was registered."}, {"datatype": "function", "line_number": 564, "required": true, "name": "listener", "description": "The listener function that was registered."}], "signature": "removeListener(type, listener)", "type": "method", "description": "Unregisters an event listener from the widget view."}], "description": "Represents a widget instance specific to one browser window.\n\nAnything you do to an instance of this object will only be applied to the\ninstance attached to its browser window: widget instances attached to other\nbrowser windows will be unaffected.\n\nBy contrast, any changes you make to an instance of the normal `Widget` class\nwill be applied across all browser windows.\n\nThis class has all the same methods, attributes and events as the `Widget`\nclass except for the `getView` method and the `attach` event.\n\nIn this example `WidgetView` is used to display different content for\n`http` and `https` schemes:\n\n    // A widget that update its content specifically to each window.\n    let tabs = require(\"tabs\");\n    let windows = require(\"windows\").browserWindows;\n    let widget = widgets.Widget({\n      id: \"window-specific-test\",\n      label: \"Widget with content specific to each window\",\n      content: \" \",\n      width: 50\n    });\n    // Observe tab switch or document changes in each existing tab:\n    function updateWidgetState(tab) {\n      let view = widget.getView(tab.window);\n      if (!view) return;\n      // Update widget displayed text:\n      view.content = tab.url.match(/^https/) ? \"Secured\" : \"Unsafe\";\n    }\n    tabs.on('ready', updateWidgetState);\n    tabs.on('activate', updateWidgetState);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "events": [{"line_number": 657, "type": "event", "name": "detach", "description": "The `detach` event is fired when the widget view is removed from its related\nwindow.\nThis can occur if the window is closed, Firefox exits, or the add-on is\ndisabled."}, {"line_number": 665, "type": "event", "name": "click", "description": "This event is emitted when the widget view is clicked."}, {"arguments": [{"datatype": "value", "line_number": 677, "description": "Listeners are passed a single argument which is the message posted\nfrom the content script. The message can be any\n<a href = \"dev-guide/addon-development/content-scripts/using-port.html#json_serializable\">JSON-serializable value</a>."}], "line_number": 670, "type": "event", "name": "message", "description": "If you listen to this event you can receive message events from content\nscripts associated with this widget view. When a content script posts a\nmessage using `self.postMessage()`, the message is delivered to the add-on\ncode in the widget view's `message` event.\n"}, {"line_number": 683, "type": "event", "name": "mouseover", "description": "This event is emitted when the user moves the mouse over the widget view."}, {"line_number": 688, "type": "event", "name": "mouseout", "description": "This event is emitted when the user moves the mouse away from the widget view."}], "type": "class", "properties": [{"datatype": "string", "line_number": 568, "type": "property", "name": "label", "description": "The widget view's label.  Read-only."}, {"datatype": "string", "line_number": 573, "type": "property", "name": "content", "description": "A string containing the widget view's content.  It can contain HTML.\nSetting it updates the widget view's appearance immediately. However,\nif the widget view was created using `contentURL`, then this property\nis meaningless, and setting it has no effect."}, {"datatype": "string", "line_number": 581, "type": "property", "name": "contentURL", "description": "The URL of content to load into the widget view.  This can be\n[local content](dev-guide/addon-development/web-content.html) or remote\ncontent, an image or web content.  Setting it updates the widget view's\nappearance immediately.  However, if the widget view was created using\n`content`, then this property is meaningless, and setting it has no effect."}, {"datatype": "Panel", "line_number": 590, "type": "property", "name": "panel", "description": "A [panel](packages/addon-kit/docs/panel.html) to open when the user clicks on\nthe widget view."}, {"datatype": "number", "line_number": 596, "type": "property", "name": "width", "description": "The widget view's width in pixels.  Setting it updates the widget view's\nappearance immediately."}, {"datatype": "string", "line_number": 602, "type": "property", "name": "tooltip", "description": "The text of the tooltip that appears when the user hovers over the widget\nview."}, {"datatype": "object", "line_number": 608, "type": "property", "name": "allow", "description": "A object describing permissions for the content.  It contains a single key\nnamed `script` whose value is a boolean that indicates whether or not to\nexecute script in the content."}, {"datatype": "string,array", "line_number": 615, "type": "property", "name": "contentScriptFile", "description": "A local file URL or an array of local file URLs of content scripts to load."}, {"datatype": "string,array", "line_number": 620, "type": "property", "name": "contentScript", "description": "A string or an array of strings containing the texts of content scripts to\nload."}, {"datatype": "string", "line_number": 626, "type": "property", "name": "contentScriptWhen", "description": "When to load the content scripts. This may have one of the following\nvalues:\n\n* \"start\": load content scripts immediately after the document\nelement for the widget view is inserted into the DOM, but before the DOM\ncontent itself has been loaded\n* \"ready\": load content scripts once DOM content has been loaded,\ncorresponding to the\n[DOMContentLoaded](https://developer.mozilla.org/en/Gecko-Specific_DOM_Events)\nevent\n* \"end\": load content scripts once all the content (DOM, JS, CSS,\nimages) for the widget view has been loaded, at the time the\n[window.onload event](https://developer.mozilla.org/en/DOM/window.onload)\nfires\n"}, {"datatype": "EventEmitter", "line_number": 645, "type": "property", "name": "port", "description": "[EventEmitter](packages/api-utils/docs/events.html) object that allows you to:\n\n* send events to the content script using the `port.emit` function\n* receive events from the content script using the `port.on`\n\nSee the guide to\n<a href=\"dev-guide/addon-development/content-scripts/using-port.html\">\ncommunicating using <code>port</code></a> for details."}], "name": "WidgetView"}], ["markdown", "\n"]]