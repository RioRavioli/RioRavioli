[["version", 4], ["markdown", "<!-- contributed by Myk Melez [myk@mozilla.org] -->\n<!-- contributed by Irakli Gozalishvili [gozala@mozilla.com] -->\n\nThe `panel` module creates floating modal \"popup dialogs\" that appear on top of\nweb content and browser chrome and persist until dismissed by users or programs.\nPanels are useful for presenting temporary interfaces to users in a way that is\neasier for users to ignore and dismiss than a modal dialog, since panels are\nhidden the moment users interact with parts of the application interface outside\nthem.\n\nThe module exports a single constructor function `Panel` which constructs a\nnew panel.\n\nA panel's content is loaded as soon as it is created, before the panel is shown,\nand the content remains loaded when a panel is hidden, so it is possible\nto keep a panel around in the background, updating its content as appropriate\nin preparation for the next time it is shown.\n\nYour add-on can receive notifications when a panel is shown or hidden by\nlistening to its `show` and `hide` events.\n\nPanels have associated content scripts, which are JavaScript scripts that have\naccess to the content loaded into the panels.  An add-on can specify one or\nmore content scripts to load for a panel, and the add-on can communicate with\nthose scripts either using the `message` event or by using user-defined\nevents. See\n[Working with Content Scripts](dev-guide/addon-development/web-content.html)\nfor more information.\n\nThe panel's default style is different for each operating system.\nFor example, suppose a panel's content is specified with the following HTML:\n\n<script type=\"syntaxhighlighter\" class=\"brush: html\"><![CDATA[\n<h1>Default Style</h1>\n\nThis is what a panel with no custom styling looks like.\n]]>\n</script>\n\nOn OS X it will look like this:\n\n<img class=\"image-center\" src=\"static-files/media/screenshots/default-panel-osx.png\"\nalt=\"OS X panel default style\">\n<br>\n\nOn Windows 7 it will look like this:\n\n<img class=\"image-center\" src=\"static-files/media/screenshots/default-panel-windows.png\"\nalt=\"Windows 7 panel default style\">\n<br>\n\nOn Ubuntu it will look like this:\n\n<img class=\"image-center\" src=\"static-files/media/screenshots/default-panel-ubuntu.png\"\nalt=\"Ubuntu panel default style\">\n<br>\n\nThis helps to ensure that the panel's style is consistent with the dialogs\ndisplayed by Firefox and other applications, but means you need to take care\nwhen applying your own styles. For example, if you set the panel's\n`background-color` property to `white` and do not set the `color` property,\nthen the panel's text will be invisible on OS X although it looks fine on Ubuntu.\n\nExamples\n--------\n\nCreate and show a simple panel with content from the `data/` directory:\n\n    var data = require(\"self\").data;\n    var panel = require(\"panel\").Panel({\n      contentURL: data.url(\"foo.html\")\n    });\n\n    panel.show();\n\nThe tutorial section on\n[web content](dev-guide/addon-development/web-content.html) has\na more complex example using panels.\n\n"], ["api-json", {"line_number": 80, "name": "Panel", "constructors": [{"line_number": 95, "name": "Panel", "params": [{"line_number": 98, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "number", "line_number": 100, "required": false, "name": "width", "description": "The width of the panel in pixels. Optional."}, {"datatype": "number", "line_number": 102, "required": false, "name": "height", "description": "The height of the panel in pixels. Optional."}, {"datatype": "string", "line_number": 104, "required": false, "name": "contentURL", "description": "The URL of the content to load in the panel."}, {"datatype": "object", "line_number": 106, "required": false, "name": "allow", "description": "An optional object describing permissions for the content.  It should\ncontain a single key named `script` whose value is a boolean that indicates\nwhether or not to execute script in the content.  `script` defaults to true."}, {"datatype": "string,array", "line_number": 110, "required": false, "name": "contentScriptFile", "description": "A local file URL or an array of local file URLs of content scripts to load.\nContent scripts specified by this property are loaded *before* those\nspecified by the `contentScript` property."}, {"datatype": "string,array", "line_number": 114, "required": false, "name": "contentScript", "description": "A string or an array of strings containing the texts of content scripts to\nload.  Content scripts specified by this property are loaded *after* those\nspecified by the `contentScriptFile` property."}, {"line_number": 118, "name": "contentScriptWhen", "default": "\"end\"", "required": false, "datatype": "string", "description": "When to load the content scripts. This may take one of the following\nvalues:\n\n* \"start\": load content scripts immediately after the document\nelement for the panel is inserted into the DOM, but before the DOM content\nitself has been loaded\n* \"ready\": load content scripts once DOM content has been loaded,\ncorresponding to the\n[DOMContentLoaded](https://developer.mozilla.org/en/Gecko-Specific_DOM_Events)\nevent\n* \"end\": load content scripts once all the content (DOM, JS, CSS,\nimages) for the panel has been loaded, at the time the\n[window.onload event](https://developer.mozilla.org/en/DOM/window.onload)\nfires\n\nThis property is optional and defaults to \"end\".\n"}, {"datatype": "function", "line_number": 136, "required": false, "name": "onMessage", "description": "Include this to listen to the panel's `message` event."}, {"datatype": "function", "line_number": 138, "required": false, "name": "onShow", "description": "Include this to listen to the panel's `show` event."}, {"datatype": "function", "line_number": 140, "required": false, "name": "onHide", "description": "Include this to listen to the panel's `hide` event."}], "description": "Options for the panel, with the following keys:"}], "signature": "Panel(options)", "type": "constructor", "description": "Creates a panel."}], "events": [{"line_number": 267, "type": "event", "name": "show", "description": "This event is emitted when the panel is shown."}, {"line_number": 272, "type": "event", "name": "hide", "description": "This event is emitted when the panel is hidden."}, {"arguments": [{"datatype": "value", "line_number": 284, "description": "Listeners are passed a single argument which is the message posted\nfrom the content script. The message can be any\n<a href = \"dev-guide/addon-development/content-scripts/using-port.html#json_serializable\">JSON-serializable value</a>."}], "line_number": 277, "type": "event", "name": "message", "description": "If you listen to this event you can receive message events from content\nscripts associated with this panel. When a content script posts a\nmessage using `self.postMessage()`, the message is delivered to the add-on\ncode in the panel's `message` event.\n"}, {"arguments": [{"datatype": "Error", "line_number": 295, "description": "Listeners are passed a single argument, the\n[Error](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error)\nobject."}], "line_number": 290, "type": "event", "name": "error", "description": "This event is emitted when an uncaught runtime error occurs in one of the\npanel's content scripts.\n"}], "methods": [{"line_number": 216, "signature": "destroy()", "type": "method", "name": "destroy", "description": "Destroys the panel, unloading any content that was loaded in it. Once\ndestroyed, the panel can no longer be used. If you just want to hide\nthe panel and might show it later, use `hide` instead."}, {"line_number": 223, "name": "postMessage", "params": [{"datatype": "value", "line_number": 226, "required": true, "name": "message", "description": "The message to send.  Must be stringifiable to JSON."}], "signature": "postMessage(message)", "type": "method", "description": "Sends a message to the content scripts."}, {"line_number": 230, "signature": "show()", "type": "method", "name": "show", "description": "Displays the panel."}, {"line_number": 235, "signature": "hide()", "type": "method", "name": "hide", "description": "Stops displaying the panel."}, {"line_number": 240, "name": "resize", "params": [{"datatype": "number", "line_number": 243, "required": true, "name": "width", "description": "The new width of the panel in pixels."}, {"datatype": "number", "line_number": 245, "required": true, "name": "height", "description": "The new height of the panel in pixels."}], "signature": "resize(width, height)", "type": "method", "description": "Resizes the panel."}, {"line_number": 249, "name": "on", "params": [{"datatype": "string", "line_number": 252, "required": true, "name": "type", "description": "The type of event to listen for."}, {"datatype": "function", "line_number": 254, "required": true, "name": "listener", "description": "The listener function that handles the event."}], "signature": "on(type, listener)", "type": "method", "description": "Registers an event listener with the panel."}, {"line_number": 258, "name": "removeListener", "params": [{"datatype": "string", "line_number": 261, "required": true, "name": "type", "description": "The type of event for which `listener` was registered."}, {"datatype": "function", "line_number": 263, "required": true, "name": "listener", "description": "The listener function that was registered."}], "signature": "removeListener(type, listener)", "type": "method", "description": "Unregisters an event listener from the panel."}], "type": "class", "properties": [{"datatype": "EventEmitter", "line_number": 144, "type": "property", "name": "port", "description": "[EventEmitter](packages/api-utils/docs/events.html) object that allows you to:\n\n* send events to the content script using the `port.emit` function\n* receive events from the content script using the `port.on` function\n\nSee the guide to\n<a href=\"dev-guide/addon-development/content-scripts/using-port.html\">\ncommunicating using <code>port</code></a> for details."}, {"datatype": "boolean", "line_number": 156, "type": "property", "name": "isShowing", "description": "Tells if the panel is currently shown or not. This property is read-only."}, {"datatype": "number", "line_number": 161, "type": "property", "name": "height", "description": "The height of the panel in pixels."}, {"datatype": "number", "line_number": 166, "type": "property", "name": "width", "description": "The width of the panel in pixels."}, {"datatype": "string", "line_number": 171, "type": "property", "name": "contentURL", "description": "The URL of the content loaded in the panel."}, {"datatype": "object", "line_number": 176, "type": "property", "name": "allow", "description": "An object describing permissions for the content.  It contains a single key\nnamed `script` whose value is a boolean that indicates whether or not to execute\nscript in the content."}, {"datatype": "string,array", "line_number": 183, "type": "property", "name": "contentScriptFile", "description": "A local file URL or an array of local file URLs of content scripts to load.\nContent scripts specified by this property are loaded *before* those\nspecified by the `contentScript` property."}, {"datatype": "string,array", "line_number": 190, "type": "property", "name": "contentScript", "description": "A string or an array of strings containing the texts of content scripts to\nload.  Content scripts specified by this property are loaded *after* those\nspecified by the `contentScriptFile` property."}, {"datatype": "string", "line_number": 197, "type": "property", "name": "contentScriptWhen", "description": "When to load the content scripts. This may have one of the following\nvalues:\n\n* \"start\": load content scripts immediately after the document\nelement for the panel is inserted into the DOM, but before the DOM content\nitself has been loaded\n* \"ready\": load content scripts once DOM content has been loaded,\ncorresponding to the\n[DOMContentLoaded](https://developer.mozilla.org/en/Gecko-Specific_DOM_Events)\nevent\n* \"end\": load content scripts once all the content (DOM, JS, CSS,\nimages) for the panel has been loaded, at the time the\n[window.onload event](https://developer.mozilla.org/en/DOM/window.onload)\nfires\n"}], "description": "The Panel object represents a floating modal dialog that can by an add-on to\npresent user interface content.\n\nOnce a panel object has been created it can be shown and hidden using its\n`show()` and `hide()` methods. Once a panel is no longer needed it can be\ndeactivated using `destroy()`.\n\nThe content of a panel is specified using the `contentURL` option. An add-on\ncan interact with the content of a panel using content scripts which it\nsupplies in the `contentScript` and/or `contentScriptFile` options. For example,\na content script could create a menu and send the user's selection to the\nadd-on.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}], ["markdown", "\n"]]