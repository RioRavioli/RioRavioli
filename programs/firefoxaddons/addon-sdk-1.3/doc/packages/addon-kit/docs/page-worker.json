[["version", 4], ["markdown", "<!-- contributed by Felipe Gomes [felipc@gmail.com] -->\n\nThe `page-worker` module provides a way to create a permanent, invisible page\nand access its DOM.\n\nIntroduction\n------------\n\nThe module exports a constructor function `Page`, which constructs a new page\nworker.  A page worker may be destroyed, after which its memory is freed, and\nyou must create a new instance to load another page.\n\nPage workers have associated content scripts, which are JavaScript scripts that\nhave access to the content loaded into the pages.  You can specify scripts to\nload for a page worker, and you communicate with those scripts over an\nasynchronous JSON pipe.  For more information on content scripts, see\n[Working with Content Scripts](dev-guide/addon-development/web-content.html).\n\nExamples\n--------\n\nFor conciseness, these examples create their content scripts as strings and use\nthe `contentScript` property.  In your own add-ons, you will probably want to\ncreate your content scripts in separate files and pass their URLs using the\n`contentScriptFile` property.  See\n[Working with Content Scripts](dev-guide/addon-development/web-content.html)\nfor more information.\n\n### Print all header titles from a Wikipedia article ###\n\n    var pageWorkers = require(\"page-worker\");\n\n    // This content script sends header titles from the page to the add-on:\n    var script = \"var elements = document.querySelectorAll('h2 > span'); \" +\n                 \"for (var i = 0; i < elements.length; i++) { \" +\n                 \"  postMessage(elements[i].textContent) \" +\n                 \"}\";\n\n    // Create a page worker that loads Wikipedia:\n    pageWorkers.Page({\n      contentURL: \"http://en.wikipedia.org/wiki/Internet\",\n      contentScript: script,\n      contentScriptWhen: \"ready\",\n      onMessage: function(message) {\n        console.log(message);\n      }\n    });\n\nThe page worker's \"message\" event listener, specified by `onMessage`, will print\nall the titles it receives from the content script.\n\n"], ["api-json", {"line_number": 52, "name": "Page", "constructors": [{"line_number": 63, "name": "Page", "params": [{"line_number": 66, "name": "options", "datatype": "object", "required": false, "props": [{"datatype": "string", "line_number": 69, "required": false, "name": "contentURL", "description": "The URL of the content to load in the panel."}, {"datatype": "object", "line_number": 71, "required": false, "name": "allow", "description": "An object with keys to configure the permissions on the page worker. The\nboolean key `script` controls if scripts from the page are allowed to run.\n`script` defaults to true."}, {"datatype": "string,array", "line_number": 75, "required": false, "name": "contentScriptFile", "description": "A local file URL or an array of local file URLs of content scripts to load.\nContent scripts specified by this option are loaded *before* those specified\nby the `contentScript` option.  See\n[Working with Content Scripts](dev-guide/addon-development/web-content.html)\nfor help on setting this property."}, {"datatype": "string,array", "line_number": 81, "required": false, "name": "contentScript", "description": "A string or an array of strings containing the texts of content scripts to\nload.  Content scripts specified by this option are loaded *after* those\nspecified by the `contentScriptFile` option."}, {"line_number": 85, "name": "contentScriptWhen", "default": "\"end\"", "required": false, "datatype": "string", "description": "When to load the content scripts. This may take one of the following\nvalues:\n\n* \"start\": load content scripts immediately after the document\nelement for the page is inserted into the DOM, but before the DOM content\nitself has been loaded\n* \"ready\": load content scripts once DOM content has been loaded,\ncorresponding to the\n[DOMContentLoaded](https://developer.mozilla.org/en/Gecko-Specific_DOM_Events)\nevent\n* \"end\": load content scripts once all the content (DOM, JS, CSS,\nimages) for the page has been loaded, at the time the\n[window.onload event](https://developer.mozilla.org/en/DOM/window.onload)\nfires\n\nThis property is optional and defaults to \"end\".\n"}, {"datatype": "function", "line_number": 103, "required": false, "name": "onMessage", "description": "Use this to add a listener to the page worker's `message` event."}], "description": "The *`options`* parameter is optional, and if given it should be an object\nwith any of the following keys:"}], "signature": "Page(options)", "type": "constructor", "description": "Creates an uninitialized page worker instance."}], "events": [{"arguments": [{"datatype": "value", "line_number": 201, "description": "Listeners are passed a single argument which is the message posted\nfrom the content script. The message can be any\n<a href = \"dev-guide/addon-development/content-scripts/using-port.html#json_serializable\">JSON-serializable value</a>"}], "line_number": 194, "type": "event", "name": "message", "description": "If you listen to this event you can receive message events from content\nscripts associated with this page worker. When a content script posts a\nmessage using `self.postMessage()`, the message is delivered to the add-on\ncode in the page worker's `message` event.\n"}, {"arguments": [{"datatype": "Error", "line_number": 212, "description": "Listeners are passed a single argument, the\n[Error](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error)\nobject."}], "line_number": 207, "type": "event", "name": "error", "description": "This event is emitted when an uncaught runtime error occurs in one of the\npage worker's content scripts.\n"}], "methods": [{"line_number": 161, "signature": "destroy()", "type": "method", "name": "destroy", "description": "Unloads the page worker. After you destroy a page worker, its memory is freed\nand you must create a new instance if you need to load another page."}, {"line_number": 167, "name": "postMessage", "params": [{"datatype": "value", "line_number": 170, "required": true, "name": "message", "description": "The message to send.  Must be JSON-able."}], "signature": "postMessage(message)", "type": "method", "description": "Sends a message to the content scripts."}, {"line_number": 174, "name": "on", "params": [{"datatype": "string", "line_number": 179, "required": true, "name": "type", "description": "The type of event to listen for."}, {"datatype": "function", "line_number": 181, "required": true, "name": "listener", "description": "The listener function that handles the event."}], "signature": "on(type, listener)", "type": "method", "description": "Registers an event listener with the page worker.  See\n[Working with Events](dev-guide/addon-development/events.html) for help with\nevents."}, {"line_number": 185, "name": "removeListener", "params": [{"datatype": "string", "line_number": 188, "required": true, "name": "type", "description": "The type of event for which `listener` was registered."}, {"datatype": "function", "line_number": 190, "required": true, "name": "listener", "description": "The listener function that was registered."}], "signature": "removeListener(type, listener)", "type": "method", "description": "Unregisters an event listener from the page worker."}], "type": "class", "properties": [{"datatype": "EventEmitter", "line_number": 107, "type": "property", "name": "port", "description": "[EventEmitter](packages/api-utils/docs/events.html) object that allows you to:\n\n* send events to the content script using the `port.emit` function\n* receive events from the content script using the `port.on` function\n\nSee the guide to\n<a href=\"dev-guide/addon-development/content-scripts/using-port.html\">\ncommunicating using <code>port</code></a> for details."}, {"datatype": "string", "line_number": 119, "type": "property", "name": "contentURL", "description": "The URL of the content loaded."}, {"datatype": "object", "line_number": 124, "type": "property", "name": "allow", "description": "A object describing permissions for the content.  It contains a single key\nnamed `script` whose value is a boolean that indicates whether or not to\nexecute script in the content.  `script` defaults to true."}, {"datatype": "string,array", "line_number": 131, "type": "property", "name": "contentScriptFile", "description": "A local file URL or an array of local file URLs of content scripts to load."}, {"datatype": "string,array", "line_number": 136, "type": "property", "name": "contentScript", "description": "A string or an array of strings containing the texts of content scripts to\nload."}, {"datatype": "string", "line_number": 142, "type": "property", "name": "contentScriptWhen", "description": "When to load the content scripts. This may have one of the following\nvalues:\n\n* \"start\": load content scripts immediately after the document\nelement for the page is inserted into the DOM, but before the DOM content\nitself has been loaded\n* \"ready\": load content scripts once DOM content has been loaded,\ncorresponding to the\n[DOMContentLoaded](https://developer.mozilla.org/en/Gecko-Specific_DOM_Events)\nevent\n* \"end\": load content scripts once all the content (DOM, JS, CSS,\nimages) for the page has been loaded, at the time the\n[window.onload event](https://developer.mozilla.org/en/DOM/window.onload)\nfires\n"}], "description": "A `Page` object loads the page specified by its `contentURL` option and\nexecutes any content scripts that have been supplied to it in the\n`contentScript` and `contentScriptFile` options.\n\nThe page is not displayed to the user.\n\nThe page worker is loaded as soon as the `Page` object is created and stays\nloaded until its `destroy` method is called or the add-on is unloaded.\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}], ["markdown", "\n"]]