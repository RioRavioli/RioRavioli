
<div id="page-mod_module_api_docs" class="module_api_docs">
<h1>page-mod</h1>
<div class="module_description"><!-- contributed by Nickolay Ponomarev [asqueella@gmail.com] -->
<!-- contributed by Myk Melez [myk@mozilla.org] -->
<!-- contributed by Irakli Gozalishvil [gozala@mozilla.com] -->

<h2>Overview</h2>
<p>The page-mod module enables add-on developers to execute scripts in the context
of specific web pages. Most obviously you could use page-mod to dynamically
modify the content of certain pages.</p>
<p>The module exports a constructor function <code>PageMod</code> which creates a new page
modification (or "mod" for short).</p>
<p>A page mod does not modify its pages until those pages are loaded or reloaded.
In other words, if your add-on is loaded while the user's browser is open, the
user will have to reload any open pages that match the mod for the mod to affect
them.</p>
<p>To stop a page mod from making any more modifications, call its <code>destroy</code>
method.</p>
<p>Like all modules that interact with web content, page-mod uses content
scripts that execute in the content process and defines a messaging API to
communicate between the content scripts and the main add-on script. For more
details on content scripting see the tutorial on <a href="dev-guide/addon-development/web-content.html">interacting with web
content</a>.</p>
<p>To create a PageMod the add-on developer supplies:</p>
<ul>
<li>
<p>a set of rules to select the desired subset of web pages based on their URL.
Each rule is specified using the
<a href="packages/api-utils/docs/match-pattern.html">match-pattern</a> syntax.</p>
</li>
<li>
<p>a set of content scripts to execute in the context of the desired pages.</p>
</li>
<li>
<p>a value for the onAttach option: this value is a function which will be
called when a page is loaded that matches the ruleset. This is used to set up a
communication channel between the add-on code and the content script.</p>
</li>
</ul>
<p>All these parameters are optional except for the ruleset, which must include
at least one rule.</p>
<p>The following add-on displays an alert whenever a page matching the ruleset is
loaded:</p>
<pre><code>var pageMod = require("page-mod");
pageMod.PageMod({
  include: "*.org",
  contentScript: 'window.alert("Page matches ruleset");'
});
</code></pre>
<p>If you specify a value of "ready" or "end" for <code>contentScriptWhen</code>,
then the content script can interact with the DOM itself:</p>
<pre><code>var pageMod = require("page-mod");
pageMod.PageMod({
  include: "*.org",
  contentScriptWhen: 'end',
  contentScript: 'document.body.innerHTML = ' +
                 ' "&lt;h1&gt;Page matches ruleset&lt;/h1&gt;";'
});
</code></pre>
<h3>Using <code>contentScriptFile</code></h3>
<p>Most of the examples in this page define content scripts as strings,
and use the <code>contentScript</code> option to assign them to page mods.</p>
<p>In your code you will more often create content scripts in separate files
under your add-on's <code>data</code> directory. Then you can use the
<a href="packages/addon-kit/docs/self.html"><code>self</code></a> module to retrieve a URL pointing
to the file, and assign this to the page-mod's <code>contentScriptFile</code>
property.</p>
<p>For example, if you save the content script
file in your <code>data</code> directory as "myScript.js", you would assign it using
code like:</p>
<pre><code>var data = require("self").data;

var pageMod = require("page-mod");
pageMod.PageMod({
  include: "*.org",
  contentScriptWhen: 'end',
  contentScriptFile: data.url("myScript.js")
});
</code></pre>
<h2>Communicating With Content Scripts</h2>
<p>When a matching page is loaded the <code>PageMod</code> will call the function that the
add-on code supplied to <code>onAttach</code>. The <code>PageMod</code> supplies one argument to
this function: a <code>worker</code> object.</p>
<p>The worker can be thought of as the add-on's end of
a communication channel between the add-on code and the content scripts that
have been attached to this page.</p>
<p>Thus the add-on can pass messages to the content scripts by calling the
worker's <code>postMessage</code> function and can receive messages from the content
scripts by registering a function as a listener to the worker's <code>on</code> function.</p>
<p>Note that if multiple matching pages are loaded simultaneously then each page
is loaded into its own execution context with its own copy of the content
scripts. In this case <code>onAttach</code> is called once for each loaded page, and the
add-on code will have a separate worker for each page:</p>
<p><img alt="Multiple workers" src="static-files/media/multiple-workers.jpg" /></p>
<p>This is demonstrated in the following example:</p>
<pre><code>var pageMod = require("page-mod");
var tabs = require("tabs");

var workers = [];

pageMod.PageMod({
  include: ["http://www.mozilla*"],
  contentScriptWhen: 'end',
  contentScript: "onMessage = function onMessage(message) {" +
                 "  window.alert(message);};",
  onAttach: function onAttach(worker) {
    if (workers.push(worker) == 3) {
      workers[0].postMessage("The first worker!");
      workers[1].postMessage("The second worker!");
      workers[2].postMessage("The third worker!");
    }
  }
});

tabs.open("http://www.mozilla.com");
tabs.open("http://www.mozilla.org");
tabs.open("http://www.mozilla-europe.org");
</code></pre>
<p>Here we specify a ruleset to match any URLs starting with
"http://www.mozilla". When a page matches we add the supplied worker to
an array, and when we have three workers in the array we send a message to
each worker in turn, telling it the order in which it was attached. The
worker just displays the message in an alert box.</p>
<p>This shows that separate pages execute in separate contexts and that each
context has its own communication channel with the add-on script.</p>
<p>Note though that while there is a separate worker for each execution context,
the worker is shared across all the content scripts associated with a single
execution context. In the following example we pass two content scripts into
the <code>PageMod</code>: these content scripts will share a worker instance.</p>
<p>In the example each content script identifies itself to the add-on script
by sending it a message using the global <code>postMessage</code> function. In the
<code>onAttach</code> function the add-on code logs the fact that a new page is
attached and registers a listener function that simply logs the message:</p>
<pre><code>var pageMod = require("page-mod");
var data = require("self").data;
var tabs = require("tabs");

pageMod.PageMod({
  include: ["http://www.mozilla*"],
  contentScriptWhen: 'end',
  contentScript: ["postMessage('Content script 1 is attached to '+ " +
                  "document.URL);",
                  "postMessage('Content script 2 is attached to '+ " +
                  "document.URL);"],
  onAttach: function onAttach(worker) {
    console.log("Attaching content scripts")
    worker.on('message', function(data) {
      console.log(data);
    });
  }
});

tabs.open("http://www.mozilla.com");
</code></pre>
<p>The console output of this add-on is:</p>
<pre>
  info: Attaching content scripts
  info: Content script 1 is attached to http://www.mozilla.com/en-US/
  info: Content script 2 is attached to http://www.mozilla.com/en-US/
</pre>

<h3>Mapping workers to tabs</h3>
<p>The <a href="packages/api-utils/docs/content/worker.html"><code>worker</code></a> has a <code>tab</code>
property which returns the tab associated with this worker. You can use this
to access the <a href="packages/addon-kit/docs/tabs.html"><code>tabs API</code></a> for the tab
associated with a specific page:</p>
<pre><code>var pageMod = require("page-mod");
var tabs = require("tabs");

pageMod.PageMod({
  include: ["*"],
  onAttach: function onAttach(worker) {
    console.log(worker.tab.title);
  }
});
</code></pre>
<h3>Attaching content scripts to tabs</h3>
<p>We've seen that the page mod API attaches content scripts to pages based on
their URL. Sometimes, though, we don't care about the URL: we just want
to execute a script on demand in the context of a particular tab.</p>
<p>For example, we might want to run a script in the context of the currently
active tab when the user clicks a widget: to block certain content, to
change the font style, or to display the page's DOM structure.</p>
<p>Using the <code>attach</code> method of the <a href="packages/addon-kit/docs/tabs.html"><code>tab</code></a>
object, you can attach a set of content scripts to a particular tab. The
scripts are executed immediately.</p>
<p>The following add-on creates a widget which, when clicked, highlights all the
<code>div</code> elements in the page loaded into the active tab:</p>
<pre><code>var widgets = require("widget");
var tabs = require("tabs");

var widget = widgets.Widget({
  id: "div-show",
  label: "Show divs",
  contentURL: "http://www.mozilla.org/favicon.ico",
  onClick: function() {
    tabs.activeTab.attach({
      contentScript:
        'var divs = document.getElementsByTagName("div");' +
        'for (var i = 0; i &lt; divs.length; ++i) {' +
          'divs[i].setAttribute("style", "border: solid red 1px;");' +
        '}'
    });
  }
});
</code></pre>
<h2>Destroying Workers</h2>
<p>Workers generate a <code>detach</code> event when their associated page is closed: that
is, when the tab is closed or the tab's location changes. If
you are maintaining a list of workers belonging to a page mod, you can use
this event to remove workers that are no longer valid.</p>
<p>For example, if you maintain a list of workers attached to a page mod:</p>
<pre><code>var workers = [];

var pageMod = require("page-mod").PageMod({
  include: ['*'],
  contentScriptWhen: 'ready',
  contentScriptFile: data.url('pagemod.js'),
  onAttach: function(worker) {
    workers.push(worker);
  }
});
</code></pre>
<p>You can remove workers when they are no longer valid by listening to <code>detach</code>:</p>
<pre><code>var workers = [];

function detachWorker(worker, workerArray) {
  var index = workerArray.indexOf(worker);
  if(index != -1) {
    workerArray.splice(index, 1);
  }
}

var pageMod = require("page-mod").PageMod({
  include: ['*'],
  contentScriptWhen: 'ready',
  contentScriptFile: data.url('pagemod.js'),
  onAttach: function(worker) {
    workers.push(worker);
    worker.on('detach', function () {
      detachWorker(this, workers);
    });
  }
});
</code></pre>
</div>

<div class="api_reference">
<h2 class="api_header">API Reference</h2>

<div class="api_component_group">
<h3 class="api_header">Classes</h3>

<div class="api_component">
<h4 class="api_name">PageMod</h4>
<p>A PageMod object. Once activated a page mod will execute the supplied content
scripts in the context of any pages matching the pattern specified by the
'include' property.</p>
<div class="api_component_group">
<h5 class="api_header">Constructors</h5>

<div class="api_component">
<h6 class="api_name">PageMod(options)</h6>
<p>Creates a PageMod.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">options : <span class="datatype">object</span></div>
<p>Options for the PageMod, with the following keys:</p>
<div class="api_component">
<div class="api_name">include : <span class="datatype">string,array</span></div>
<p>A match pattern string or an array of match pattern strings.  These define
the pages to which the PageMod applies.  See the
<a href="packages/api-utils/docs/match-pattern.html">match-pattern</a> module for
a description of match pattern syntax.
At least one match pattern must be supplied.</p>
</div>

<div class="api_component">
<div class="api_name">[ contentScriptFile : <span class="datatype">string,array</span> ]</div>
<p>The local file URLs of content scripts to load.  Content scripts specified
by this option are loaded <em>before</em> those specified by the <code>contentScript</code>
option. Optional.</p>
</div>

<div class="api_component">
<div class="api_name">[ contentScript : <span class="datatype">string,array</span> ]</div>
<p>The texts of content scripts to load.  Content scripts specified by this
option are loaded <em>after</em> those specified by the <code>contentScriptFile</code> option.
Optional.</p>
</div>

<div class="api_component">
<div class="api_name">[ contentScriptWhen = "end" : <span class="datatype">string</span> ]</div>
<p>When to load the content scripts. This may take one of the following
values:</p>
<ul>
<li>"start": load content scripts immediately after the document
element for the page is inserted into the DOM, but before the DOM content
itself has been loaded</li>
<li>"ready": load content scripts once DOM content has been loaded,
corresponding to the
<a href="https://developer.mozilla.org/en/Gecko-Specific_DOM_Events">DOMContentLoaded</a>
event</li>
<li>"end": load content scripts once all the content (DOM, JS, CSS,
images) for the page has been loaded, at the time the
<a href="https://developer.mozilla.org/en/DOM/window.onload">window.onload event</a>
fires</li>
</ul>
<p>This property is optional and defaults to "end".</p>
</div>

<div class="api_component">
<div class="api_name">[ onAttach : <span class="datatype">function</span> ]</div>
<p>A function to call when the PageMod attaches content scripts to
a matching page. The function will be called with one argument, a <code>worker</code>
object which the add-on script can use to communicate with the content scripts
attached to the page in question.</p>
</div>

</div>

</div>

</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Methods</h5>

<div class="api_component">
<h6 class="api_name">destroy()</h6>
<p>Stops the page mod from making any more modifications.  Once destroyed the page
mod can no longer be used.  Note that modifications already made to open pages
will not be undone.</p>
</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Properties</h5>

<div class="api_component">
<h6 class="api_name">include : <span class="datatype">List</span></h6>
<p>A <a href="packages/api-utils/docs/list.html">list</a> of match pattern strings.  These
define the pages to which the page mod applies.  See the
<a href="packages/api-utils/docs/match-pattern.html">match-pattern</a> module for a
description of match patterns. Rules can be added to the list by calling its
<code>add</code> method and removed by calling its <code>remove</code> method.</p>
</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Events</h5>

<div class="api_component">
<h6 class="api_name">attach</h6>
<p>This event is emitted this event when the page-mod's content scripts are
attached to a page whose URL matches the page-mod's <code>include</code> filter.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name"><span class="datatype">Worker</span></div>
<p>The listener function is passed a <a href="packages/api-utils/docs/content/worker.html"><code>Worker</code></a> object that can be used to communicate
with any content scripts attached to this page.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">error</h6>
<p>This event is emitted when an uncaught runtime error occurs in one of the page
mod's content scripts.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name"><span class="datatype">Error</span></div>
<p>Listeners are passed a single argument, the
<a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error">Error</a>
object.</p>
</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>
