
<div id="self_module_api_docs" class="module_api_docs">
<h1>self</h1>
<div class="module_description"><p>The <code>self</code> module provides access to data that is bundled with the add-on
as a whole. It also provides access to the
<a href="dev-guide/addon-development/program-id.html">Program ID</a>, a value which is
unique for each add-on.</p>
<p>Note that the <code>self</code> module is completely different from the global <code>self</code>
object accessible to content scripts, which is used by a content script to
<a href="dev-guide/addon-development/content-scripts/using-port.html">communicate with the add-on code</a>.</p>
</div>

<div class="api_reference">
<h2 class="api_header">API Reference</h2>

<div class="api_component_group">
<h3 class="api_header">Properties</h3>

<div class="api_component">
<h4 class="api_name">id : <span class="datatype">string</span></h4>
<p>This property is a printable string that is unique for each add-on. It comes
from the <code>id</code> property set in the <code>package.json</code> file in the main package
(i.e. the package in which you run <code>cfx xpi</code>). While not generally of use to
add-on code directly, it can be used by internal API code to index local
storage and other resources that are associated with a particular add-on.
Eventually, this ID will be unspoofable (see
<a href="https://wiki.mozilla.org/Labs/Jetpack/Reboot/JEP/118">JEP 118</a> for details).</p>
</div>

<div class="api_component">
<h4 class="api_name">name : <span class="datatype">string</span></h4>
<p>This property contains the add-on's short name. It comes from the <code>name</code>
property in the main package's <code>package.json</code> file.</p>
</div>

<div class="api_component">
<h4 class="api_name">version : <span class="datatype">string</span></h4>
<p>This property contains the add-on's version string. It comes from the
<code>version</code> property set in the <code>package.json</code> file in the main package.</p>
</div>

<div class="api_component">
<h4 class="api_name">data : <span class="datatype">object</span></h4>
<p>The <code>data</code> object is used to access data that was bundled with the add-on.
This data lives in the main package's <code>data/</code> directory, immediately below
the <code>package.json</code> file. All files in this directory will be copied into the
XPI and made available through the <code>data</code> object.</p>
<p>The <a href="dev-guide/addon-development/package-spec.html">Package Specification</a>
section explains the <code>package.json</code> file.</p>
<div class="api_component_group">
<div class="api_header">Methods</div>

<div class="api_component">
<div class="api_name">data.load(name)</div>
<p>The <code>data.load(NAME)</code> method returns the contents of an embedded data file,
as a string. It is most useful for data that will be modified or parsed in
some way, such as JSON, XML, plain text, or perhaps an HTML template. For
data that can be displayed directly in a content frame, use <code>data.url(NAME)</code>.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">name : <span class="datatype">string</span></div>
<p>The filename to be read, relative to the
package's <code>data</code> directory. Each package that uses the <code>self</code> module
will see its own <code>data</code> directory.</p>
</div>

</div>

<div class="returns">Returns: <span class="datatype">string</span>
</div>

</div>

<div class="api_component">
<div class="api_name">data.url(name)</div>
<p>The <code>data.url(NAME)</code> method returns a URL instance that points at an embedded
data file. It is most useful for data that can be displayed directly in a
content frame. The URL instance can be passed to a content frame constructor,
such as the Panel:</p>
<pre><code>var self = require("self");
var myPanel = require("panel").Panel({
  contentURL: self.data.url("my-panel-content.html")
});
myPanel.show();
</code></pre>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">name : <span class="datatype">string</span></div>
<p>The filename to be read, relative to the
package's <code>data</code> directory. Each package that uses the <code>self</code> module
will see its own <code>data</code> directory.</p>
</div>

</div>

<div class="returns">Returns: <span class="datatype">URL</span>
</div>

</div>

</div>

</div>

</div>

</div>

</div>
