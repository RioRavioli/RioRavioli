
<div id="widget_module_api_docs" class="module_api_docs">
<h1>widget</h1>
<div class="module_description"><!-- contributed by Dietrich Ayala [dietrich@mozilla.com]  -->
<!-- contributed by Drew Willcoxon [adw@mozilla.com]  -->
<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->

<p>The <code>widget</code> module provides your add-on with a simple user interface that is
consistent with other add-ons and blends in well with Firefox.</p>
<h2>Introduction</h2>
<p>"Widgets" are small pieces of content that live in the Firefox 4
<a href="https://developer.mozilla.org/en/The_add-on_bar">add-on bar</a>.
They can be simple icons or complex web pages.  You can attach
<a href="packages/addon-kit/docs/panel.html">panels</a> to them that open when they're
clicked, or you can define a custom click handler to perform some other action,
like opening a web page in a tab.</p>
<p>There are a few advantages to using widgets over an ad hoc user interface.
First, your users will be accustomed to interacting with add-ons via widgets and
the add-on bar.  Second, it allows Firefox to treat your interface as a
first-class citizen.  For example, in the future Firefox may allow the user to
drag widgets from the add-on bar to other toolbars.  By exposing your interface
as a widget, your add-on would automatically inherit such functionality.</p>
<h2>Creation and Content</h2>
<p>Widgets can contain images or arbitrary web content.  You can include this
content inline as a string by using the <code>content</code> property, or point to content
using a URL with the <code>contentURL</code> property.</p>
<p>For example, this widget contains an image, so it looks like a simple icon:</p>
<pre><code>require("widget").Widget({
  id: "mozilla-icon", 
  label: "My Mozilla Widget",
  contentURL: "http://www.mozilla.org/favicon.ico"
});
</code></pre>
<p>Upon creation, the widget is automatically added to the add-on bar.
You can set the width of a widget, but the height is fixed so as to fit in the
add-on bar. If the content is an image, it is automatically scaled to be 16x16
pixels.</p>
<p>This widget contains an entire web page:</p>
<pre><code>require("widget").Widget({
  id: "hello-display",
  label: "My Hello Widget",
  content: "Hello!",
  width: 50
});
</code></pre>
<p>Widgets are quite small by default, so this example used the <code>width</code> property to
grow it in order to show all the text.</p>
<p>As with many SDK APIs, communication with the content inside your widgets is
handled by <a href="dev-guide/addon-development/web-content.html">content scripts</a>.
So, for example, to be notified when your widget's content has loaded, you can
make a small script that calls back to the widget when it finishes loading.</p>
<h2>Attaching Panels to Widgets</h2>
<p>You can supply a <a href="packages/addon-kit/docs/panel.html">panel</a> to the widget's
constructor: if you do this, the panel is automatically displayed when the
user clicks the widget.</p>
<pre><code>data = require("self").data

var clockPanel = require("panel").Panel({
  width:215,
  height:160,
  contentURL: data.url("clock.html")
});

require("widget").Widget({
  id: "open-clock-btn",
  label: "Clock",
  contentURL: data.url("History.png"),
  panel: clockPanel
});
</code></pre>
<!-- The icon the widget displays, shown in the screenshot, is taken from the
Nuvola icon set, http://www.icon-king.com/projects/nuvola/ which is made
available under the LGPL 2.1:
http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html -->

<p><img class="image-center" src="static-files/media/screenshots/widget-panel-clock.png"
alt="Panel attached to a widget">
<br></p>
<p>Note that this is, at the moment, the only way you can attach a panel to a widget.</p>
<p>You must supply the panel in the widget's constructor for it to work. If you
assign the panel to the widget after construction, the panel can still be shown
but will not be anchored to the widget:</p>
<pre><code>data = require("self").data

var clockPanel = require("panel").Panel({
  width:215,
  height:160,
  contentURL: data.url("clock.html")
});

widget = require("widget").Widget({
  id: "open-clock-btn",
  label: "Clock",
  contentURL: data.url("History.png")
});

widget.panel = clockPanel;

// Will not be anchored
widget.panel.show();
</code></pre>
<p>Also, if you try to call <code>panel.show()</code> inside your widget's <code>click</code> event
listener, the panel will not be anchored:</p>
<pre><code>data = require("self").data

var clockPanel = require("panel").Panel({
  width:215,
  height:160,
  contentURL: data.url("clock.html")
});

require("widget").Widget({
  id: "open-clock-btn",
  label: "Clock",
  contentURL: data.url("History.png"),
  panel: clockPanel,
  onClick: function() {
    // Will not be anchored
    this.panel.show();
  }
});
</code></pre>
<p>See <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=638142">bug 638142</a>.</p>
<h2>Examples</h2>
<p>For conciseness, these examples create their content scripts as strings and use
the <code>contentScript</code> property.  In your own add-ons, you will probably want to
create your content scripts in separate files and pass their URLs using the
<code>contentScriptFile</code> property.  See
<a href="dev-guide/addon-development/web-content.html">Working with Content Scripts</a> for more
information.</p>
<pre><code>var widgets = require("widget");

// A basic click-able image widget.
widgets.Widget({
  id: "google-link",
  label: "Widget with an image and a click handler",
  contentURL: "http://www.google.com/favicon.ico",
  onClick: function() {
    require("tabs").activeTab.url = "http://www.google.com/";
  }
});
</code></pre>
<br>

<pre><code>// A widget that changes display on mouseover.
widgets.Widget({
  id: "mouseover-effect",
  label: "Widget with changing image on mouseover",
  contentURL: "http://www.yahoo.com/favicon.ico",
  onMouseover: function() {
    this.contentURL = "http://www.bing.com/favicon.ico";
  },
  onMouseout: function() {
    this.contentURL = "http://www.yahoo.com/favicon.ico";
  }
});
</code></pre>
<br>

<pre><code>// A widget that updates content on a timer.
widgets.Widget({
  id: "auto-update-widget",
  label: "Widget that updates content on a timer",
  content: "0",
  contentScript: 'setTimeout(function() {' +
                 '  document.body.innerHTML++;' +
                 '}, 2000)',
  contentScriptWhen: "ready"
});
</code></pre>
<br>

<pre><code>// A widget that loads a random Flickr photo every 5 minutes.
widgets.Widget({
  id: "random-flickr",
  label: "Random Flickr Photo Widget",
  contentURL: "http://www.flickr.com/explore/",
  contentScriptWhen: "ready",
  contentScript: 'postMessage(document.querySelector(".pc_img").src);' +
                 'setTimeout(function() {' +
                 '  document.location = "http://www.flickr.com/explore/";' +
                 '}, 5 * 60 * 1000);',
  onMessage: function(imgSrc) {
    this.contentURL = imgSrc;
  },
  onClick: function() {
    require("tabs").activeTab.url = this.contentURL;
  }
});
</code></pre>
<br>

<pre><code>// A widget created with a specified width, that grows.
let myWidget = widgets.Widget({
  id: "widget-effect",
  label: "Wide widget that grows wider on a timer",
  content: "I'm getting longer.",
  width: 50,
});
require("timers").setInterval(function() {
  myWidget.width += 10;
}, 1000);
</code></pre>
<br>

<pre><code>// A widget communicating bi-directionally with a content script.
let widget = widgets.Widget({
  id: "message-test",
  label: "Bi-directional communication!",
  content: "&lt;foo&gt;bar&lt;/foo&gt;",
  contentScriptWhen: "ready",
  contentScript: 'on("message", function(message) {' +
                 '  alert("Got message: " + message);' +
                 '});' +
                 'postMessage("ready");',
  onMessage: function(message) {
    if (message == "ready")
      widget.postMessage("me too");
  }
});
</code></pre>
</div>

<div class="api_reference">
<h2 class="api_header">API Reference</h2>

<div class="api_component_group">
<h3 class="api_header">Classes</h3>

<div class="api_component">
<h4 class="api_name">Widget</h4>
<p>Represents a widget object.</p>
<div class="api_component_group">
<h5 class="api_header">Constructors</h5>

<div class="api_component">
<h6 class="api_name">Widget(options)</h6>
<p>Creates a new widget.  The widget is immediately added to the add-on bar.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">options : <span class="datatype">object</span></div>
<p>An object with the following keys:</p>
<div class="api_component">
<div class="api_name">label : <span class="datatype">string</span></div>
<p>A required string description of the widget used for accessibility,
title bars, and error reporting.</p>
</div>

<div class="api_component">
<div class="api_name">id : <span class="datatype">string</span></div>
<p>Mandatory string used to identify your widget in order to save its
location when the user moves it in the browser.
This string has to be unique and must not be changed over time.</p>
</div>

<div class="api_component">
<div class="api_name">[ content : <span class="datatype">string</span> ]</div>
<p>An optional string value containing the displayed content of the widget.
It may contain HTML. Widgets must have either the <code>content</code> property or the
<code>contentURL</code> property set.</p>
<p>If the content is an image, it is automatically scaled to be 16x16 pixels.</p>
</div>

<div class="api_component">
<div class="api_name">[ contentURL : <span class="datatype">string</span> ]</div>
<p>An optional string URL to content to load into the widget. This can be
<a href="dev-guide/addon-development/web-content.html">local content</a> or remote
content, an image or web content. Widgets must have either the <code>content</code>
property or the <code>contentURL</code> property set.</p>
<p>If the content is an image, it is automatically scaled to be 16x16 pixels.</p>
</div>

<div class="api_component">
<div class="api_name">[ panel : <span class="datatype">Panel</span> ]</div>
<p>An optional <a href="packages/addon-kit/docs/panel.html">panel</a> to open when the
user clicks on the widget. Note: If you also register a "click" listener,
it will be called instead of the panel being opened.  However, you can show
the panel from the listener by calling <code>this.panel.show()</code>.</p>
</div>

<div class="api_component">
<div class="api_name">[ width : <span class="datatype">integer</span> ]</div>
<p>Optional width in pixels of the widget. If not given, a default width is
used.</p>
</div>

<div class="api_component">
<div class="api_name">[ onClick : <span class="datatype">function</span> ]</div>
<p>Include this to listen to the widget's <code>click</code> event.</p>
</div>

<div class="api_component">
<div class="api_name">[ onMessage : <span class="datatype">function</span> ]</div>
<p>Include this to listen to the widget's <code>message</code> event.</p>
</div>

<div class="api_component">
<div class="api_name">[ onMouseover : <span class="datatype">function</span> ]</div>
<p>Include this to listen to the widget's <code>mouseover</code> event.</p>
</div>

<div class="api_component">
<div class="api_name">[ onMouseout : <span class="datatype">function</span> ]</div>
<p>Include this to listen to the widget's <code>mouseout</code> event.</p>
</div>

<div class="api_component">
<div class="api_name">[ onAttach : <span class="datatype">function</span> ]</div>
<p>Include this to listen to the widget's <code>attach</code> event.</p>
</div>

<div class="api_component">
<div class="api_name">[ tooltip : <span class="datatype">string</span> ]</div>
<p>Optional text to show when the user's mouse hovers over the widget.  If not
given, the <code>label</code> is used.</p>
</div>

<div class="api_component">
<div class="api_name">[ allow : <span class="datatype">object</span> ]</div>
<p>An optional object describing permissions for the content.  It should
contain a single key named <code>script</code> whose value is a boolean that indicates
whether or not to execute script in the content.  <code>script</code> defaults to true.</p>
</div>

<div class="api_component">
<div class="api_name">[ contentScriptFile : <span class="datatype">string,array</span> ]</div>
<p>A local file URL or an array of local file URLs of content scripts to load.
Content scripts specified by this property are loaded <em>before</em> those
specified by the <code>contentScript</code> property.</p>
</div>

<div class="api_component">
<div class="api_name">[ contentScript : <span class="datatype">string,array</span> ]</div>
<p>A string or an array of strings containing the texts of content scripts to
load.  Content scripts specified by this property are loaded <em>after</em> those
specified by the <code>contentScriptFile</code> property.</p>
</div>

<div class="api_component">
<div class="api_name">[ contentScriptWhen = "end" : <span class="datatype">string</span> ]</div>
<p>When to load the content scripts. This may take one of the following
values:</p>
<ul>
<li>"start": load content scripts immediately after the document
element for the widget is inserted into the DOM, but before the DOM content
itself has been loaded</li>
<li>"ready": load content scripts once DOM content has been loaded,
corresponding to the
<a href="https://developer.mozilla.org/en/Gecko-Specific_DOM_Events">DOMContentLoaded</a>
event</li>
<li>"end": load content scripts once all the content (DOM, JS, CSS,
images) for the widget has been loaded, at the time the
<a href="https://developer.mozilla.org/en/DOM/window.onload">window.onload event</a>
fires</li>
</ul>
<p>This property is optional and defaults to "end".</p>
</div>

</div>

</div>

</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Methods</h5>

<div class="api_component">
<h6 class="api_name">destroy()</h6>
<p>Removes the widget from the add-on bar.</p>
</div>

<div class="api_component">
<h6 class="api_name">postMessage(data)</h6>
<p>Sends a message to the widget's content scripts.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">data : <span class="datatype">value</span></div>
<p>The message to send.
  The message can be any
<a href = "dev-guide/addon-development/content-scripts/using-port.html#json_serializable">JSON-serializable value</a>.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">on(type, listener)</h6>
<p>Registers an event listener with the widget.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">string</span></div>
<p>The type of event to listen for.</p>
</div>

<div class="api_component">
<div class="api_name">listener : <span class="datatype">function</span></div>
<p>The listener function that handles the event.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">removeListener(type, listener)</h6>
<p>Unregisters an event listener from the widget.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">string</span></div>
<p>The type of event for which <code>listener</code> was registered.</p>
</div>

<div class="api_component">
<div class="api_name">listener : <span class="datatype">function</span></div>
<p>The listener function that was registered.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">getView(window)</h6>
<p>Retrieve a <code>WidgetView</code> instance of this widget relative to a browser window.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">window : <span class="datatype">BrowserWindow</span></div>
<p>The <a href="packages/addon-kit/docs/windows.html">BrowserWindow</a> instance to match.</p>
</div>

</div>

<div class="returns">Returns: <span class="datatype">WidgetView</span><p>A <code>WidgetView</code> instance associated with the browser window. Any changes
subsequently applied to this object will only be applied to the widget
attached to that window.</p>
</div>

</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Properties</h5>

<div class="api_component">
<h6 class="api_name">label : <span class="datatype">string</span></h6>
<p>The widget's label.  Read-only.</p>
</div>

<div class="api_component">
<h6 class="api_name">content : <span class="datatype">string</span></h6>
<p>A string containing the widget's content.  It can contain HTML.  Setting it
updates the widget's appearance immediately.  However, if the widget was
created using <code>contentURL</code>, then this property is meaningless, and setting it
has no effect.</p>
</div>

<div class="api_component">
<h6 class="api_name">contentURL : <span class="datatype">string</span></h6>
<p>The URL of content to load into the widget.  This can be
<a href="dev-guide/addon-development/web-content.html">local content</a> or remote
content, an image or web content.  Setting it updates the widget's appearance
immediately.  However, if the widget was created using <code>content</code>, then this
property is meaningless, and setting it has no effect.</p>
</div>

<div class="api_component">
<h6 class="api_name">panel : <span class="datatype">Panel</span></h6>
<p>A <a href="packages/addon-kit/docs/panel.html">panel</a> to open when the user clicks on
the widget.</p>
</div>

<div class="api_component">
<h6 class="api_name">width : <span class="datatype">number</span></h6>
<p>The widget's width in pixels.  Setting it updates the widget's appearance
immediately.</p>
</div>

<div class="api_component">
<h6 class="api_name">tooltip : <span class="datatype">string</span></h6>
<p>The text of the tooltip that appears when the user hovers over the widget.</p>
</div>

<div class="api_component">
<h6 class="api_name">allow : <span class="datatype">object</span></h6>
<p>A object describing permissions for the content.  It contains a single key
named <code>script</code> whose value is a boolean that indicates whether or not to
execute script in the content.</p>
</div>

<div class="api_component">
<h6 class="api_name">contentScriptFile : <span class="datatype">string,array</span></h6>
<p>A local file URL or an array of local file URLs of content scripts to load.</p>
</div>

<div class="api_component">
<h6 class="api_name">contentScript : <span class="datatype">string,array</span></h6>
<p>A string or an array of strings containing the texts of content scripts to
load.</p>
</div>

<div class="api_component">
<h6 class="api_name">contentScriptWhen : <span class="datatype">string</span></h6>
<p>When to load the content scripts. This may have one of the following
values:</p>
<ul>
<li>"start": load content scripts immediately after the document
element for the widget is inserted into the DOM, but before the DOM content
itself has been loaded</li>
<li>"ready": load content scripts once DOM content has been loaded,
corresponding to the
<a href="https://developer.mozilla.org/en/Gecko-Specific_DOM_Events">DOMContentLoaded</a>
event</li>
<li>"end": load content scripts once all the content (DOM, JS, CSS,
images) for the widget has been loaded, at the time the
<a href="https://developer.mozilla.org/en/DOM/window.onload">window.onload event</a>
fires</li>
</ul>
</div>

<div class="api_component">
<h6 class="api_name">port : <span class="datatype">EventEmitter</span></h6>
<p><a href="packages/api-utils/docs/events.html">EventEmitter</a> object that allows you to:</p>
<ul>
<li>send events to the content script using the <code>port.emit</code> function</li>
<li>receive events from the content script using the <code>port.on</code> function</li>
</ul>
<p>See the guide to
<a href="dev-guide/addon-development/content-scripts/using-port.html">
communicating using <code>port</code></a> for details.</p>
</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Events</h5>

<div class="api_component">
<h6 class="api_name">attach</h6>
<p>This event is emitted when a new <code>WidgetView</code> object is created using the
<code>getView()</code> function.</p>
</div>

<div class="api_component">
<h6 class="api_name">click</h6>
<p>This event is emitted when the widget is clicked.</p>
</div>

<div class="api_component">
<h6 class="api_name">message</h6>
<p>If you listen to this event you can receive message events from content
scripts associated with this widget. When a content script posts a
message using <code>self.postMessage()</code>, the message is delivered to the add-on
code in the widget's <code>message</code> event.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name"><span class="datatype">value</span></div>
<p>Listeners are passed a single argument which is the message posted
from the content script. The message can be any
<a href = "dev-guide/addon-development/content-scripts/using-port.html#json_serializable">JSON-serializable value</a>.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">mouseover</h6>
<p>This event is emitted when the user moves the mouse over the widget.</p>
</div>

<div class="api_component">
<h6 class="api_name">mouseout</h6>
<p>This event is emitted when the user moves the mouse away from the widget.</p>
</div>

</div>

</div>

<div class="api_component">
<h4 class="api_name">WidgetView</h4>
<p>Represents a widget instance specific to one browser window.</p>
<p>Anything you do to an instance of this object will only be applied to the
instance attached to its browser window: widget instances attached to other
browser windows will be unaffected.</p>
<p>By contrast, any changes you make to an instance of the normal <code>Widget</code> class
will be applied across all browser windows.</p>
<p>This class has all the same methods, attributes and events as the <code>Widget</code>
class except for the <code>getView</code> method and the <code>attach</code> event.</p>
<p>In this example <code>WidgetView</code> is used to display different content for
<code>http</code> and <code>https</code> schemes:</p>
<pre><code>// A widget that update its content specifically to each window.
let tabs = require("tabs");
let windows = require("windows").browserWindows;
let widget = widgets.Widget({
  id: "window-specific-test",
  label: "Widget with content specific to each window",
  content: " ",
  width: 50
});
// Observe tab switch or document changes in each existing tab:
function updateWidgetState(tab) {
  let view = widget.getView(tab.window);
  if (!view) return;
  // Update widget displayed text:
  view.content = tab.url.match(/^https/) ? "Secured" : "Unsafe";
}
tabs.on('ready', updateWidgetState);
tabs.on('activate', updateWidgetState);
</code></pre>
<div class="api_component_group">
<h5 class="api_header">Methods</h5>

<div class="api_component">
<h6 class="api_name">destroy()</h6>
<p>Removes the widget view from the add-on bar.</p>
</div>

<div class="api_component">
<h6 class="api_name">postMessage(data)</h6>
<p>Sends a message to the widget view's content scripts.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">data : <span class="datatype">value</span></div>
<p>The message to send. The message can be any
<a href = "dev-guide/addon-development/content-scripts/using-port.html#json_serializable">JSON-serializable value</a>.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">on(type, listener)</h6>
<p>Registers an event listener with the widget view.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">string</span></div>
<p>The type of event to listen for.</p>
</div>

<div class="api_component">
<div class="api_name">listener : <span class="datatype">function</span></div>
<p>The listener function that handles the event.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">removeListener(type, listener)</h6>
<p>Unregisters an event listener from the widget view.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">string</span></div>
<p>The type of event for which <code>listener</code> was registered.</p>
</div>

<div class="api_component">
<div class="api_name">listener : <span class="datatype">function</span></div>
<p>The listener function that was registered.</p>
</div>

</div>

</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Properties</h5>

<div class="api_component">
<h6 class="api_name">label : <span class="datatype">string</span></h6>
<p>The widget view's label.  Read-only.</p>
</div>

<div class="api_component">
<h6 class="api_name">content : <span class="datatype">string</span></h6>
<p>A string containing the widget view's content.  It can contain HTML.
Setting it updates the widget view's appearance immediately. However,
if the widget view was created using <code>contentURL</code>, then this property
is meaningless, and setting it has no effect.</p>
</div>

<div class="api_component">
<h6 class="api_name">contentURL : <span class="datatype">string</span></h6>
<p>The URL of content to load into the widget view.  This can be
<a href="dev-guide/addon-development/web-content.html">local content</a> or remote
content, an image or web content.  Setting it updates the widget view's
appearance immediately.  However, if the widget view was created using
<code>content</code>, then this property is meaningless, and setting it has no effect.</p>
</div>

<div class="api_component">
<h6 class="api_name">panel : <span class="datatype">Panel</span></h6>
<p>A <a href="packages/addon-kit/docs/panel.html">panel</a> to open when the user clicks on
the widget view.</p>
</div>

<div class="api_component">
<h6 class="api_name">width : <span class="datatype">number</span></h6>
<p>The widget view's width in pixels.  Setting it updates the widget view's
appearance immediately.</p>
</div>

<div class="api_component">
<h6 class="api_name">tooltip : <span class="datatype">string</span></h6>
<p>The text of the tooltip that appears when the user hovers over the widget
view.</p>
</div>

<div class="api_component">
<h6 class="api_name">allow : <span class="datatype">object</span></h6>
<p>A object describing permissions for the content.  It contains a single key
named <code>script</code> whose value is a boolean that indicates whether or not to
execute script in the content.</p>
</div>

<div class="api_component">
<h6 class="api_name">contentScriptFile : <span class="datatype">string,array</span></h6>
<p>A local file URL or an array of local file URLs of content scripts to load.</p>
</div>

<div class="api_component">
<h6 class="api_name">contentScript : <span class="datatype">string,array</span></h6>
<p>A string or an array of strings containing the texts of content scripts to
load.</p>
</div>

<div class="api_component">
<h6 class="api_name">contentScriptWhen : <span class="datatype">string</span></h6>
<p>When to load the content scripts. This may have one of the following
values:</p>
<ul>
<li>"start": load content scripts immediately after the document
element for the widget view is inserted into the DOM, but before the DOM
content itself has been loaded</li>
<li>"ready": load content scripts once DOM content has been loaded,
corresponding to the
<a href="https://developer.mozilla.org/en/Gecko-Specific_DOM_Events">DOMContentLoaded</a>
event</li>
<li>"end": load content scripts once all the content (DOM, JS, CSS,
images) for the widget view has been loaded, at the time the
<a href="https://developer.mozilla.org/en/DOM/window.onload">window.onload event</a>
fires</li>
</ul>
</div>

<div class="api_component">
<h6 class="api_name">port : <span class="datatype">EventEmitter</span></h6>
<p><a href="packages/api-utils/docs/events.html">EventEmitter</a> object that allows you to:</p>
<ul>
<li>send events to the content script using the <code>port.emit</code> function</li>
<li>receive events from the content script using the <code>port.on</code></li>
</ul>
<p>See the guide to
<a href="dev-guide/addon-development/content-scripts/using-port.html">
communicating using <code>port</code></a> for details.</p>
</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Events</h5>

<div class="api_component">
<h6 class="api_name">detach</h6>
<p>The <code>detach</code> event is fired when the widget view is removed from its related
window.
This can occur if the window is closed, Firefox exits, or the add-on is
disabled.</p>
</div>

<div class="api_component">
<h6 class="api_name">click</h6>
<p>This event is emitted when the widget view is clicked.</p>
</div>

<div class="api_component">
<h6 class="api_name">message</h6>
<p>If you listen to this event you can receive message events from content
scripts associated with this widget view. When a content script posts a
message using <code>self.postMessage()</code>, the message is delivered to the add-on
code in the widget view's <code>message</code> event.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name"><span class="datatype">value</span></div>
<p>Listeners are passed a single argument which is the message posted
from the content script. The message can be any
<a href = "dev-guide/addon-development/content-scripts/using-port.html#json_serializable">JSON-serializable value</a>.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">mouseover</h6>
<p>This event is emitted when the user moves the mouse over the widget view.</p>
</div>

<div class="api_component">
<h6 class="api_name">mouseout</h6>
<p>This event is emitted when the user moves the mouse away from the widget view.</p>
</div>

</div>

</div>

</div>

</div>

</div>
