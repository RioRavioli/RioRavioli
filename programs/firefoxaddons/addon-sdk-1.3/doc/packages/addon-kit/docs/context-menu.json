[["version", 4], ["markdown", "<!-- contributed by Drew Willcoxon [adw@mozilla.com]  -->\n<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->\n\nThe `context-menu` module lets you add items to Firefox's page context menu.\n\n\nIntroduction\n------------\n\nThe `context-menu` API provides a simple, declarative way to add items to the\npage's context menu.  You can add items that perform an action when clicked,\nsubmenus, and menu separators.\n\nInstead of manually adding items when particular contexts occur and then\nremoving them when those contexts go away, you *bind* items to contexts, and the\nadding and removing is automatically handled for you.  Items are bound to\ncontexts in much the same way that event listeners are bound to events.  When\nthe user invokes the context menu, all of the items bound to the current context\nare automatically added to the menu.  If no items are bound, none are added.\nLikewise, any items that were previously in the menu but are not bound to the\ncurrent context are automatically removed from the menu.  You never need to\nmanually remove your items from the menu unless you want them to never appear\nagain.\n\nFor example, if your add-on needs to add a context menu item whenever the\nuser visits a certain page, don't create the item when that page loads, and\ndon't remove it when the page unloads.  Rather, create your item only once and\nsupply a context that matches the target URL.\n\n\nSpecifying Contexts\n-------------------\n\nAs its name implies, the context menu should be reserved for the occurrence of\nspecific contexts.  Contexts can be related to page content or the page itself,\nbut they should never be external to the page.\n\nFor example, a good use of the menu would be to show an \"Edit Image\" item when\nthe user right-clicks an image in the page.  A bad use would be to show a\nsubmenu that listed all the user's tabs, since tabs aren't related to the page\nor the node the user clicked to open the menu.\n\n### The Page Context\n\nFirst of all, you may not need to specify a context at all.  When an item does\nnot specify a context, the page context applies.\n\nThe *page context* occurs when the user invokes the context menu on a\nnon-interactive portion of the page.  Try right-clicking a blank spot in this\npage, or on text.  Make sure that no text is selected.  The menu that appears\nshould contain the items \"Back\", \"Forward\", \"Reload\", \"Stop\", and so on.  This\nis the page context.\n\nThe page context is appropriate when your item acts on the page as a whole.  It\ndoes not occur when the user invokes the context menu on a link, image, or other\nnon-text node, or while a selection exists.\n\n### Declarative Contexts\n\nYou can specify some simple, declarative contexts when you create a menu item by\nsetting the `context` property of the options object passed to its constructor,\nlike this:\n\n    var cm = require(\"context-menu\");\n    cm.Item({\n      label: \"My Menu Item\",\n      context: cm.URLContext(\"*.mozilla.org\")\n    });\n\nThese contexts may be specified by calling the following constructors.  Each is\nexported by the `context-menu` module.\n\n<table>\n  <tr>\n    <th>Constructor</th>\n    <th>Description</th>\n  </tr>\n  <tr>\n    <td><code>\n      PageContext()\n    </code></td>\n    <td>\n      The page context.\n    </td>\n  </tr>\n  <tr>\n    <td><code>\n      SelectionContext()\n    </code></td>\n    <td>\n      This context occurs when the menu is invoked on a page in which the user\n      has made a selection.\n    </td>\n  </tr>\n  <tr>\n    <td><code>\n      SelectorContext(selector)\n    </code></td>\n    <td>\n      This context occurs when the menu is invoked on a node that either matches\n      <code>selector</code>, a CSS selector,  or has an ancestor that matches.\n      <code>selector</code> may include multiple selectors separated by commas,\n      e.g., <code>\"a[href], img\"</code>.\n    </td>\n  </tr>\n  <tr>\n    <td><code>\n      URLContext(matchPattern)\n    </code></td>\n    <td>\n      This context occurs when the menu is invoked on pages with particular\n      URLs.  <code>matchPattern</code> is a match pattern string or an array of\n      match pattern strings.  When <code>matchPattern</code> is an array, the\n      context occurs when the menu is invoked on a page whose URL matches any of\n      the patterns.  These are the same match pattern strings that you use with\n      the <a href=\"packages/addon-kit/docs/page-mod.html\"><code>page-mod</code></a>\n      <code>include</code> property.\n      <a href=\"packages/api-utils/docs/match-pattern.html\">Read more about patterns</a>.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      array\n    </td>\n    <td>\n      An array of any of the other types.  This context occurs when all contexts\n      in the array occur.\n    </td>\n  </tr>\n</table>\n\nMenu items also have a `context` property that can be used to add and remove\ndeclarative contexts after construction.  For example:\n\n    var context = require(\"context-menu\").SelectorContext(\"img\");\n    myMenuItem.context.add(context);\n    myMenuItem.context.remove(context);\n\nWhen a menu item is bound to more than one context, it appears in the menu when\nall of those contexts occur.\n\n### In Content Scripts\n\nThe declarative contexts are handy but not very powerful.  For instance, you\nmight want your menu item to appear for any page that has at least one image,\nbut declarative contexts won't help you there.\n\nWhen you need more control control over the context in which your menu items are\nshown, you can use content scripts.  Like other APIs in the SDK, the\n`context-menu` API uses\n[content scripts](dev-guide/addon-development/web-content.html) to let your\nadd-on interact with pages in the browser.  Each menu item you create in the\ntop-level context menu can have a content script.\n\nA special event named `\"context\"` is emitted in your content scripts whenever\nthe context menu is about to be shown.  If you register a listener function for\nthis event and it returns true, the menu item associated with the listener's\ncontent script is shown in the menu.\n\nFor example, this item appears whenever the context menu is invoked on a page\nthat contains at least one image:\n\n    require(\"context-menu\").Item({\n      label: \"This Page Has Images\",\n      contentScript: 'self.on(\"context\", function (node) {' +\n                     '  return !!document.querySelector(\"img\");' +\n                     '});'\n    });\n\nNote that the listener function has a parameter called `node`.  This is the node\nin the page that the user context-clicked to invoke the menu.  You can use it to\ndetermine whether your item should be shown.\n\nYou can both specify declarative contexts and listen for contexts in a content\nscript.  In that case, the declarative contexts are evaluated first.  If they\nare not current, then your context listener is never called.\n\nThis example takes advantage of that fact.  The listener can be assured that\n`node` will always be an image:\n\n    require(\"context-menu\").Item({\n      label: \"A Mozilla Image\",\n      context: contextMenu.SelectorContext(\"img\"),\n      contentScript: 'self.on(\"context\", function (node) {' +\n                     '  return /mozilla/.test(node.src);' +\n                     '});'\n    });\n\nYour item is shown only when all declarative contexts are current and your\ncontext listener returns true.\n\n\nHandling Menu Item Clicks\n-------------------------\n\nIn addition to using content scripts to listen for the `\"context\"` event as\ndescribed above, you can use content scripts to handle item clicks.  When the\nuser clicks your menu item, an event named `\"click\"` is emitted in the item's\ncontent script.\n\nTherefore, to handle an item click, listen for the `\"click\"` event in that\nitem's content script like so:\n\n    require(\"context-menu\").Item({\n      label: \"My Item\",\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  console.log(\"Item clicked!\");' +\n                     '});'\n    });\n\nNote that the listener function has parameters called `node` and `data`.  `node`\nis the node that the user context-clicked to invoke the menu.  You can use it\nwhen performing some action.  `data` is the `data` property of the menu item\nthat was clicked.  Since only top-level menu items have content scripts, this\ncomes in handy for determining which item in a `Menu` was clicked:\n\n    var cm = require(\"context-menu\");\n    cm.Menu({\n      label: \"My Menu\",\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  console.log(\"You clicked \" + data);' +\n                     '});',\n      items: [\n        cm.Item({ label: \"Item 1\", data: \"item1\" }),\n        cm.Item({ label: \"Item 2\", data: \"item2\" }),\n        cm.Item({ label: \"Item 3\", data: \"item3\" })\n      ]\n    });\n\nOften you will need to collect some kind of information in the click listener\nand perform an action unrelated to content.  To communicate to the menu item\nassociated with the content script, the content script can call the\n`postMessage` function attached to the global `self` object, passing it some\nJSON-able data.  The menu item's `\"message\"` event listener will be called with\nthat data.\n\n    require(\"context-menu\").Item({\n      label: \"Edit Image\",\n      context: contextMenu.SelectorContext(\"img\"),\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  self.postMessage(node.src);' +\n                     '});',\n      onMessage: function (imgSrc) {\n        openImageEditor(imgSrc);\n      }\n    });\n\n\nUpdating a Menu Item's Label\n----------------------------\n\nEach menu item must be created with a label, but you can change its label later\nusing a couple of methods.\n\nThe simplest method is to set the menu item's `label` property.  This example\nupdates the item's label based on the number of times it's been clicked:\n\n    var numClicks = 0;\n    var myItem = require(\"context-menu\").Item({\n      label: \"Click Me: \" + numClicks,\n      contentScript: 'self.on(\"click\", self.postMessage);',\n      onMessage: function () {\n        numClicks++;\n        this.label = \"Click Me: \" + numClicks;\n        // Setting myItem.label is equivalent.\n      }\n    });\n\nSometimes you might want to update the label based on the context.  For\ninstance, if your item performs a search with the user's selected text, it would\nbe nice to display the text in the item to provide feedback to the user.  In\nthese cases you can use the second method.  Recall that your content scripts can\nlisten for the `\"context\"` event and if your listeners return true, the items\nassociated with the content scripts are shown in the menu.  In addition to\nreturning true, your `\"context\"` listeners can also return strings.  When a\n`\"context\"` listener returns a string, it becomes the item's new label.\n\nThis item implements the aforementioned search example:\n\n    var cm = require(\"context-menu\");\n    cm.Item({\n      label: \"Search Google\",\n      context: cm.SelectionContext(),\n      contentScript: 'self.on(\"context\", function () {' +\n                     '  var text = window.getSelection().toString();' +\n                     '  if (text.length > 20)' +\n                     '    text = text.substr(0, 20) + \"...\";' +\n                     '  return \"Search Google for \" + text;' +\n                     '});'\n    });\n\nThe `\"context\"` listener gets the window's current selection, truncating it if\nit's too long, and includes it in the returned string.  When the item is shown,\nits label will be \"Search Google for `text`\", where `text` is the truncated\nselection.\n\n\nMore Examples\n-------------\n\nFor conciseness, these examples create their content scripts as strings and use\nthe `contentScript` property.  In your own add-on, you will probably want to\ncreate your content scripts in separate files and pass their URLs using the\n`contentScriptFile` property.  See\n[Working with Content Scripts](dev-guide/addon-development/web-content.html)\nfor more information.\n\nShow an \"Edit Page Source\" item when the user right-clicks a non-interactive\npart of the page:\n\n    require(\"context-menu\").Item({\n      label: \"Edit Page Source\",\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  self.postMessage(document.URL);' +\n                     '});',\n      onMessage: function (pageURL) {\n        editSource(pageURL);\n      }\n    });\n\nShow an \"Edit Image\" item when the menu is invoked on an image:\n\n    require(\"context-menu\").Item({\n      label: \"Edit Image\",\n      context: contextMenu.SelectorContext(\"img\"),\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  self.postMessage(node.src);' +\n                     '});',\n      onMessage: function (imgSrc) {\n        openImageEditor(imgSrc);\n      }\n    });\n\nShow an \"Edit Mozilla Image\" item when the menu is invoked on an image in a\nmozilla.org or mozilla.com page:\n\n    var cm = require(\"context-menu\");\n    cm.Item({\n      label: \"Edit Mozilla Image\",\n      context: [\n        cm.URLContext([\"*.mozilla.org\", \"*.mozilla.com\"]),\n        cm.SelectorContext(\"img\")\n      ],\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  self.postMessage(node.src);' +\n                     '});',\n      onMessage: function (imgSrc) {\n        openImageEditor(imgSrc);\n      }\n    });\n\nShow an \"Edit Page Images\" item when the page contains at least one image:\n\n    require(\"context-menu\").Item({\n      label: \"Edit Page Images\",\n      // This ensures the item only appears during the page context.\n      context: contextMenu.PageContext(),\n      contentScript: 'self.on(\"context\", function (node) {' +\n                     '  var pageHasImgs = !!document.querySelector(\"img\");' +\n                     '  return pageHasImgs;' +\n                     '});' +\n                     'self.on(\"click\", function (node, data) {' +\n                     '  var imgs = document.querySelectorAll(\"img\");' +\n                     '  var imgSrcs = [];' +\n                     '  for (var i = 0 ; i < imgs.length; i++)' +\n                     '    imgSrcs.push(imgs[i].src);' +\n                     '  self.postMessage(imgSrcs);' +\n                     '});',\n      onMessage: function (imgSrcs) {\n        openImageEditor(imgSrcs);\n      }\n    });\n\nShow a \"Search With\" menu when the user right-clicks an anchor that searches\nGoogle or Wikipedia with the text contained in the anchor:\n\n    var cm = require(\"context-menu\");\n    var googleItem = cm.Item({\n      label: \"Google\",\n      data: \"http://www.google.com/search?q=\"\n    });\n    var wikipediaItem = cm.Item({\n      label: \"Wikipedia\",\n      data: \"http://en.wikipedia.org/wiki/Special:Search?search=\"\n    });\n    var searchMenu = cm.Menu({\n      label: \"Search With\",\n      context: contextMenu.SelectorContext(\"a[href]\"),\n      contentScript: 'self.on(\"click\", function (node, data) {' +\n                     '  var searchURL = data + node.textContent;' +\n                     '  window.location.href = searchURL;' +\n                     '});',\n      items: [googleItem, wikipediaItem]\n    });\n\n\n"], ["api-json", {"line_number": 397, "name": "Item", "constructors": [{"line_number": 400, "name": "Item", "params": [{"line_number": 403, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "string", "line_number": 405, "required": true, "name": "label", "description": "The item's label.  It must either be a string or an object that implements\n`toString()`."}, {"datatype": "string", "line_number": 408, "required": false, "name": "image", "description": "The item's icon, a string URL.  The URL can be remote, a reference to an\nimage in the add-on's `data` directory, or a data URI."}, {"datatype": "string", "line_number": 411, "required": false, "name": "data", "description": "An optional arbitrary value to associate with the item.  It must be either a\nstring or an object that implements `toString()`.  It will be passed to\nclick listeners."}, {"datatype": "value", "line_number": 415, "required": false, "name": "context", "description": "If the item is contained in the top-level context menu, this declaratively\nspecifies the context under which the item will appear; see Specifying\nContexts above.  Ignored if the item is contained in a submenu."}, {"datatype": "string,array", "line_number": 419, "required": false, "name": "contentScript", "description": "If the item is contained in the top-level context menu, this is the content\nscript or an array of content scripts that the item can use to interact with\nthe page.  Ignored if the item is contained in a submenu."}, {"datatype": "string,array", "line_number": 423, "required": false, "name": "contentScriptFile", "description": "If the item is contained in the top-level context menu, this is the local\nfile URL of the content script or an array of such URLs that the item can\nuse to interact with the page.  Ignored if the item is contained in a\nsubmenu."}, {"datatype": "function", "line_number": 428, "required": false, "name": "onMessage", "description": "If the item is contained in the top-level context menu, this function will\nbe called when the content script calls `self.postMessage`.  It will be\npassed the data that was passed to `postMessage`.  Ignored if the item is\ncontained in a submenu."}], "description": "An object with the following keys:"}], "signature": "Item(options)", "type": "constructor", "description": "Creates a labeled menu item that can perform an action when clicked."}], "events": [{"arguments": [{"datatype": "value", "line_number": 501, "description": "Listeners are passed a single argument which is the message posted\nfrom the content script. The message can be any\n<a href = \"dev-guide/addon-development/content-scripts/using-port.html#json_serializable\">JSON-serializable value</a>."}], "line_number": 494, "type": "event", "name": "message", "description": "If you listen to this event you can receive message events from content\nscripts associated with this menu item. When a content script posts a\nmessage using `self.postMessage()`, the message is delivered to the add-on\ncode in the menu item's `message` event.\n"}], "methods": [{"line_number": 486, "signature": "destroy()", "type": "method", "name": "destroy", "description": "Permanently removes the item from its parent menu and frees its resources.\nThe item must not be used afterward.  If you need to remove the item from its\nparent menu but use it afterward, call `removeItem()` on the parent menu\ninstead."}], "type": "class", "properties": [{"datatype": "string", "line_number": 435, "type": "property", "name": "label", "description": "The menu item's label.  You can set this after creating the item to update its\nlabel later."}, {"datatype": "string", "line_number": 441, "type": "property", "name": "image", "description": "The item's icon, a string URL.  The URL can be remote, a reference to an image\nin the add-on's `data` directory, or a data URI.  You can set this after\ncreating the item to update its image later.  To remove the item's image, set\nit to `null`."}, {"datatype": "string", "line_number": 449, "type": "property", "name": "data", "description": "An optional arbitrary value to associate with the item.  It must be either a\nstring or an object that implements `toString()`.  It will be passed to\nclick listeners.  You can set this after creating the item to update its data\nlater."}, {"datatype": "list", "line_number": 457, "type": "property", "name": "context", "description": "A list of declarative contexts for which the menu item will appear in the\ncontext menu.  Contexts can be added by calling `context.add()` and removed by\ncalled `context.remove()`.  This property is meaningful only for items\ncontained in the top-level context menu."}, {"datatype": "Menu", "line_number": 465, "type": "property", "name": "parentMenu", "description": "The item's parent `Menu`, or `null` if the item is contained in the top-level\ncontext menu.  This property is read-only.  To add the item to a new menu,\ncall that menu's `addItem()` method."}, {"datatype": "string,array", "line_number": 472, "type": "property", "name": "contentScript", "description": "The content script or the array of content scripts associated with the menu\nitem during creation.  This property is meaningful only for items contained in\nthe top-level context menu."}, {"datatype": "string,array", "line_number": 479, "type": "property", "name": "contentScriptFile", "description": "The URL of a content script or the array of such URLs associated with the menu\nitem during creation.  This property is meaningful only for items contained in\nthe top-level context menu."}], "description": "A labeled menu item that can perform an action when clicked.\n\n\n\n\n\n\n\n\n\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 509, "name": "Menu", "constructors": [{"line_number": 513, "name": "Menu", "params": [{"line_number": 516, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "string", "line_number": 518, "required": true, "name": "label", "description": "The item's label.  It must either be a string or an object that implements\n`toString()`."}, {"datatype": "array", "line_number": 521, "required": true, "name": "items", "description": "An array of menu items that the menu will contain.  Each must be an `Item`,\n`Menu`, or `Separator`."}, {"datatype": "string", "line_number": 524, "required": false, "name": "image", "description": "The menu's icon, a string URL.  The URL can be remote, a reference to an\nimage in the add-on's `data` directory, or a data URI."}, {"datatype": "value", "line_number": 527, "required": false, "name": "context", "description": "If the menu is contained in the top-level context menu, this declaratively\nspecifies the context under which the menu will appear; see Specifying\nContexts above.  Ignored if the menu is contained in a submenu."}, {"datatype": "string,array", "line_number": 531, "required": false, "name": "contentScript", "description": "If the menu is contained in the top-level context menu, this is the content\nscript or an array of content scripts that the menu can use to interact with\nthe page.  Ignored if the menu is contained in a submenu."}, {"datatype": "string,array", "line_number": 535, "required": false, "name": "contentScriptFile", "description": "If the menu is contained in the top-level context menu, this is the local\nfile URL of the content script or an array of such URLs that the menu can\nuse to interact with the page.  Ignored if the menu is contained in a\nsubmenu."}, {"datatype": "function", "line_number": 540, "required": false, "name": "onMessage", "description": "If the menu is contained in the top-level context menu, this function will\nbe called when the content script calls `self.postMessage`.  It will be\npassed the data that was passed to `postMessage`.  Ignored if the item is\ncontained in a submenu."}], "description": "An object with the following keys:"}], "signature": "Menu(options)", "type": "constructor", "description": "Creates a labeled menu item that expands into a submenu."}], "events": [{"arguments": [{"datatype": "value", "line_number": 630, "description": "Listeners are passed a single argument which is the message posted\nfrom the content script. The message can be any\n<a href = \"dev-guide/addon-development/content-scripts/using-port.html#json_serializable\">JSON-serializable value</a>."}], "line_number": 623, "type": "event", "name": "message", "description": "If you listen to this event you can receive message events from content\nscripts associated with this menu item. When a content script posts a\nmessage using `self.postMessage()`, the message is delivered to the add-on\ncode in the menu item's `message` event.\n"}], "methods": [{"line_number": 598, "name": "addItem", "params": [{"datatype": "Item,Menu,Separator", "line_number": 603, "required": true, "name": "item", "description": "The `Item`, `Menu`, or `Separator` to add to the menu."}], "signature": "addItem(item)", "type": "method", "description": "Appends a menu item to the end of the menu.  If the item is already contained\nin another menu or in the top-level context menu, it's automatically removed\nfirst."}, {"line_number": 607, "name": "removeItem", "params": [{"datatype": "Item,Menu,Separator", "line_number": 611, "required": true, "name": "item", "description": "The menu item to remove from the menu."}], "signature": "removeItem(item)", "type": "method", "description": "Removes the given menu item from the menu.  If the menu does not contain the\nitem, this method does nothing."}, {"line_number": 615, "signature": "destroy()", "type": "method", "name": "destroy", "description": "Permanently removes the menu from its parent menu and frees its resources.\nThe menu must not be used afterward.  If you need to remove the menu from its\nparent menu but use it afterward, call `removeItem()` on the parent menu\ninstead."}], "type": "class", "properties": [{"datatype": "string", "line_number": 547, "type": "property", "name": "label", "description": "The menu's label.  You can set this after creating the menu to update its\nlabel later."}, {"datatype": "array", "line_number": 553, "type": "property", "name": "items", "description": "An array containing the items in the menu.  The array is read-only, meaning\nthat modifications to it will not affect the menu.  However, setting this\nproperty to a new array will replace all the items currently in the menu with\nthe items in the new array."}, {"datatype": "string", "line_number": 561, "type": "property", "name": "image", "description": "The menu's icon, a string URL.  The URL can be remote, a reference to an image\nin the add-on's `data` directory, or a data URI.  You can set this after\ncreating the menu to update its image later.  To remove the menu's image, set\nit to `null`."}, {"datatype": "list", "line_number": 569, "type": "property", "name": "context", "description": "A list of declarative contexts for which the menu will appear in the context\nmenu.  Contexts can be added by calling `context.add()` and removed by called\n`context.remove()`.  This property is meaningful only for menus contained in\nthe top-level context menu."}, {"datatype": "Menu", "line_number": 577, "type": "property", "name": "parentMenu", "description": "The menu's parent `Menu`, or `null` if the menu is contained in the top-level\ncontext menu.  This property is read-only.  To add the menu to a new menu,\ncall that menu's `addItem()` method."}, {"datatype": "string,array", "line_number": 584, "type": "property", "name": "contentScript", "description": "The content script or the array of content scripts associated with the menu\nduring creation.  This property is meaningful only for menus contained in the\ntop-level context menu."}, {"datatype": "string,array", "line_number": 591, "type": "property", "name": "contentScriptFile", "description": "The URL of a content script or the array of such URLs associated with the menu\nduring creation.  This property is meaningful only for menus contained in the\ntop-level context menu."}], "description": "A labeled menu item that expands into a submenu.\n\n\n\n\n\n\n\n\n\n\n\n\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 638, "name": "Separator", "constructors": [{"line_number": 643, "signature": "Separator()", "type": "constructor", "name": "Separator", "description": "Creates a menu separator."}], "methods": [{"line_number": 654, "signature": "destroy()", "type": "method", "name": "destroy", "description": "Permanently removes the separator from its parent menu and frees its\nresources.  The separator must not be used afterward.  If you need to remove\nthe separator from its parent menu but use it afterward, call `removeItem()`\non the parent menu instead."}], "type": "class", "properties": [{"datatype": "Menu", "line_number": 648, "type": "property", "name": "parentMenu", "description": "The separator's parent `Menu`.  This property is read-only.  To add the\nseparator to a new menu, call that menu's `addItem()` method."}], "description": "A menu separator.  Separators can be contained only in `Menu`s, not in the\ntop-level context menu.\n\n\n\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 664, "constructors": [{"line_number": 666, "signature": "PageContext()", "type": "constructor", "name": "PageContext", "description": "Creates a page context.  See Specifying Contexts above."}], "type": "class", "name": "PageContext", "description": ""}], ["markdown", "\n\n"], ["api-json", {"line_number": 672, "constructors": [{"line_number": 674, "signature": "SelectionContext()", "type": "constructor", "name": "SelectionContext", "description": "Creates a context that occurs when a page contains a selection.  See\nSpecifying Contexts above."}], "type": "class", "name": "SelectionContext", "description": ""}], ["markdown", "\n\n"], ["api-json", {"line_number": 681, "constructors": [{"line_number": 683, "name": "SelectorContext", "params": [{"datatype": "string", "line_number": 687, "required": true, "name": "selector", "description": "A CSS selector."}], "signature": "SelectorContext(selector)", "type": "constructor", "description": "Creates a context that matches a given CSS selector.  See Specifying Contexts\nabove."}], "type": "class", "name": "SelectorContext", "description": ""}], ["markdown", "\n\n"], ["api-json", {"line_number": 692, "constructors": [{"line_number": 694, "name": "URLContext", "params": [{"datatype": "string,array", "line_number": 698, "required": true, "name": "matchPattern", "description": "A [match pattern](packages/api-utils/docs/match-pattern.html) string or an array of\nmatch pattern strings."}], "signature": "URLContext(matchPattern)", "type": "constructor", "description": "Creates a context that matches pages with particular URLs.  See Specifying\nContexts above."}], "type": "class", "name": "URLContext", "description": ""}], ["markdown", "\n"]]