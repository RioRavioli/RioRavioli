[["version", 4], ["markdown", "<!-- contributed by Irakli Gozalishvili [gozala@mozilla.com]  -->\n\nThe `passwords` module allows add-ons to interact with Firefox's\n[Password Manager](http://support.mozilla.com/en-US/kb/Remembering%20passwords)\nto add, retrieve and remove stored credentials.\n\nA _credential_ is the set of information a user supplies to authenticate\nherself with a service. Typically a credential consists of a username and a\npassword.\n\nUsing this module you can:\n\n1. **Search** for credentials which have been stored in the Password Manager.\n   You can then use the credentials to access their related service (for\n   example, by logging into a web site).\n\n2. **Store** credentials in the Password Manager. You can store different sorts\n   of credentials, as outlined in the \"Credentials\" section below.\n\n3. **Remove** stored credentials from the Password Manager.\n\n## Credentials ##\n\nIn this API, credentials are represented by objects.\n\nYou create credential objects to pass into the API, and the API also returns\ncredential objects to you.  The sections below explain both the properties you\nshould define on credential objects and the properties you can expect on\ncredential objects returned by the API.\n\nAll credential objects include `username` and `password` properties. Different\nsorts of stored credentials include various additional properties, as\noutlined in this section.\n\nYou can use the Passwords API with three sorts of credentials:\n\n* Add-on credentials\n* HTML form credentials\n* HTTP Authentication credentials\n\n### Add-on Credential ###\n\nThese are associated with your add-on rather than a particular web site.\nThey contain the following properties:\n\n<table>\n<colgroup>\n<col width=\"25%\">\n</colgroup>\n<tr>\n  <td>\n    <code>username</code>\n  </td>\n  <td>\n    The username.\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>password</code>\n  </td>\n  <td>\n    The password.\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>url</code>\n  </td>\n  <td>\n    <p>For an add-on credential, this property is of the form:<br><code>\n    addon:&lt;addon-id&gt;</code>, where <code>&lt;addon-id&gt;</code>\n    is the add-on's\n    <a href=\"dev-guide/addon-development/program-id.html\">\n    Program ID</a>.</p>\n    <p>You don't supply this value when storing an add-on credential: it is\n    automatically generated for you. However, you can use it to work out\n    which stored credentials belong to your add-on by comparing it with the\n    <code>uri</code> property of the\n    <a href=\"packages/addon-kit/docs/self.html\"><code>self</code></a>\n    module.</p>\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>realm</code>\n  </td>\n  <td>\n    <p>You can use this as a name for the credential, to distinguish\n    it from any other credentials you've stored.</p>\n    <p>The realm is displayed\n    in Firefox's Password Manager, under \"Site\", in brackets after the URL.\n    For example, if the realm for a credential is \"User Registration\", then\n    its \"Site\" field will look something like:</p>\n    <code>addon:jid0-01mBBFyu0ZAXCFuB1JYKooSTKIc (User Registration)</code>\n  </td>\n</tr>\n\n</table>\n\n### HTML Form Credential ###\n\nIf a web service uses HTML forms to authenticate its users, then the\ncorresponding credential is an HTML Form credential.\n\nIt contains the following properties:\n\n<table>\n<colgroup>\n<col width=\"25%\">\n</colgroup>\n<tr>\n  <td>\n    <code>username</code>\n  </td>\n  <td>\n    The username.\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>password</code>\n  </td>\n  <td>\n    The password.\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>url</code>\n  </td>\n  <td>\n    The URL for the web service which requires the credential.\n    You should omit anything after the hostname and (optional) port.\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>formSubmitURL</code>\n  </td>\n  <td>\n    The value of the form's \"action\" attribute.\n    You should omit anything after the hostname and (optional) port.\n    If the form doesn't contain an \"action\" attribute, this property should\n    match the <code>url</code> property.\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>usernameField</code>\n  </td>\n  <td>\n    The value of the \"name\" attribute for the form's username field.\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>passwordField</code>\n  </td>\n  <td>\n    The value of the \"name\" attribute for the form's password field.\n  </td>\n</tr>\n\n</table>\n\nSo: given a form at `http://www.example.com/login`\nwith the following HTML:\n\n<script type=\"syntaxhighlighter\" class=\"brush: html\"><![CDATA[\n<form action=\"http://login.example.com/foo/authenticate.cgi\">\n      <div>Please log in.</div>\n      <label>Username:</label> <input type=\"text\" name=\"uname\">\n      <label>Password:</label> <input type=\"password\" name=\"pword\">\n</form>\n]]>\n</script>\n\nThe corresponding values for the credential (excluding username and password)\nshould be:\n\n<pre>\n  url: \"http://www.example.com\"\n  formSubmitURL: \"http://login.example.com\"\n  usernameField: \"uname\"\n  passwordField: \"pword\"\n</pre>\n\nNote that for both `url` and `formSubmitURL`, the portion of the URL after the\nhostname is omitted.\n\n### HTTP Authentication Credential ###\n\nThese are used to authenticate the user to a web site\nwhich uses HTTP Authentication, as detailed in\n[RFC 2617](http://tools.ietf.org/html/rfc2617).\nThey contain the following properties:\n\n<table>\n<colgroup>\n<col width=\"25%\">\n</colgroup>\n<tr>\n  <td>\n    <code>username</code>\n  </td>\n  <td>\n    The username.\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>password</code>\n  </td>\n  <td>\n    The password.\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>url</code>\n  </td>\n  <td>\n    The URL for the web service which requires the credential.\n    You should omit anything after the hostname and (optional) port.\n  </td>\n</tr>\n\n<tr>\n  <td>\n    <code>realm</code>\n  </td>\n  <td>\n    <p>The WWW-Authenticate response header sent by the server may include a\n    \"realm\" field as detailed in\n    <a href=\"http://tools.ietf.org/html/rfc2617\">RFC 2617</a>. If it does,\n    this property contains the value for the \"realm\" field. Otherwise, it is\n    omitted.</p>\n    <p>The realm is displayed in Firefox's Password Manager, under \"Site\",\n    in brackets after the URL.</p>\n  </td>\n</tr>\n\n</table>\n\nSo: if a web server at `http://www.example.com` requested authentication with\na response code like this:\n\n<pre>\n  HTTP/1.0 401 Authorization Required\n  Server: Apache/1.3.27\n  WWW-Authenticate: Basic realm=\"ExampleCo Login\"\n</pre>\n\nThe corresponding values for the credential  (excluding username and password)\nshould be:\n\n<pre>\n  url: \"http://www.example.com\"\n  realm: \"ExampleCo Login\"\n</pre>\n\n## onComplete and onError ##\n\nThis API is explicitly asynchronous, so all its functions take two callback\nfunctions as additional options: `onComplete` and `onError`.\n\n`onComplete` is called when the operation has completed successfully and\n`onError` is called when the function encounters an error.\n\nBecause the `search` function is expected to return a list of matching\ncredentials, its `onComplete` option is mandatory. Because the other functions\ndon't return a value in case of success their `onComplete` options are\noptional.\n\nFor all functions, `onError` is optional.\n\n"], ["api-json", {"line_number": 288, "name": "search", "params": [{"line_number": 358, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "string", "line_number": 372, "required": false, "name": "username", "description": "The username for the credential.\n"}, {"datatype": "string", "line_number": 375, "required": false, "name": "password", "description": "The password for the credential.\n"}, {"datatype": "string", "line_number": 378, "required": false, "name": "url", "description": "The URL associated with the credential.\n"}, {"datatype": "string", "line_number": 381, "required": false, "name": "formSubmitURL", "description": "The URL an HTML form credential is submitted to.\n"}, {"datatype": "string", "line_number": 384, "required": false, "name": "realm", "description": "For HTTP Authentication credentials, the realm for which the credential was\nrequested. For add-on credentials, a name for the credential.\n"}, {"datatype": "string", "line_number": 388, "required": false, "name": "usernameField", "description": "The value of the `name` attribute for the user name input field in a form.\n"}, {"datatype": "string", "line_number": 391, "required": false, "name": "passwordField", "description": "The value of the `name` attribute for the password input field in a form.\n"}, {"datatype": "function", "line_number": 394, "required": true, "name": "onComplete", "description": "The callback function that is called once the function completes successfully.\nIt is passed all the matching credentials as a list. This is the only\nmandatory option.\n"}, {"datatype": "function", "line_number": 399, "required": false, "name": "onError", "description": "The callback function that is called if the function failed. The\ncallback is passed an `error` containing a reason of a failure: this is an\n[nsIException](https://developer.mozilla.org/en/nsIException) object.\n"}], "description": "The `options` object may contain any credential properties. It is used to\nrestrict the set of credentials returned by the `search` function.\n\nSee \"Credentials\" above for details on what these properties should be.\n\nAdditionally, `options` must contain a function assigned to its `onComplete`\nproperty: this is called when the function completes and is passed the set of\ncredentials retrieved.\n\n`options` may contain a function assigned to its `onError` property, which is\ncalled if the function encounters an error. `onError` is passed the error as an\n[nsIException](https://developer.mozilla.org/en/nsIException) object.\n"}], "signature": "search(options)", "type": "function", "description": "\nThis function is used to retrieve a credential, or a list of credentials,\nstored in the Password Manager.\n\nYou pass it any subset of the possible properties a credential can contain.\nCredentials which match all the properties you supplied are returned as an\nargument to the `onComplete` callback.\n\nSo if you pass in an empty set of properties, all stored credentials are\nreturned:\n\n    function show_all_passwords() {\n      require(\"passwords\").search({\n        onComplete: function onComplete(credentials) {\n          credentials.forEach(function(credential) {\n            console.log(credential.username);\n            console.log(credential.password);\n            });\n          }\n        });\n      }\n\nIf you pass it a single property, only credentials matching that property are\nreturned:\n\n    function show_passwords_for_joe() {\n      require(\"passwords\").search({\n        username: \"joe\",\n        onComplete: function onComplete(credentials) {\n          credentials.forEach(function(credential) {\n            console.log(credential.username);\n            console.log(credential.password);\n            });\n          }\n        });\n      }\n\nIf you pass more than one property, returned credentials must match all of\nthem:\n\n    function show_google_password_for_joe() {\n      require(\"passwords\").search({\n        username: \"joe\",\n        url: \"https://www.google.com\",\n        onComplete: function onComplete(credentials) {\n          credentials.forEach(function(credential) {\n            console.log(credential.username);\n            console.log(credential.password);\n            });\n          }\n        });\n      }\n\nTo retrieve only credentials associated with your add-on, use the `url`\nproperty, initialized from `self.uri`:\n\n    function show_my_addon_passwords() {\n      require(\"passwords\").search({\n        url: require(\"self\").uri,\n        onComplete: function onComplete(credentials) {\n          credentials.forEach(function(credential) {\n            console.log(credential.username);\n            console.log(credential.password);\n            });\n          }\n        });\n      }\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 406, "name": "store", "params": [{"line_number": 452, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "string", "line_number": 456, "required": true, "name": "username", "description": "The username for the credential.\n"}, {"datatype": "string", "line_number": 459, "required": true, "name": "password", "description": "The password for the credential.\n"}, {"datatype": "string", "line_number": 462, "required": false, "name": "url", "description": "The URL to which the credential applies. Omitted for add-on\ncredentials.\n"}, {"datatype": "string", "line_number": 466, "required": false, "name": "formSubmitURL", "description": "The URL a form-based credential was submitted to. Omitted for add-on\ncredentials and HTTP Authentication credentials.\n"}, {"datatype": "string", "line_number": 470, "required": false, "name": "realm", "description": "For HTTP Authentication credentials, the realm for which the credential was\nrequested. For add-on credentials, a name for the credential.\n"}, {"datatype": "string", "line_number": 474, "required": false, "name": "usernameField", "description": "The value of the `name` attribute for the username input in a form.\nOmitted for add-on credentials and HTTP Authentication credentials.\n"}, {"datatype": "string", "line_number": 478, "required": false, "name": "passwordField", "description": "The value of the `name` attribute for the password input in a form.\nOmitted for add-on credentials and HTTP Authentication credentials.\n"}, {"datatype": "function", "line_number": 482, "required": false, "name": "onComplete", "description": "The callback function that is called once the function completes successfully.\n"}, {"datatype": "function", "line_number": 485, "required": false, "name": "onError", "description": "The callback function that is called if the function failed. The\ncallback is passed an `error` argument: this is an\n[nsIException](https://developer.mozilla.org/en/nsIException) object.\n"}], "description": "An object containing the properties of the credential to be stored, and\noptional `onComplete` and `onError` callback functions.\n"}], "signature": "store(options)", "type": "function", "description": "\nThis function is used to store a credential in the Password Manager.\n\nIt takes an `options` object as an argument: this contains all the properties\nfor the new credential.\n\nAs different sorts of credentials contain different properties, the\nappropriate options differ depending on the sort of credential being stored.\n\nTo store an add-on credential:\n\n    require(\"passwords\").store({\n      realm: \"User Registration\",\n      username: \"joe\",\n      password: \"SeCrEt123\",\n    });\n\nTo store an HTML form credential:\n\n    require(\"passwords\").store({\n      url: \"http://www.example.com\",\n      formSubmitURL: \"http://login.example.com\",\n      username: \"joe\",\n      usernameField: \"uname\",\n      password: \"SeCrEt123\",\n      passwordField: \"pword\"\n    });\n\nTo store an HTTP Authentication credential:\n\n    require(\"passwords\").store({\n      url: \"http://www.example.com\",\n      realm: \"ExampleCo Login\",\n      username: \"joe\",\n      password: \"SeCrEt123\",\n    });\n\nSee \"Credentials\" above for more details on how to set these properties.\n\nThe options parameter may also include `onComplete` and `onError`\ncallback functions, which are called when the function has completed\nsuccessfully and when it encounters an error, respectively. These options\nare both optional.\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 492, "name": "remove", "params": [{"line_number": 524, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "string", "line_number": 529, "required": true, "name": "username", "description": "The username for the credential.\n"}, {"datatype": "string", "line_number": 532, "required": true, "name": "password", "description": "The password for the credential.\n"}, {"datatype": "string", "line_number": 535, "required": false, "name": "url", "description": "The URL to which the credential applies. Omitted for add-on\ncredentials.\n"}, {"datatype": "string", "line_number": 539, "required": false, "name": "formSubmitURL", "description": "The URL a form-based credential was submitted to. Omitted for add-on\ncredentials and HTTP Authentication credentials.\n"}, {"datatype": "string", "line_number": 543, "required": false, "name": "realm", "description": "For HTTP Authentication credentials, the realm for which the credential was\nrequested. For add-on credentials, a name for the credential.\n"}, {"datatype": "string", "line_number": 547, "required": false, "name": "usernameField", "description": "The value of the `name` attribute for the username input in a form.\nOmitted for add-on credentials and HTTP Authentication credentials.\n"}, {"datatype": "string", "line_number": 551, "required": false, "name": "passwordField", "description": "The value of the `name` attribute for the password input in a form.\nOmitted for add-on credentials and HTTP Authentication credentials.\n"}, {"datatype": "function", "line_number": 555, "required": false, "name": "onComplete", "description": "The callback function that is called once the function has completed\nsuccessfully.\n"}, {"datatype": "function", "line_number": 559, "required": false, "name": "onError", "description": "The callback function that is called if the function failed. The\ncallback is passed an `error` argument: this is an\n[nsIException](https://developer.mozilla.org/en/nsIException) object.\n"}], "description": "\nAn object containing all the properties of the credential to be removed,\nand optional `onComplete` and `onError` callback functions.\n"}], "signature": "remove(options)", "type": "function", "description": "\nRemoves a stored credential. You supply it all the properties of the credential\nto remove, along with optional `onComplete` and `onError` callbacks.\n\nBecause you must supply all the credential's properties, it may be convenient\nto call `search` first, and use its output as the input to `remove`. For\nexample, to remove all of joe's stored credentials:\n\n    require(\"passwords\").search({\n      username: \"joe\",\n      onComplete: function onComplete(credentials) {\n        credentials.forEach(require(\"passwords\").remove);\n      })\n    });\n\nTo change an existing credential just call `store` after `remove` succeeds:\n\n    require(\"passwords\").remove({\n      realm: \"User Registration\",\n      username: \"joe\",\n      password: \"SeCrEt123\"\n      onComplete: function onComplete() {\n        require(\"passwords\").store({\n          realm: \"User Registration\",\n          username: \"joe\",\n          password: \"{{new password}}\"\n        })\n      }\n    });\n"}], ["markdown", "\n"]]