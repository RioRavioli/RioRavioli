
<div id="observer-service_module_api_docs" class="module_api_docs">
<h1>observer-service</h1>
<div class="module_description"><!-- contributed by Atul Varma [atul@mozilla.com]  -->
<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->

<p>The <code>observer-service</code> module provides access to the
application-wide observer service singleton.</p>
<p>For a list of common observer topics across a variety of Mozilla-based
applications, see the MDC page on
<a href="https://developer.mozilla.org/en/Observer_Notifications">Observer Notifications</a>.</p>
<h2>Observer Callbacks</h2>
<p>Observer callbacks are functions of the following form:</p>
<pre><code>function callback(subject, data) {
  /* Respond to the event notification here... */
}
</code></pre>
<p>In the above example, <code>subject</code> is any JavaScript object, as is
<code>data</code>.  The particulars of what the two contain are specific
to the notification topic.</p>
</div>

<div class="api_reference">
<h2 class="api_header">API Reference</h2>

<div class="api_component_group">
<h3 class="api_header">Functions</h3>

<div class="api_component">
<h4 class="api_name">add(topic, callback, thisObject)</h4>
<p>Adds an observer callback to be triggered whenever a notification matching the
topic is broadcast throughout the application.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">topic : <span class="datatype">string</span></div>
<p>The topic to observe.</p>
</div>

<div class="api_component">
<div class="api_name">callback : <span class="datatype">function,object</span></div>
<p>Either a function or an object that implements <a href="http://mxr.mozilla.org/mozilla-central/source/xpcom/ds/nsIObserver.idl"><code>nsIObserver</code></a>.
If a function, then it is called when the notification occurs.  If an object,
then its <code>observe()</code> method is called when the notification occurs.</p>
</div>

<div class="api_component">
<div class="api_name">[ thisObject : <span class="datatype">object</span> ]</div>
<p>An optional object to use as <code>this</code> when a function callback is called.</p>
</div>

</div>

</div>

<div class="api_component">
<h4 class="api_name">remove(topic, callback, thisObject)</h4>
<p>Unsubscribes a callback from being triggered whenever a notification
matching the topic is broadcast throughout the application.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">topic : <span class="datatype">string</span></div>
<p>The topic being observed by the previous call to <code>add()</code>.</p>
</div>

<div class="api_component">
<div class="api_name">callback : <span class="datatype">function,object</span></div>
<p>The callback subscribed in the previous call to <code>add()</code>, either a function or
object.</p>
</div>

<div class="api_component">
<div class="api_name">[ thisObject : <span class="datatype">object</span> ]</div>
<p>If <code>thisObject</code> was passed to the previous call to <code>add()</code>, it should be
passed to <code>remove()</code> as well.</p>
</div>

</div>

</div>

<div class="api_component">
<h4 class="api_name">notify(topic, subject)</h4>
<p>Broadcasts a notification event for a topic, passing a subject and data to all
applicable observers in the application.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">topic : <span class="datatype">string</span></div>
<p>The topic about which to broadcast a notification.</p>
</div>

<div class="api_component">
<div class="api_name">[ subject : <span class="datatype">value</span> ]</div>
<p>Optional information about the topic.  This can be any JS object or primitive.
If you have multiple values to pass to observers, wrap them in an object,
e.g., <code>{ foo: 1, bar: "some string", baz: myObject }</code>.</p>
</div>

</div>

</div>

</div>

</div>

</div>
