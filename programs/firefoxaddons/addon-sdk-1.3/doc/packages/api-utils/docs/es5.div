
<div id="es5_module_api_docs" class="module_api_docs">
<h1>es5</h1>
<div class="module_description"><p>The <code>es5</code> module provides shim layer to a versions of Firefox that do not yet
implement certain EcmaScript 5 features.</p>
<p>For more information on EcmaScript 5:</p>
<ul>
<li>The new APIs are described in the official <a href="http://www.ecmascript.org/docs/tc39-2009-043.pdf">ES5 specification</a>.</li>
<li>A good <a href="http://ejohn.org/blog/ecmascript-5-objects-and-properties/">introduction</a> to the new APIs by John Resig.</li>
<li>A Google tech talk on <a href="http://www.youtube.com/watch?v=Kq4FpMe6cRs">changes to JavaScript</a>.</li>
</ul>
<p><strong>There is no need to <code>require</code> this module</strong> since it gets preloaded into
all sandboxes automatically.</p>
<p>Usage of new ES5 API's is encouraged, but since not everything can be
provided to all the versions of firefox, there are few things to be aware of:</p>
<p><code>Object.freeze</code>, <code>Object.seal</code>, <code>Object.preventExtensions</code> does not really
prevents any mutations. One thing it guarantees though, <code>Object.isFrozen</code>,
<code>Object.isSealed</code>, <code>Object.isExtensible</code> checks will behave as defined in
specification.</p>
<p><code>Object.defineProperty</code> is only partially compliant with the specification:</p>
<ul>
<li>
<p>Non configurable properties will be created as configurable ones.</p>
</li>
<li>
<p>Instead of non-writable properties getters and setters will be defined,
but <code>Object.getOwnPropertyDescriptor</code> will still behave as expected
(will return property descriptor for non-writable property not a getter)</p>
</li>
<li>
<p>Defining properties using ES5 functions will break your
     <a href="https://developer.mozilla.org/en/New_in_JavaScript_1.7#Iterators">custom iterators</a> if you have any. Think twice before employing
     custom iterators, because in most cases you can just make properties
     non enumerable. If you really need to have a custom iterator, add it
     after running ES5 functions and don't ignore previous iterators.
     For example:</p>
<pre><code> let object = Object.create({}, {
   myField: { value: 6 }
 });
 object.__iterator__ = (function(original) {
   return function myIterator() {
     this.__iterator__ = original;
     for (let key in this) {
       // your logic here
     }
     this.__iterator__ = myIterator;
   }
 })(object.__iterator__);
</code></pre>
</li>
</ul>
</div>

</div>
