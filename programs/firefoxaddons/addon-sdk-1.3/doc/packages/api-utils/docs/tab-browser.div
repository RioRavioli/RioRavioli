
<div id="tab-browser_module_api_docs" class="module_api_docs">
<h1>tab-browser</h1>
<div class="module_description"><!-- contributed by Dietrich Ayala [dietrich@mozilla.com]  -->

<p>The <code>tab-browser</code> module is a low-level API that provides privileged
access to browser tab events and actions.</p>
<h2>Introduction</h2>
<p>The <code>tab-browser</code> module contains helpers for tracking tabbrowser elements
and tabs, as well as a few utilities for actions such as opening a new
tab, and catching all tab content loads.</p>
<p>This is a low-level API that has full privileges, and is intended to be used
by SDK internal modules. If you just need easy access to tab events for your
add-on, use the Tabs module (JEP 110).</p>
</div>

<div class="api_reference">
<h2 class="api_header">API Reference</h2>

<div class="api_component_group">
<h3 class="api_header">Functions</h3>

<div class="api_component">
<h4 class="api_name">addTab(URL, options)</h4>
<p>Adds a new tab.</p>
<p><strong>Example</strong></p>
<pre><code>var tabBrowser = require("tab-browser");
tabBrowser.addTab("http://google.com");

var tabBrowser = require("tab-browser");
tabBrowser.addTab("http://google.com", {
  inBackground: true
});

var tabBrowser = require("tab-browser");
tabBrowser.addTab("http://google.com", {
  inNewWindow: true,
  onLoad: function(tab) {
    console.log("tab is open.");
  }
});
</code></pre>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">URL : <span class="datatype">string</span></div>
<p>The URL to be opened in the new tab.</p>
</div>

<div class="api_component">
<div class="api_name">options : <span class="datatype">object</span></div>
<p>Options for how and where to open the new tab.</p>
<div class="api_component">
<div class="api_name">[ inNewWindow : <span class="datatype">boolean</span> ]</div>
<p>An optional parameter whose key can be set in <code>options</code>.
If true, the tab is opened in a new window. Default is false.</p>
</div>

<div class="api_component">
<div class="api_name">[ inBackground : <span class="datatype">boolean</span> ]</div>
<p>An optional parameter whose key can be set in <code>options</code>.
If true, the tab is opened adjacent to the active tab, but not
switched to. Default is false.</p>
</div>

<div class="api_component">
<div class="api_name">[ onLoad : <span class="datatype">function</span> ]</div>
<p>An optional parameter whose key can be set in <code>options</code>.
A callback function that is called once the tab has loaded.
The XUL element for the tab is passed as a parameter to
this function.</p>
</div>

</div>

</div>

<div class="returns">Returns: <span class="datatype">element</span><p>The XUL tab element of the newly created tab.</p>
</div>

</div>

<div class="api_component">
<h4 class="api_name">Tracker(delegate)</h4>
<p>Register a delegate object to be notified when tabbrowsers are created
and destroyed.</p>
<p>The onTrack method will be called once per pre-existing tabbrowser, upon
tracker registration.</p>
<p><strong>Example</strong></p>
<pre><code>var tabBrowser = require("tab-browser");
let tracker = {
  onTrack: function(tabbrowser) {
    console.log("A new tabbrowser is being tracked.");
  },
  onUntrack: function(tabbrowser) {
    console.log("A tabbrowser is no longer being tracked.");
  }
};
tabBrowser.Tracker(tracker);
</code></pre>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">delegate : <span class="datatype">object</span></div>
<p>Delegate object to be notified each time a tabbrowser is created or destroyed.
The object should contain the following methods:</p>
<div class="api_component">
<div class="api_name">[ onTrack : <span class="datatype">function</span> ]</div>
<p>Method of delegate that is called when a new tabbrowser starts to be tracked.
The tabbrowser element is passed as a parameter to this method.</p>
</div>

<div class="api_component">
<div class="api_name">[ onUntrack : <span class="datatype">function</span> ]</div>
<p>Method of delegate that is called when a tabbrowser stops being tracked.
The tabbrowser element is passed as a parameter to this method.</p>
</div>

</div>

</div>

</div>

<div class="api_component">
<h4 class="api_name">TabTracker(delegate)</h4>
<p>Register a delegate object to be notified when tabs are opened and closed.</p>
<p>The onTrack method will be called once per pre-existing tab, upon
tracker registration.</p>
<p><strong>Example</strong></p>
<pre><code>var tabBrowser = require("tab-browser");
let tracker = {
  onTrack: function(tab) {
    console.log("A new tab is being tracked.");
  },
  onUntrack: function(tab) {
    console.log("A tab is no longer being tracked.");
  }
};
tabBrowser.TabTracker(tracker);
</code></pre>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">delegate : <span class="datatype">object</span></div>
<p>Delegate object to be notified each time a tab is opened or closed.
The object should contain the following methods:</p>
<div class="api_component">
<div class="api_name">[ onTrack : <span class="datatype">function</span> ]</div>
<p>Method of delegate that is called when a new tab starts to be tracked.
The tab element is passed as a parameter to this method.</p>
</div>

<div class="api_component">
<div class="api_name">[ onUntrack : <span class="datatype">function</span> ]</div>
<p>Method of delegate that is called when a tab stops being tracked.
The tab element is passed as a parameter to this method.</p>
</div>

</div>

</div>

</div>

</div>

<div class="api_component_group">
<h3 class="api_header">Properties</h3>

<div class="api_component">
<h4 class="api_name">activeTab : <span class="datatype">element</span></h4>
<p>The XUL tab element of the currently active tab.</p>
</div>

</div>

</div>

</div>
