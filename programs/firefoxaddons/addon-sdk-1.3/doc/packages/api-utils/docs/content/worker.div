
<div id="worker_module_api_docs" class="module_api_docs">
<h1>worker</h1>
<div class="module_description"><!-- contributed by Irakli Gozalishvili [gozala@mozilla.com] -->

<p>This module exports the <code>Worker</code> trait, which may be used to construct objects
implementing the <a href="http://www.w3.org/TR/workers/#worker">Worker</a> interface defined by the W3C, with minor
differences.</p>
<p>Content workers are message-passing facilities for communication between
<a href="dev-guide/addon-development/web-content.html">content scripts</a> and the main
add-on code.</p>
<p>It is important to note that unlike "web workers," these workers run in the
same process as web content and browser chrome, so code within workers can
block the UI.</p>
</div>

<div class="api_reference">
<h2 class="api_header">API Reference</h2>

<div class="api_component_group">
<h3 class="api_header">Classes</h3>

<div class="api_component">
<h4 class="api_name">Worker</h4>
<p>Worker is composed from the <a href="packages/api-utils/docs/events.html">EventEmitter</a> trait, therefore instances
of Worker and their descendants expose all the public properties
exposed by <a href="packages/api-utils/docs/events.html">EventEmitter</a> along with additional public properties that
are listed below.</p>
<p><strong>Example</strong></p>
<pre><code>var workers = require("content/worker");
let worker =  workers.Worker({
  window: require("window-utils").activeWindow,
  contentScript:
    "self.port.on('hello', function(name) { " +
    "  self.port.emit('response', window.location); " +
    "});"
});
worker.port.emit("hello", { name: "worker"});
worker.port.on("response", function (location) {
  console.log(location);
});
</code></pre>
<div class="api_component_group">
<h5 class="api_header">Constructors</h5>

<div class="api_component">
<h6 class="api_name">Worker(options)</h6>
<p>Creates a content worker.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">options : <span class="datatype">object</span></div>
<p>Options for the constructor, with the following keys:</p>
<div class="api_component">
<div class="api_name">window : <span class="datatype">object</span></div>
<p>The content window to create JavaScript sandbox for communication with.</p>
</div>

<div class="api_component">
<div class="api_name">[ contentScriptFile : <span class="datatype">string,array</span> ]</div>
<p>The local file URLs of content scripts to load.  Content scripts specified
by this option are loaded <em>before</em> those specified by the <code>contentScript</code>
option. Optional.</p>
</div>

<div class="api_component">
<div class="api_name">[ contentScript : <span class="datatype">string,array</span> ]</div>
<p>The texts of content scripts to load.  Content scripts specified by this
option are loaded <em>after</em> those specified by the <code>contentScriptFile</code> option.
Optional.</p>
</div>

<div class="api_component">
<div class="api_name">[ onMessage : <span class="datatype">function</span> ]</div>
<p>Functions that will registered as a listener to a 'message' events.</p>
</div>

<div class="api_component">
<div class="api_name">[ onError : <span class="datatype">function</span> ]</div>
<p>Functions that will registered as a listener to an 'error' events.</p>
</div>

</div>

</div>

</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Methods</h5>

<div class="api_component">
<h6 class="api_name">postMessage(data)</h6>
<p>Asynchronously emits <code>"message"</code> events in the enclosed worker, where content
script was loaded.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">data : <span class="datatype">number,string,JSON</span></div>
<p>The data to send. Must be stringifiable to JSON.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">destroy()</h6>
<p>Destroy the worker by removing the content script from the page and removing
all registered listeners. A <code>detach</code> event is fired just before removal.</p>
</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Properties</h5>

<div class="api_component">
<h6 class="api_name">port : <span class="datatype">EventEmitter</span></h6>
<p><a href="packages/api-utils/docs/events.html">EventEmitter</a> object that allows you to:</p>
<ul>
<li>send customized messages to the worker using the <code>port.emit</code> function</li>
<li>receive events from the worker using the <code>port.on</code> function</li>
</ul>
</div>

<div class="api_component">
<h6 class="api_name">url : <span class="datatype">string</span></h6>
<p>The URL of the content.</p>
</div>

<div class="api_component">
<h6 class="api_name">tab : <span class="datatype">object</span></h6>
<p>If this worker is attached to a content document, returns the related 
<a href="packages/addon-kit/docs/tabs.html">tab</a>.</p>
</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Events</h5>

<div class="api_component">
<h6 class="api_name">message</h6>
<p>This event allows the content worker to receive messages from its associated
content scripts. Calling the <code>self.postMessage()</code> function from a content
script will asynchronously emit the <code>message</code> event on the corresponding
worker.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name"><span class="datatype">value</span></div>
<p>The event listener is passed the message, which must be a
<a href = "dev-guide/addon-development/content-scripts/using-port.html#json_serializable">JSON-serializable value</a>.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">error</h6>
<p>This event allows the content worker to react to an uncaught runtime script
error that occurs in one of the content scripts.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name"><span class="datatype">Error</span></div>
<p>The event listener is passed a single argument which is an
<a href="https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error">Error</a>
object.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">detach</h6>
<p>This event is emitted when the document associated with this worker is unloaded
or the worker's <code>destroy()</code> method is called.</p>
</div>

</div>

</div>

</div>

</div>

</div>
