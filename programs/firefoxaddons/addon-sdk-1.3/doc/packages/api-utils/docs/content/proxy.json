[["version", 4], ["markdown", "<!-- contributed by Alexandre Poirot [apoirot@mozilla.com]  -->\n\nContent scripts need access to the DOM of the pages they are attached to.\nHowever, those pages should be considered to be hostile environments: we\nhave no control over any other scripts loaded by the web page that may be\nexecuting in the same context. If the content scripts and scripts loaded\nby the web page were to access the same DOM objects, there are two possible\nsecurity problems:\n\nFirst, a malicious page might redefine functions and properties of DOM\nobjects so they don't do what the add-on expects. For example, if a\ncontent script calls `document.getElementById()` to retrieve a DOM\nelement, then a malicious page could redefine its behavior to return\nsomething unexpected:\n\n<pre><code>\n// If the web document contains the following script:\ndocument.getElementById = function (str) {\n  // Overload indexOf method of all string instances\n  str.__proto__.indexOf = function () {return -1;};\n  // Overload toString method of all object instances\n  str.__proto__.__proto__.toString = function () {return \"evil\";};\n};\n// After the following line, the content script will be compromised:\nvar node = document.getElementById(\"element\");\n// Then your content script is totally out of control.\n</code></pre>\n\nSecond, changes the content script made to the DOM objects would be visible\nto the page, leaking information to it.\n\nThe general approach to fixing these problems is to wrap DOM objects in\n[`XrayWrappers`](https://developer.mozilla.org/en/XPCNativeWrapper)\n(also know as `XPCNativeWrapper`). This guarantees that:\n\n* when the content script accesses DOM properties and functions it gets the\noriginal native version of them, ignoring any modifications made by the web\npage\n* changes to the DOM made by the content script are not visible to scripts\nrunning in the page.\n\nHowever, `XrayWrapper` has some limitations and bugs, which break many\npopular web frameworks. In particular, you can't:\n\n* define attributes like `onclick`: you have to use `addEventListener` syntax\n* overload native methods on DOM objects, like this:\n<pre><code>\nproxy.addEventListener = function () {};\n</code></pre>\n* access named elements using properties like `window[framename]` or\n`document[formname]`\n* use some other features that have bugs in the `XrayWrapper`\nimplementation, like `mozMatchesSelector`\n\nThe `proxy` module uses `XrayWrapper` in combination with the\nexperimental\n[Proxy API](https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Proxy)\nto address both the security vulnerabilities of content scripts and the\nlimitations of `XrayWrapper`.\n\n<pre>\n  /--------------------\\                           /------------------------\\\n  |    Web document    |                           | Content script sandbox |\n  | http://mozilla.org |                           |     data/worker.js     |\n  |                    | require('content-proxy'). |                        |\n  | window >-----------|-     create(window)      -|-> window               |\n  \\--------------------/                           \\------------------------/\n</pre>\n\n\n## The Big Picture ##\n\nThe implementation defines two different kinds of proxy:\n  \n  1. Content script proxies that wrap DOM objects that are exposed to\n     content scripts as described above.\n  2. XrayWrapper proxies that wrap objects from content scripts before handing\n     them over to XrayWrapper functions. These proxies are internal\n     and are not exposed to content scripts or document content.\n\n<pre>\n  /--------------------\\                           /------------------------\\\n  |    Web document    |                           | Content script sandbox |\n  | http://mozilla.org |                           |     data/worker.js     |\n  |                    |                   /-------|-> myObject = {}        |\n  |                    |  /----------------v--\\    |                        |\n  |                    |  | XrayWrapper Proxy |    | - document             |\n  |                    |  \\---------v---------/    \\----^-------------------/\n  |                    |            v                   |\n  |                    |  /-------------\\  /----------\\ |\n  | - document >-------|->| XrayWrapper |<-| CS proxy |-/\n  \\--------------------/  \\-------------/  \\----------/\n</pre>\n\nEverything begins with a single call to the `create` function exported by the\ncontent-proxy module:\n\n    // Retrieve the unwrapped reference to the current web page window object\n    var win = gBrowser.contentDocument.defaultView.wrappedJSObject;\n    // Or in addon sdk style\n    var win = require(\"tab-browser\").activeTab.linkedBrowser.contentWindow.wrappedJSObject;\n    // Now create a content script proxy for the window object\n    var windowProxy = require(\"api-utils/content/content-proxy\").create(win);\n    \n    // We finally use this window object as sandbox prototype,\n    // so that all web page globals are accessible in CS too:\n    var contentScriptSandbox = new Cu.Sandbox(win, {\n      sandboxPrototype: windowProxy\n    });\n\nThen all other proxies are created from this one. Attempts to access DOM\nattributes of this proxy are trapped, and the proxy constructs and returns\ncontent script proxies for those attributes:\n\n    // For example, if you simply do this:\n    var document = window.document;\n    // accessing the `document` attribute will be trapped by the `window` content script\n    // proxy, and that proxy will that create another content script proxy for `document`\n\nSo the main responsibility of the content script proxy implementation is to\nensure that we always return content script proxies to the content script.\n\n## Internal Implementation ##\n\nEach content script proxy keeps a reference to the `XrayWrapper` that enables\nit to be sure of calling native DOM methods.\n\nThere are two internal functions to convert between content script proxy\nvalues and `XrayWrapper` values.\n\n1. __`wrap`__ takes an XrayWrapper value and wraps it in a content script\nproxy if needed.\n  This method is called when:\n    * a content script accesses an attribute of a content script proxy.\n    * XrayWrapper code calls a callback function defined in the content\nscript, so that arguments passed into the function by the XrayWrapper are\nconverted into content script proxies. For example, if a content script\ncalls `addEventListener`, then the listener function will expect any arguments\nto be content script proxies.\n<br/><br/>\n2. __`unwrap`__ takes an object coming from the content script context and:\n    * if the object is a content script proxy, unwraps it back to an\nXrayWrapper reference\n    * if the object is not a content script proxy, wraps it in an XrayWrapper\nproxy.\n<br/><br/>\nThis means we can call a XrayWrapper method either with:\n\n        * a raw XrayWrapper object.\n    \n                // The following line doesn't work if child is a content script proxy,\n                // it has to be a raw XrayWrapper reference\n                xrayWrapper.appendChild(child)\n      \n        * an XrayWrapper proxy when you pass a custom object from the content\nscript context.\n\n                var myListener = {\n                  handleEvent: function(event) {\n                    // `event` should be a content script proxy\n                  }\n                };\n                // `myListener` has to be another kind of Proxy: XrayWrapper proxy,\n                // that aims to catch the call to `handleEvent` in order to wrap its\n                // arguments in a content script proxy.\n                xrayWrapper.addEventListener(\"click\", myListener, false);\n\n\n## Stack Traces ##\n\nThe following code:\n\n    function listener(event) {\n      \n    }\n    csProxy.addEventListener(\"message\", listener, false);\n    \ngenerates the following internal calls:\n\n    -> CS Proxy:: get(\"addEventListener\")\n      -> wrap(xrayWrapper.addEventListener)\n        -> NativeFunctionWrapper(xrayWrapper.addEventListener)\n          // NativeFunctionWrapper generates:\n          function (\"message\", listener, false) {\n            return xraywrapper.addEventListener(\"message\", unwrap(listener), false);\n          }\n          -> unwrap(listener)\n            -> ContentScriptFunctionWrapper(listener)\n            // ContentScriptFunctionWrapper generates:\n            function (event) {\n              return listener(wrap(event));\n            }\n\n<br>\n\n    // First, create an object from content script context\n    var myListener = {\n      handleEvent: function (event) {\n        \n      }\n    };\n    // Then, pass this object as an argument to a CS proxy method\n    window.addEventListener(\"message\", myListener, false);\n    \n    // Generates the following internal calls:\n    -> CS Proxy:: get(\"addEventListener\")\n      -> wrap(xrayWrapper.addEventListener)\n        -> NativeFunctionWrapper(xrayWrapper.addEventListener)\n           // Generate the following function:\n           function (\"message\", myListener, false) {\n              return xraywrapper.addEventListener(\"message\", unwrap(myListener), false);\n           }\n           -> unwrap(myListener)\n             -> ContentScriptObjectWrapper(myListener)\n                // Generate an XrayWrapper proxy and give it to xrayWrapper method.\n                // Then when native code fires an event, the proxy will catch it:\n                -> XrayWrapper Proxy:: get(\"handleEvent\")\n                  -> unwrap(myListener.handleEvent)\n                    -> ContentScriptFunctionWrapper(myListener.handleEvent)\n                       // Generate following function:\n                       function (event) {\n                         return myListener.handleEvent(wrap(event));\n                       }\n\n\n"], ["api-json", {"line_number": 226, "name": "create", "returns": {"datatype": "Object", "line_number": 235, "description": "A content script proxy that wraps `object`."}, "params": [{"datatype": "Object", "line_number": 232, "required": true, "name": "object", "description": "The object to proxify.\n"}], "signature": "create(object)", "type": "function", "description": "Create a content script proxy. <br/>\nDoesn't create a proxy if we are not able to create a XrayWrapper for\nthis object: for example, if the object comes from system principal.\n"}], ["markdown", "\n"]]