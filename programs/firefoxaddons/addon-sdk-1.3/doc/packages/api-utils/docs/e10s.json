[["version", 4], ["markdown", "<span class=\"aside\">\nFor a high-level overview of out-of-process add-ons, see the\n[Out-of-Process Add-ons][] internals guide.\n</span>\n\nThe `e10s` module allows add-ons to execute in a separate process from Firefox\nitself.\n\n## Adapters ##\n\nAs explained in the [Out-of-Process Add-ons][] internals guide, an *e10s\nadapter* is the primary mechanism through which chrome functionality is exposed\nto add-on processes. It is a single piece of code evaluated *twice*&mdash;once\nin each process&mdash;and typically has the following form:\n\n    if (this.chrome) {\n      /* We're being evaluated in the add-on process. Export the\n       * module's API, proxying all calls to the chrome process\n       * as necessary. */\n    } else exports.register = function register(addon) {\n      /* We're being evaluated in the chrome process.\n       * Set up chrome process listeners to communicate with\n       * the given add-on process. */\n    };\n\nIn the above code, the `chrome` global is only visible to this code when it is\nexecuted in the add-on process. It is an instance of `ChromeProcess`.\n\nThe `register()` function, on the other hand, is only defined and called in the\nchrome process, and the `addon` argument passed to it is an instance of\n`AddonProcess`.\n\n`ChromeProcess` and `AddonProcess` instances come in pairs, and represent\nopposite sides of an inter-process communication mechanism.\n\n  [Out-of-Process Add-ons]: dev-guide/module-development/e10s.html\n\n## Events ##\n\nChrome and add-on processes can asynchronously send arbitrary events to each\nother. The <code>[EventEmitter][]</code> interface has been overloaded to make\nhandling these events simple and intuitive. For instance, here's a trivial e10s\nadapter that uses events:\n\n    if (this.chrome) {\n      exports.sendFoo = function(x) {\n        chrome.send('foo', x);\n      };\n    } else exports.register = function register(addon) {\n      addon.on('foo', function(type, x) {\n        console.log(\"foo called with argument\", x);\n      });\n    };\n\n  [EventEmitter]: packages/api-utils/docs/events.html\n\n## Remote Function Calls ##\n\nThe add-on process can synchronously call a function on the chrome process, but\nnot vice versa. Here's a trivial example of an e10s adapter using this\nmechanism:\n\n    if (this.chrome) {\n      exports.bar = function(x) {\n        return chrome.call('bar', x);\n      };\n    } else exports.register = function register(addon) {\n      addon.registerCall('bar', function(name, x) {\n        return x * 3;\n      });\n    };\n\n## Arguments ##\n\nWhen sending events or calling functions in another process, the chrome and\nadd-on processes are allowed to send JSON-serializable arguments. Additionally,\nthey can send a special type of object called a *handle*. See the\n[MDN Handle Documentation][] for more information on these.\n\nHere's a simple example of a handle being used to remember a callback function\non the add-on side:\n\n    if (this.chrome) {\n      exports.baz = function(callback) {\n        var handle = chrome.createHandle();\n        handle.callback = callback;\n        chrome.send('baz', handle);\n      };\n      chrome.on('bazCallback', function(name, handle) {\n        try { handle.callback(); } except (e) { console.exception(e); }\n        handle.invalidate();\n      });\n    } else exports.register = function register(addon) {\n      addon.on('baz', function(name, handle) {\n        require('timer').setTimeout(function() {\n          addon.send('bazCallback', handle);\n        }, 1000);\n      });\n    };\n\n  [MDN Handle Documentation]: https://developer.mozilla.org/en/Jetpack_Processes#Handles\n\n"], ["api-json", {"methods": [{"line_number": 109, "name": "on", "params": [{"datatype": "string", "line_number": 112, "required": true, "name": "type", "description": "The type of event to listen for."}, {"datatype": "function", "line_number": 114, "required": true, "name": "listener", "description": "The listener function that handles the event. Its first argument is always\n`type`, and additional arguments vary depending on the event's originating\n`addon.send()` call in the chrome process."}], "signature": "on(type, listener)", "type": "method", "description": "Registers an event listener with the chrome process."}, {"line_number": 120, "name": "removeListener", "params": [{"datatype": "string", "line_number": 123, "required": true, "name": "type", "description": "The type of event for which `listener` was registered."}, {"datatype": "function", "line_number": 125, "required": true, "name": "listener", "description": "The listener function that was registered."}], "signature": "removeListener(type, listener)", "type": "method", "description": "Removes an event listener from the chrome process."}, {"line_number": 129, "name": "send", "params": [{"datatype": "string", "line_number": 133, "required": true, "name": "type", "description": "The type of event to send."}], "signature": "send(type)", "type": "method", "description": "Sends an event asynchronously to the chrome process. Any additional arguments\nafter `type` are passed as arguments to event listeners in the chrome process."}, {"line_number": 137, "name": "call", "params": [{"datatype": "string", "line_number": 142, "required": true, "name": "name", "description": "The name of the function to call."}], "signature": "call(name)", "type": "method", "description": "Synchronously calls a remote function in the chrome process and returns its\nresult. Any additional arguments after `name` are passed as arguments to the\nfunction in the chrome process."}, {"line_number": 146, "signature": "createHandle()", "type": "method", "name": "createHandle", "description": "Creates a [handle][] object, which can be passed to the chrome process via\n`send()` or `call()`.\n\n[handle]: https://developer.mozilla.org/en/Jetpack_Processes#Handles"}], "line_number": 103, "type": "class", "name": "ChromeProcess", "description": "In an add-on process, this represents the parent chrome process. This class is\na singleton and has no constructor. It is automatically injected into the\nglobal scope of all `-e10s-adapter` modules as the `chrome` object.\n\n\n\n\n\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 156, "methods": [{"line_number": 174, "signature": "destroy()", "type": "method", "name": "destroy", "description": "Terminates the add-on process."}, {"line_number": 179, "name": "on", "params": [{"datatype": "string", "line_number": 182, "required": true, "name": "type", "description": "The type of event to listen for."}, {"datatype": "function", "line_number": 184, "required": true, "name": "listener", "description": "The listener function that handles the event. Its first argument is always\n`type`, and additional arguments vary depending on the event's originating\n`chrome.send()` call in the add-on process."}], "signature": "on(type, listener)", "type": "method", "description": "Registers an event listener with the add-on process."}, {"line_number": 190, "name": "registerCall", "params": [{"datatype": "string", "line_number": 193, "required": true, "name": "name", "description": "The name of the function."}, {"datatype": "function", "line_number": 195, "required": true, "name": "handler", "description": "The call handler. Its first argument is always `name`, and additional\narguments vary depending on the call's originating `chrome.call()` invocation\nin the add-on process. The handler's return value is also passed back to the\noriginal caller in the add-on process."}], "signature": "registerCall(name, handler)", "type": "method", "description": "Registers a synchronous call handler with the add-on process."}, {"line_number": 202, "name": "send", "params": [{"datatype": "string", "line_number": 206, "required": true, "name": "type", "description": "The type of event to send."}], "signature": "send(type)", "type": "method", "description": "Sends an event asynchronously to the add-on process. Any additional arguments\nafter `type` are passed as arguments to event listeners in the add-on process."}, {"line_number": 210, "signature": "createHandle()", "type": "method", "name": "createHandle", "description": "Creates a [handle][] object, which can be passed to the add-on process via\n`send()`.\n\n[handle]: https://developer.mozilla.org/en/Jetpack_Processes#Handles"}], "description": "In the chrome process, this represents a child add-on process.\n\n\n\n\n\n\n", "constructors": [{"line_number": 160, "name": "AddonProcess", "params": [{"line_number": 164, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "object", "line_number": 167, "required": false, "name": "console", "description": "An object whose interface corresponds to that of the `console` global. All\nlogging messages to the `console` object of the addon will be redirected to\nthis object. If this object isn't provided, then the global `console` object\nof the chrome process will be used."}], "description": "An optional object with the following keys, all of which are optional:\n"}], "signature": "AddonProcess(options)", "type": "constructor", "description": "Creates a new add-on process.\n"}], "type": "class", "name": "AddonProcess"}], ["markdown", "\n"]]