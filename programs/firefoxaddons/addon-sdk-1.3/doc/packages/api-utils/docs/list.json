[["version", 4], ["markdown", "<!-- contributed by Irakli Gozalishvili [gozala@mozilla.com]  -->\n\nThe `\"list\"` module provides base building blocks for composing lists.\n\n"], ["api-json", {"line_number": 5, "name": "Iterable", "constructors": [{"line_number": 15, "signature": "Iterable()", "type": "constructor", "name": "Iterable", "description": "Constructs an `Iterable` object."}], "type": "class", "properties": [{"datatype": "Object", "line_number": 20, "type": "property", "name": "_keyValueMap", "description": "Hash map of key-values to iterate over. _Required_ property: that is, the\nproperty must be supplied by objects that compose this trait.\n_Note: That this property can be a getter if you need dynamic behavior._"}], "description": "Base trait that can be used to compose traits with non-standard\nenumeration behaviors.\n\nThis trait is supposed to be used as part of a composition, since it only\nprovides custom enumeration behavior to a composed object.\nIt defines one required `_keyValueMap` property, that is used as a hash of\n\"key-values\" to iterate on during enumeration.\n\n\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 29, "name": "List", "constructors": [{"line_number": 56, "name": "List", "params": [{"datatype": "Object|String|Number", "line_number": 60, "required": false, "name": "element1", "description": ""}, {"datatype": "Object|String|Number", "line_number": 61, "required": false, "name": "element2", "description": ""}, {"datatype": "Object|String|Number", "line_number": 62, "required": false, "name": "...", "description": ""}], "signature": "List(element1, element2, ...)", "type": "constructor", "description": "Constructor can takes any number of elements and creates an instance of\n`List` populated with the specified elements."}], "methods": [{"line_number": 70, "name": "_has", "params": [{"datatype": "Object|Number|String", "line_number": 72, "required": true, "name": "element", "description": "Returns `true` if this list contains the specified `element`."}], "signature": "_has(element)", "type": "method", "description": ""}, {"line_number": 75, "name": "_add", "params": [{"datatype": "Object|Number|String", "line_number": 77, "required": true, "name": "element", "description": "Appends the specified `element` to the end of this list, if it doesn't\ncontain it.\n\n_Ignores the call if `element` is already contained._"}], "signature": "_add(element)", "type": "method", "description": ""}, {"line_number": 83, "name": "_remove", "params": [{"datatype": "Object|Number|String", "line_number": 85, "required": true, "name": "element", "description": "Removes specified `element` from this list, if it contains it.\n\n_Ignores the call if `element` is not contained._"}], "signature": "_remove(element)", "type": "method", "description": ""}, {"line_number": 90, "signature": "_clear()", "type": "method", "name": "_clear", "description": "Removes all of the elements from this list."}], "type": "class", "properties": [{"datatype": "Number", "line_number": 65, "type": "property", "name": "length", "description": "Number of elements in this list."}], "description": "An ordered collection (also known as a sequence) disallowing duplicate\nelements. List is composed out of `Iterable`, therefore it provides custom\nenumeration behavior that is similar to array (enumerates only on the\nelements of the list).\n\nList is a base trait and is meant to be part of a\ncomposition, since all of its API is private except for the `length` property.\n\n**Examples:**\n\n    var MyList = List.compose({\n      add: function add(item1, item2, /*item3...*/) {\n        Array.slice(arguments).forEach(this._add.bind(this));\n      },\n      remove: function remove(item1, item2, /*item3...*/) {\n        Array.slice(arguments).forEach(this._remove.bind(this));\n      }\n    });\n    MyList('foo', 'bar', 'baz').length == 3;        // true\n    new MyList('new', 'keyword').length == 2;       // true\n    MyList.apply(null, [1, 2, 3]).length == 3;      // true\n    let list = MyList();\n    list.length == 0;                               // true\n    list.add(1, 2, 3) == 3;                         // true\n\n\n"}], ["markdown", "\n"]]