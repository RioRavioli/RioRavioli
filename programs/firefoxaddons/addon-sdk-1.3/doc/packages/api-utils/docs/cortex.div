
<div id="cortex_module_api_docs" class="module_api_docs">
<h1>cortex</h1>
<div class="module_description"><h2>Property Encapsulation</h2>
<p>In JavaScript it is not possible to create properties that have limited or
controlled accessibility. It is possible to create non-enumerable and
non-writable properties, but still they can be discovered and accessed.
Usually so called "closure capturing" is used to encapsulate such properties
in lexical scope:</p>
<pre><code>function Foo() {
  var _secret = 'secret';
  this.hello = function hello() {
    return 'Hello ' + _secret;
  }
}
</code></pre>
<p>This provides desired result, but has side effect of degrading code readability,
especially with object-oriented programs. Another disadvantage with this pattern
is that there is no immediate solution for inheriting access to the privates
(illustrated by the following example):</p>
<pre><code>function Derived() {
  this.hello = function hello() {
    return _secret;
  }
  this.bye = function bye() {
    return _secret;
  }
}
Derived.prototype = Object.create(Foo.prototype);
</code></pre>
<h2>Facade Objects</h2>
<p>Alternatively constructor can returned facade objects - proxies to the
instance's public properties:</p>
<pre><code>function Foo() {
  var foo = Object.create(Foo.prototype);
  return {
    bar: foo.hello.bind(foo);
  }
}
Foo.prototype._secret = 'secret';
Foo.prototype.hello = function hello() {
  return 'Hello ' + this._secret;
}

function Derived() {
  var derived = Object.create(Derived.prototype);
  return {
    bar: derived.hello.bind(derived);
    bye: derived.bye.bind(derived);
  }
}
Derived.prototype = Object.create(Foo.prototype);
Derived.prototype.bye = function bye() {
  return 'Bye ' + this._secret;
};
</code></pre>
<p>While this solution solves given issue and provides proper encapsulation for
both own and inherited private properties, it does not addresses following:</p>
<ul>
<li>Privates defined on the <code>prototype</code> can be compromised, since they are
   accessible through the constructor (<code>Foo.prototype._secret</code>).</li>
<li>Behavior of <code>instanceof</code> is broken, since <code>new Derived() instanceof Derived</code>
   is going to evaluate to <code>false</code>.</li>
</ul>
<h2>Tamper Proofing with Property Descriptor Maps</h2>
<p>In ES5 new property descriptor maps were introduced, which can be used as a
building blocks for defining reusable peace of functionality. To some degree
they are similar to a <code>prototype</code> objects, and can be used so to define pieces
of functionality that is considered to be private (In contrast to <code>prototype</code>
they are not exposed by default).</p>
<pre><code>function Foo() {
  var foo = Object.create(Foo.prototype, FooDescriptor);
  var facade = Object.create(Foo.prototype);
  facade.hello = foo.hello.bind(foo);
  return facade;
}
Foo.prototype.hello = function hello() {
  return 'Hello ' + this._secret;
}
var FooDescriptor = {
  _secret: { value: 'secret' };
}

function Derived() {
  var derived = Object.create(Derived.prototype, DerivedDescriptor);
  var facade = Object.create(Derived.prototype);
  facade.hello = derived.hello.bind(derived);
  facade.bye = derived.bye.bind(derived);
  return facade;
}
Derived.prototype = Object.create(Foo.prototype);
Derived.prototype.bye = function bye() {
  return 'Bye ' + this._secret;
};
DerivedDescriptor = {};

Object.keys(FooDescriptor).forEach(function(key) {
  DerivedDescriptor[key] = FooDescriptor[key];
});
</code></pre>
<h2>Cortex Objects</h2>
<p>Last approach solves all of the concerns, but adds complexity, verbosity
and decreases code readability. Combination of <code>Cortex</code>'s and <code>Trait</code>'s
will gracefully solve all these issues and keep code clean:</p>
<pre><code>var Cortex = require('cortex').Cortex;
var Trait = require('light-traits').Trait;

var FooTrait = Trait({
  _secret: 'secret',
  hello: function hello() {
    return 'Hello ' + this._secret;
  }
});
function Foo() {
  return Cortex(FooTrait.create(Foo.prototype));
}

var DerivedTrait = Trait.compose(FooTrait, Trait({
  bye: function bye() {
    return 'Bye ' + this._secret;
  }
}));
function Derived() {
  var derived = DerivedTrait.create(Derived.prototype);
  return Cortex(derived);
}
</code></pre>
<p>Function <code>Cortex</code> takes any object and returns a proxy for its public
properties. By default properties are considered to be public if they don't
start with <code>"_"</code>, but default behavior can be overridden if needed, by passing
array of public property names as a second argument.</p>
<h2>Gotchas</h2>
<p><code>Cortex</code> is just a utility function to create a proxy object, and it does not
solve the <code>prototype</code>-related issues highlighted earlier, but since traits make
use of property descriptor maps instead of <code>prototype</code>s, there aren't any
issues with using <code>Cortex</code> to wrap objects created from traits.</p>
<p>If you want to use <code>Cortex</code> with an object that uses a <code>prototype</code> chain,
however, you should either make sure you don't have any private properties
in the prototype chain or pass the optional third <code>prototype</code> argument.</p>
<p>In the latter case, the returned proxy will inherit from the given prototype,
and the <code>prototype</code> chain of the wrapped object will be inaccessible.
However, note that the behavior of the <code>instanceof</code> operator will vary,
as <code>proxy instanceof Constructor</code> will return false even if the Constructor
function's prototype is in the wrapped object's prototype chain.</p>
</div>

</div>
