
<div id="text-streams_module_api_docs" class="module_api_docs">
<h1>text-streams</h1>
<div class="module_description"><!-- contributed by Drew Willcoxon [adw@mozilla.com]  -->
<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->

<p>The <code>text-streams</code> module provides streams for reading and writing text using
particular character encodings.</p>
</div>

<div class="api_reference">
<h2 class="api_header">API Reference</h2>

<div class="api_component_group">
<h3 class="api_header">Classes</h3>

<div class="api_component">
<h4 class="api_name">TextReader</h4>

<div class="api_component_group">
<h5 class="api_header">Constructors</h5>

<div class="api_component">
<h6 class="api_name">TextReader(inputStream, charset)</h6>
<p>Creates a buffered input stream that reads text from a backing stream using a
given text encoding.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">inputStream : <span class="datatype">stream</span></div>
<p>The backing stream, an <a href="http://mxr.mozilla.org/mozilla-central/source/xpcom/io/nsIInputStream.idl"><code>nsIInputStream</code></a>.
It must already be opened.</p>
</div>

<div class="api_component">
<div class="api_name">[ charset : <span class="datatype">string</span> ]</div>
<p><code>inputStream</code> is expected to be in the character encoding named by this value.
If not specified, "UTF-8" is assumed.  See <a href="http://mxr.mozilla.org/mozilla-central/source/intl/uconv/idl/nsICharsetConverterManager.idl"><code>nsICharsetConverterManager.idl</code></a>
for documentation on how to determine other valid values for this.</p>
</div>

</div>

</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Methods</h5>

<div class="api_component">
<h6 class="api_name">close()</h6>
<p>Closes both the stream and its backing stream.</p>
</div>

<div class="api_component">
<h6 class="api_name">read(numChars)</h6>
<p>Reads and returns a string from the stream.  If the stream is closed, an
exception is thrown.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">[ numChars : <span class="datatype">number</span> ]</div>
<p>The number of characters to read.  If not given, the remainder of the stream
is read.</p>
</div>

</div>

<div class="returns">Returns: <span class="datatype">string</span><p>The string read.  If the stream is at the end, the empty string is returned.</p>
</div>

</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Properties</h5>

<div class="api_component">
<h6 class="api_name">closed : <span class="datatype">boolean</span></h6>
<p>True if the stream is closed.</p>
</div>

</div>

</div>

<div class="api_component">
<h4 class="api_name">TextWriter</h4>

<div class="api_component_group">
<h5 class="api_header">Constructors</h5>

<div class="api_component">
<h6 class="api_name">TextWriter(outputStream, charset)</h6>
<p>Creates a buffered output stream that writes text to a backing stream using a
given text encoding.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">outputStream : <span class="datatype">stream</span></div>
<p>The backing stream, an <a href="http://mxr.mozilla.org/mozilla-central/source/xpcom/io/nsIOutputStream.idl"><code>nsIOutputStream</code></a>.
It must already be opened.</p>
</div>

<div class="api_component">
<div class="api_name">[ charset : <span class="datatype">string</span> ]</div>
<p>Text will be written to <code>outputStream</code> using the character encoding named by
this value.  If not specified, "UTF-8" is assumed.  See <a href="http://mxr.mozilla.org/mozilla-central/source/intl/uconv/idl/nsICharsetConverterManager.idl"><code>nsICharsetConverterManager.idl</code></a>
for documentation on how to determine other valid values for this.</p>
</div>

</div>

</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Methods</h5>

<div class="api_component">
<h6 class="api_name">close()</h6>
<p>Flushes the backing stream's buffer and closes both the stream and the backing
stream.  If the stream is already closed, an exception is thrown.</p>
</div>

<div class="api_component">
<h6 class="api_name">flush()</h6>
<p>Flushes the backing stream's buffer.</p>
</div>

<div class="api_component">
<h6 class="api_name">write(str)</h6>
<p>Writes a string to the stream.  If the stream is closed, an exception is
thrown.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">str : <span class="datatype">string</span></div>
<p>The string to write.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">writeAsync(str, callback)</h6>
<p>Writes a string on a background thread.  After the write completes, the
backing stream's buffer is flushed, and both the stream and the backing stream
are closed, also on the background thread.  If the stream is already closed,
an exception is thrown immediately.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">str : <span class="datatype">string</span></div>
<p>The string to write.</p>
</div>

<div class="api_component">
<div class="api_name">[ callback : <span class="datatype">callback</span> ]</div>
<p><em><code>callback</code></em>, if given, must be a function.  It's called as <code>callback(error)</code>
 when the write completes.  <code>error</code> is an <code>Error</code> object or undefined if there
 was no error.  Inside <em><code>callback</code></em>, <code>this</code> is the <code>TextWriter</code> object.</p>
</div>

</div>

</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Properties</h5>

<div class="api_component">
<h6 class="api_name">closed : <span class="datatype">boolean</span></h6>
<p>True if the stream is closed.</p>
</div>

</div>

</div>

</div>

</div>

</div>
