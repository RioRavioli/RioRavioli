[["version", 4], ["markdown", "<!-- contributed by Drew Willcoxon [adw@mozilla.com]  -->\n<!-- contributed by Atul Varma [atul@mozilla.com]  -->\n<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->\n\nThe `file` module provides access to the local filesystem.\n\n\nPaths\n-----\n\nPath specifications in this API are platform-specific.  This means that on\nWindows paths are specified using the backslash path separator (`\\`), and on\nUnix-like systems like Linux and OS X paths are specified using the forward\nslash path separator (`/`).\n\nIf your add-on uses literal Windows-style path specifications with this API,\nyour add-on likely won't work when users run it on Unix-like systems.  Likewise,\nif your add-on uses literal Unix-style path specifications, it won't work for\nusers on Windows.\n\nTo ensure your add-on works for everyone, generate paths using the\n[`join`](packages/api-utils/docs/file.html#join(...)) function.  Unfortunately\nthis API does not currently provide a way to obtain an absolute base path which\nyou could then use with `join`.  For now, you need to\n[`require(\"chrome\")`](dev-guide/module-development/chrome.html) and use the\nXPCOM directory service as described at\n[MDN](https://developer.mozilla.org/en/Code_snippets/File_I%2F%2FO#Getting_special_files).\n\nNote that if you do decide to hardcode Windows-style paths, be sure to escape\nbackslashes in strings.  For example, to specify the file at `C:\\Users\\Myk`, you\nneed to use the string `\"C:\\\\Users\\\\Myk\"`, not `\"C:\\Users\\Myk\"`.  You can read\nmore about escaping characters in strings at\n[MDN](https://developer.mozilla.org/en/JavaScript/Guide/Values,_Variables,_and_Literals#Escaping_Characters).\n\n\n"], ["api-json", {"line_number": 36, "name": "basename", "returns": {"datatype": "string", "line_number": 43, "description": "The last component of the given path."}, "params": [{"datatype": "string", "line_number": 41, "required": true, "name": "path", "description": "The path of a file."}], "signature": "basename(path)", "type": "function", "description": "Returns the last component of the given path.  For example,\n`basename(\"/foo/bar/baz\")` returns `\"baz\"`.  If the path has no components,\nthe empty string is returned."}], ["markdown", "\n\n"], ["api-json", {"line_number": 47, "name": "dirname", "returns": {"datatype": "string", "line_number": 53, "description": "The path of the directory containing the file."}, "params": [{"datatype": "string", "line_number": 51, "required": true, "name": "path", "description": "The path of a file."}], "signature": "dirname(path)", "type": "function", "description": "Returns the path of the directory containing the given file.  If the file is\nat the top of the volume, the empty string is returned."}], ["markdown", "\n\n"], ["api-json", {"line_number": 57, "name": "exists", "returns": {"datatype": "boolean", "line_number": 62, "description": "True if the file exists and false otherwise."}, "params": [{"datatype": "string", "line_number": 60, "required": true, "name": "path", "description": "The path of a file."}], "signature": "exists(path)", "type": "function", "description": "Returns true if a file exists at the given path and false otherwise."}], ["markdown", "\n\n"], ["api-json", {"line_number": 66, "name": "join", "returns": {"datatype": "string", "line_number": 73, "description": "A single string formed by joining the strings on the file system's path\nseparator."}, "params": [{"datatype": "strings", "line_number": 70, "required": true, "name": "...", "description": "A variable number of strings to join.  The first string must be an absolute\npath."}], "signature": "join(...)", "type": "function", "description": "Takes a variable number of strings, joins them on the file system's path\nseparator, and returns the result."}], ["markdown", "\n\n"], ["api-json", {"line_number": 78, "name": "list", "returns": {"datatype": "array", "line_number": 83, "description": "An array of file names.  Each is a basename, not a full path."}, "params": [{"datatype": "string", "line_number": 81, "required": true, "name": "path", "description": "The path of the directory."}], "signature": "list(path)", "type": "function", "description": "Returns an array of file names in the given directory."}], ["markdown", "\n\n"], ["api-json", {"line_number": 87, "name": "mkpath", "params": [{"datatype": "string", "line_number": 92, "required": true, "name": "path", "description": "The path to create."}], "signature": "mkpath(path)", "type": "function", "description": "Makes a new directory named by the given path.  Any subdirectories that do not\nexist are also created.  `mkpath` can be called multiple times on the same\npath."}], ["markdown", "\n\n"], ["api-json", {"line_number": 96, "name": "open", "returns": {"datatype": "stream", "line_number": 108, "description": "If the file is opened in text read-only `mode`, a `TextReader` is returned,\nand if text write-only mode, a `TextWriter` is returned.  See\n[`text-streams`](packages/api-utils/docs/text-streams.html) for information on\nthese text stream objects.  If the file is opened in binary read-only `mode`,\na `ByteReader` is returned, and if binary write-only mode, a `ByteWriter` is\nreturned.  See\n[`byte-streams`](packages/api-utils/docs/byte-streams.html) for more\ninformation on these byte stream objects.  Opened files should always be\nclosed after use by calling `close` on the returned stream."}, "params": [{"datatype": "string", "line_number": 99, "required": true, "name": "path", "description": "The path of the file to open."}, {"datatype": "string", "line_number": 101, "required": false, "name": "mode", "description": "An optional string, each character of which describes a characteristic of the\nreturned stream.  If the string contains `\"r\"`, the file is opened in\nread-only mode.  `\"w\"` opens the file in write-only mode.  `\"b\"` opens the\nfile in binary mode.  If `\"b\"` is not present, the file is opened in text\nmode, and its contents are assumed to be UTF-8.  If *`mode`* is not given,\n`\"r\"` is assumed, and the file is opened in read-only text mode."}], "signature": "open(path, mode)", "type": "function", "description": "Returns a stream providing access to the contents of a file."}], ["markdown", "\n\n"], ["api-json", {"line_number": 120, "name": "read", "returns": {"datatype": "string", "line_number": 130, "description": "A string containing the file's entire contents."}, "params": [{"datatype": "string", "line_number": 123, "required": true, "name": "path", "description": "The path of the file to read."}, {"datatype": "string", "line_number": 125, "required": false, "name": "mode", "description": "An optional string, each character of which describes a characteristic of the\nreturned stream.  If the string contains `\"b\"`, the contents will be returned \nin binary mode. If `\"b\"` is not present or `mode` is not given, the file\ncontents will be returned in text mode. "}], "signature": "read(path, mode)", "type": "function", "description": "Opens a file and returns a string containing its entire contents."}], ["markdown", "\n\n"], ["api-json", {"line_number": 134, "name": "remove", "params": [{"datatype": "string", "line_number": 137, "required": true, "name": "path", "description": "The path of the file to remove."}], "signature": "remove(path)", "type": "function", "description": "Removes a file from the file system.  To remove directories, use `rmdir`."}], ["markdown", "\n\n"], ["api-json", {"line_number": 141, "name": "rmdir", "params": [{"datatype": "string", "line_number": 145, "required": true, "name": "path", "description": "The path of the directory to remove."}], "signature": "rmdir(path)", "type": "function", "description": "Removes a directory from the file system.  If the directory is not empty, an\nexception is thrown."}], ["markdown", "\n"]]