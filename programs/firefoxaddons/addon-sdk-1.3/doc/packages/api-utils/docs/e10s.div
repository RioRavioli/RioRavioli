
<div id="e10s_module_api_docs" class="module_api_docs">
<h1>e10s</h1>
<div class="module_description"><p><span class="aside">
For a high-level overview of out-of-process add-ons, see the
<a href="dev-guide/module-development/e10s.html">Out-of-Process Add-ons</a> internals guide.
</span></p>
<p>The <code>e10s</code> module allows add-ons to execute in a separate process from Firefox
itself.</p>
<h2>Adapters</h2>
<p>As explained in the <a href="dev-guide/module-development/e10s.html">Out-of-Process Add-ons</a> internals guide, an <em>e10s
adapter</em> is the primary mechanism through which chrome functionality is exposed
to add-on processes. It is a single piece of code evaluated <em>twice</em>&mdash;once
in each process&mdash;and typically has the following form:</p>
<pre><code>if (this.chrome) {
  /* We're being evaluated in the add-on process. Export the
   * module's API, proxying all calls to the chrome process
   * as necessary. */
} else exports.register = function register(addon) {
  /* We're being evaluated in the chrome process.
   * Set up chrome process listeners to communicate with
   * the given add-on process. */
};
</code></pre>
<p>In the above code, the <code>chrome</code> global is only visible to this code when it is
executed in the add-on process. It is an instance of <code>ChromeProcess</code>.</p>
<p>The <code>register()</code> function, on the other hand, is only defined and called in the
chrome process, and the <code>addon</code> argument passed to it is an instance of
<code>AddonProcess</code>.</p>
<p><code>ChromeProcess</code> and <code>AddonProcess</code> instances come in pairs, and represent
opposite sides of an inter-process communication mechanism.</p>
<h2>Events</h2>
<p>Chrome and add-on processes can asynchronously send arbitrary events to each
other. The <code><a href="packages/api-utils/docs/events.html">EventEmitter</a></code> interface has been overloaded to make
handling these events simple and intuitive. For instance, here's a trivial e10s
adapter that uses events:</p>
<pre><code>if (this.chrome) {
  exports.sendFoo = function(x) {
    chrome.send('foo', x);
  };
} else exports.register = function register(addon) {
  addon.on('foo', function(type, x) {
    console.log("foo called with argument", x);
  });
};
</code></pre>
<h2>Remote Function Calls</h2>
<p>The add-on process can synchronously call a function on the chrome process, but
not vice versa. Here's a trivial example of an e10s adapter using this
mechanism:</p>
<pre><code>if (this.chrome) {
  exports.bar = function(x) {
    return chrome.call('bar', x);
  };
} else exports.register = function register(addon) {
  addon.registerCall('bar', function(name, x) {
    return x * 3;
  });
};
</code></pre>
<h2>Arguments</h2>
<p>When sending events or calling functions in another process, the chrome and
add-on processes are allowed to send JSON-serializable arguments. Additionally,
they can send a special type of object called a <em>handle</em>. See the
<a href="https://developer.mozilla.org/en/Jetpack_Processes#Handles">MDN Handle Documentation</a> for more information on these.</p>
<p>Here's a simple example of a handle being used to remember a callback function
on the add-on side:</p>
<pre><code>if (this.chrome) {
  exports.baz = function(callback) {
    var handle = chrome.createHandle();
    handle.callback = callback;
    chrome.send('baz', handle);
  };
  chrome.on('bazCallback', function(name, handle) {
    try { handle.callback(); } except (e) { console.exception(e); }
    handle.invalidate();
  });
} else exports.register = function register(addon) {
  addon.on('baz', function(name, handle) {
    require('timer').setTimeout(function() {
      addon.send('bazCallback', handle);
    }, 1000);
  });
};
</code></pre>
</div>

<div class="api_reference">
<h2 class="api_header">API Reference</h2>

<div class="api_component_group">
<h3 class="api_header">Classes</h3>

<div class="api_component">
<h4 class="api_name">ChromeProcess</h4>
<p>In an add-on process, this represents the parent chrome process. This class is
a singleton and has no constructor. It is automatically injected into the
global scope of all <code>-e10s-adapter</code> modules as the <code>chrome</code> object.</p>
<div class="api_component_group">
<h5 class="api_header">Methods</h5>

<div class="api_component">
<h6 class="api_name">on(type, listener)</h6>
<p>Registers an event listener with the chrome process.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">string</span></div>
<p>The type of event to listen for.</p>
</div>

<div class="api_component">
<div class="api_name">listener : <span class="datatype">function</span></div>
<p>The listener function that handles the event. Its first argument is always
<code>type</code>, and additional arguments vary depending on the event's originating
<code>addon.send()</code> call in the chrome process.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">removeListener(type, listener)</h6>
<p>Removes an event listener from the chrome process.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">string</span></div>
<p>The type of event for which <code>listener</code> was registered.</p>
</div>

<div class="api_component">
<div class="api_name">listener : <span class="datatype">function</span></div>
<p>The listener function that was registered.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">send(type)</h6>
<p>Sends an event asynchronously to the chrome process. Any additional arguments
after <code>type</code> are passed as arguments to event listeners in the chrome process.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">string</span></div>
<p>The type of event to send.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">call(name)</h6>
<p>Synchronously calls a remote function in the chrome process and returns its
result. Any additional arguments after <code>name</code> are passed as arguments to the
function in the chrome process.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">name : <span class="datatype">string</span></div>
<p>The name of the function to call.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">createHandle()</h6>
<p>Creates a <a href="https://developer.mozilla.org/en/Jetpack_Processes#Handles">handle</a> object, which can be passed to the chrome process via
<code>send()</code> or <code>call()</code>.</p>
</div>

</div>

</div>

<div class="api_component">
<h4 class="api_name">AddonProcess</h4>
<p>In the chrome process, this represents a child add-on process.</p>
<div class="api_component_group">
<h5 class="api_header">Constructors</h5>

<div class="api_component">
<h6 class="api_name">AddonProcess(options)</h6>
<p>Creates a new add-on process.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">options : <span class="datatype">object</span></div>
<p>An optional object with the following keys, all of which are optional:</p>
<div class="api_component">
<div class="api_name">[ console : <span class="datatype">object</span> ]</div>
<p>An object whose interface corresponds to that of the <code>console</code> global. All
logging messages to the <code>console</code> object of the addon will be redirected to
this object. If this object isn't provided, then the global <code>console</code> object
of the chrome process will be used.</p>
</div>

</div>

</div>

</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Methods</h5>

<div class="api_component">
<h6 class="api_name">destroy()</h6>
<p>Terminates the add-on process.</p>
</div>

<div class="api_component">
<h6 class="api_name">on(type, listener)</h6>
<p>Registers an event listener with the add-on process.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">string</span></div>
<p>The type of event to listen for.</p>
</div>

<div class="api_component">
<div class="api_name">listener : <span class="datatype">function</span></div>
<p>The listener function that handles the event. Its first argument is always
<code>type</code>, and additional arguments vary depending on the event's originating
<code>chrome.send()</code> call in the add-on process.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">registerCall(name, handler)</h6>
<p>Registers a synchronous call handler with the add-on process.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">name : <span class="datatype">string</span></div>
<p>The name of the function.</p>
</div>

<div class="api_component">
<div class="api_name">handler : <span class="datatype">function</span></div>
<p>The call handler. Its first argument is always <code>name</code>, and additional
arguments vary depending on the call's originating <code>chrome.call()</code> invocation
in the add-on process. The handler's return value is also passed back to the
original caller in the add-on process.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">send(type)</h6>
<p>Sends an event asynchronously to the add-on process. Any additional arguments
after <code>type</code> are passed as arguments to event listeners in the add-on process.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">string</span></div>
<p>The type of event to send.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">createHandle()</h6>
<p>Creates a <a href="https://developer.mozilla.org/en/Jetpack_Processes#Handles">handle</a> object, which can be passed to the add-on process via
<code>send()</code>.</p>
</div>

</div>

</div>

</div>

</div>

</div>
