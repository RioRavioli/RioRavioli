[["version", 4], ["markdown", "<!-- contributed by Drew Willcoxon [adw@mozilla.com]  -->\n<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->\n\nThe `api-utils` module provides some helpers useful to the SDK's high-level API\nimplementations.\n\nIntroduction\n------------\n\nThe SDK high-level API design guidelines make a number of recommendations.\nThis module implements some of those patterns so that your own implementations\ndon't need to reinvent them.\n\nFor example, public constructors should be callable both with and without the\n`new` keyword.  Your module can implement this recommendation using the\n`publicConstructor` function.\n\nOptions objects or \"dictionaries\" are also common throughout the high-level\nAPIs.  The guidelines recommend that public constructors should generally define\na single `options` parameter rather than defining many parameters.  Since one of\nthe SDK's principles is to be friendly to developers, ideally all properties on\noptions dictionaries should be checked for correct type, and informative error\nmessages should be generated when clients make mistakes.  With the\n`validateOptions` function, your module can easily do so.\n\nAnd objects are sometimes iterable over a custom set of key/value pairs.\nSuch objects should have custom iterators that let consumers iterate keys,\nvalues, or [key, value] pairs.  The `addIterator` function makes it easy to do\nso in a way that is consistent with the behavior of default iterators during\n`for...in`, `for each...in`, and `for...in Iterator()` loops.\n\n"], ["api-json", {"line_number": 32, "name": "publicConstructor", "returns": {"datatype": "function", "line_number": 52, "description": "A function that makes new instances of `privateConstructor`.\n"}, "params": [{"datatype": "constructor", "line_number": 55, "required": true, "name": "privateConstructor", "description": ""}], "signature": "publicConstructor(privateConstructor)", "type": "function", "description": "Returns a function *C* that creates an instance of `privateConstructor`. *C*\nmay be called with or without the `new` keyword.\n\nThe prototype of each instance returned from *C* is *C*.`prototype`, and\n*C*.`prototype` is an object whose prototype is\n`privateConstructor.prototype`.  Instances returned from *C* are therefore\ninstances of both *C* and `privateConstructor`.\n\nAdditionally, the constructor of each instance returned from *C* is *C*.\n\nInstances returned from *C* are automatically memory tracked using\n`memory.track` under the bin name `privateConstructor.name`.\n\n**Example**\n\n    function MyObject() {}\n    exports.MyObject = apiUtils.publicConstructor(MyObject);\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 58, "name": "validateOptions", "returns": {"datatype": "object", "line_number": 96, "description": "A validated options dictionary given some requirements. If any of the\nrequirements are not met, an exception is thrown.\n"}, "params": [{"datatype": "object", "line_number": 100, "required": true, "name": "options", "description": "The options dictionary to validate.  It's not modified. If it's null or\notherwise falsey, an empty object is assumed.\n"}, {"line_number": 104, "name": "requirements", "datatype": "object", "required": true, "props": [{"datatype": "function", "line_number": 110, "required": false, "name": "map", "description": "A function that's passed the value of the key in the `options`. `map`'s\nreturn value is taken as the key's value in the final validated options,\n`is`, and `ok`. If `map` throws an exception it is caught and discarded,\nand the key's value is its value in `options`.\n"}, {"datatype": "array", "line_number": 116, "required": false, "name": "is", "description": "An array containing the number of `typeof` type names. If the key's value is\nnone of these types it fails validation. Arrays and nulls are identified by\nthe special type names \"array\" and \"null\"; \"object\" will not match either.\nNo type coercion is done.\n"}, {"datatype": "function", "line_number": 122, "required": false, "name": "ok", "description": "A function that is passed the key's value. If it returns false, the value\nfails validation.\n"}, {"datatype": "string", "line_number": 126, "required": false, "name": "msg", "description": "If the key's value fails validation, an exception is thrown. This string\nwill be used as its message. If undefined, a generic message is used, unless\n`is` is defined, in which case the message will state that the value needs to\nbe one of the given types."}], "description": "An object whose keys are the expected keys in `options`. Any key in\n`options` that is not present in `requirements` is ignored.  Each\nvalue in `requirements` is itself an object describing the requirements\nof its key.  The keys of that object are the following, and each is optional:\n"}], "signature": "validateOptions(options, requirements)", "type": "function", "description": "A function to validate an options dictionary according to the specified\nconstraints.\n\n`map`, `is`, and `ok` are used in that order.\n\nThe return value is an object whose keys are those keys in `requirements` that\nare also in `options` and whose values are the corresponding return values of\n`map` or the corresponding values in `options`.  Note that any keys not shared\nby both `requirements` and `options` are not in the returned object.\n\n**Examples**\n\nA typical use:\n\n    var opts = { foo: 1337 };\n    var requirements = {\n      foo: {\n        map: function (val) val.toString(),\n        is: [\"string\"],\n        ok: function (val) val.length > 0,\n        msg: \"foo must be a non-empty string.\"\n      }\n    };\n    var validatedOpts = apiUtils.validateOptions(opts, requirements);\n    // validatedOpts == { foo: \"1337\" }\n\nIf the key `foo` is optional and doesn't need to be mapped:\n\n    var opts = { foo: 1337 };\n    var validatedOpts = apiUtils.validateOptions(opts, { foo: {} });\n    // validatedOpts == { foo: 1337 }\n\n    opts = {};\n    validatedOpts = apiUtils.validateOptions(opts, { foo: {} });\n    // validatedOpts == {}\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 133, "name": "addIterator", "params": [{"datatype": "object", "line_number": 148, "required": true, "name": "obj", "description": "the object to which to add the iterator\n"}, {"datatype": "function", "line_number": 151, "required": true, "name": "keysValsGen", "description": "a generator function that yields [key, value] pairs"}], "signature": "addIterator(obj, keysValsGen)", "type": "function", "description": "Adds an iterator to the specified object that iterates keys, values,\nor [key, value] pairs depending on how it is invoked, i.e.:\n\n    for      (var key in obj)                  { ... } // iterate keys\n    for each (var val in obj)                  { ... } // iterate values\n    for      (var [key, val] in Iterator(obj)) { ... } // iterate pairs\n\nIf your object only iterates either keys or values, you don't need this\nfunction. Simply assign a generator function that iterates the keys/values\nto your object's `__iterator__` property instead, f.e.:\n\n    obj.__iterator__ = function () { for each (var i in items) yield i; }\n"}], ["markdown", "\n"]]