
<div id="events_module_api_docs" class="module_api_docs">
<h1>events</h1>
<div class="module_description"><p>The <code>events</code> module provides base API for emitting events.</p>
<p>This module is not intended to be used directly by programs. Rather, it is
intended to be used by other modules that provide APIs to programs.</p>
</div>

<div class="api_reference">
<h2 class="api_header">API Reference</h2>

<div class="api_component_group">
<h3 class="api_header">Classes</h3>

<div class="api_component">
<h4 class="api_name">EventEmitter</h4>
<p>The EventEmitter is the base building block for all compositions that
would need to broadcast data to multiple consumers.</p>
<p>Please note that <code>EventEmitter</code> does not expose either a method for emitting
events or a list of available event listeners as its public API. Obviously
both are accessible but from the instance itself through the private API.</p>
<div class="api_component_group">
<h5 class="api_header">Constructors</h5>

<div class="api_component">
<h6 class="api_name">EventEmitter()</h6>
<p>Creates an EventEmitter object.</p>
</div>

</div>

<div class="api_component_group">
<h5 class="api_header">Methods</h5>

<div class="api_component">
<h6 class="api_name">on(type, listener)</h6>
<p>Registers an event <code>listener</code> that will be called when events of
specified <code>type</code> are emitted.</p>
<p>If the <code>listener</code> is already registered for this <code>type</code>, a call to this
method has no effect.</p>
<p>If the event listener is being registered while an event is being processed,
the event listener is not called during the current emit.</p>
<p><strong>Example:</strong></p>
<pre><code>// worker is instance of EventEmitter
worker.on('message', function (data) {
  console.log('data received: ' + data)
});
</code></pre>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">String</span></div>
<p>The type of the event.</p>
</div>

<div class="api_component">
<div class="api_name">listener : <span class="datatype">Function</span></div>
<p>The listener function that processes the event.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">once(type, listener)</h6>
<p>Registers an event <code>listener</code> that will only be called once, the next time
an event of the specified <code>type</code> is emitted.</p>
<p>If the event listener is registered while an event of the specified <code>type</code>
is being emitted, the event listener will not be called during the current
emit.</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">String</span></div>
<p>The type of the event.</p>
</div>

<div class="api_component">
<div class="api_name">listener : <span class="datatype">Function</span></div>
<p>The listener function that processes the event.</p>
</div>

</div>

</div>

<div class="api_component">
<h6 class="api_name">removeListener(type, listener)</h6>
<p>Unregisters an event <code>listener</code> for the specified event <code>type</code>.</p>
<p>If the <code>listener</code> is not registered for this <code>type</code>, a call to this
method has no effect.</p>
<p>If an event listener is removed while an event is being processed, it is
still triggered by the current emit. After it is removed, the event listener
is never invoked again (unless registered again for future processing).</p>
<div class="parameter_set">
<div class="api_component">
<div class="api_name">type : <span class="datatype">String</span></div>
<p>The type of the event.</p>
</div>

<div class="api_component">
<div class="api_name">listener : <span class="datatype">Function</span></div>
<p>The listener function that processes the event.</p>
</div>

</div>

</div>

</div>

</div>

</div>

</div>

</div>
