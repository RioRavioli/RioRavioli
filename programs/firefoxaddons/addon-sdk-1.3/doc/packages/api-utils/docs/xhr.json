[["version", 4], ["markdown", "<!-- contributed by Atul Varma [atul@mozilla.com]  -->\n<!-- edited by Noelle Murata [fiveinchpixie@gmail.com]  -->\n\nThe `xhr` module provides access to `XMLHttpRequest` functionality, also known\nas AJAX.\n\n## Limitations ##\n\nThe `XMLHttpRequest` object is currently fairly limited, and does not\nyet implement the `addEventListener()` or `removeEventListener()`\nmethods. It also doesn't yet implement the `upload` property.\n\nFurthermore, the `XMLHttpRequest` object does not currently support\nthe `mozBackgroundRequest` property. All security UI, such as\nusername/password prompts, are automatically suppressed, so if\nrequired authentication information isn't passed to the `open()`\nmethod, the request will fail.\n\n## Resource Use ##\n\nWhenever this module is unloaded, all in-progress requests are immediately\naborted.\n\n## Security Concerns ##\n\nBy default, the `XMLHttpRequest` object grants full access to any\nprotocol scheme, which means that it can be used to read from (but not\nwrite to) the host system's entire filesystem. It also has unfettered\naccess to any local area networks, VPNs, and the internet.\n\n### Threat Model ###\n\nThe `XMLHttpRequest` object can be used by an add-on to \"phone\nhome\" and transmit potentially sensitive user data to third\nparties.\n\nIf access to the filesystem isn't prevented, it could easily be used\nto access sensitive user data, though this may be inconsequential if\nthe client can't access the network.\n\nIf access to local area networks isn't prevented, malicious code could access\nsensitive data.\n\nIf transmission of cookies isn't prevented, malicious code could access\nsensitive data.\n\nAttenuating access based on a regular expression may be ineffective if\nit's easy to write a regular expression that *looks* safe but contains\na special character or two that makes it far less secure than it seems\nat first glance.\n\n### Possible Attenuations ###\n\n<span class=\"aside\">\nWe may also want to consider attenuating further based on domain name\nand possibly even restricting the protocol to `https:` only, to reduce\nrisk.\n</span>\n\nBefore being exposed to unprivileged code, this object needs\nto be attenuated in such a way that, at the very least, it can't\naccess the user's filesystem. This can probably be done most securely\nby white-listing the protocols that can be used in the URL passed to\nthe `open()` method, and limiting them to `http:`, `https:`, and\npossibly a special scheme that can be used to access the add-on's\npackaged, read-only resources.\n\nFinally, we need to also consider attenuating http/https requests such\nthat they're \"sandboxed\" and don't communicate potentially sensitive\ncookie information.\n\n"], ["api-json", {"line_number": 72, "constructors": [{"line_number": 75, "signature": "XMLHttpRequest()", "type": "constructor", "name": "XMLHttpRequest", "description": "Creates an `XMLHttpRequest`. This is a constructor, so its use should always\nbe preceded by the `new` operator.  For more information about\n`XMLHttpRequest` objects, see the MDC page on\n[Using XMLHttpRequest](https://developer.mozilla.org/En/Using_XMLHttpRequest)\nand the Limitations section in this page."}], "type": "class", "name": "XMLHttpRequest", "description": ""}], ["markdown", "\n\n"], ["api-json", {"line_number": 85, "name": "getRequestCount", "returns": {"datatype": "integer", "line_number": 89, "description": "The number of live `XMLHttpRequest` objects."}, "signature": "getRequestCount()", "type": "function", "description": "Returns the number of `XMLHttpRequest` objects that are alive (i.e., currently\nactive or about to be)."}], ["markdown", "\n"]]