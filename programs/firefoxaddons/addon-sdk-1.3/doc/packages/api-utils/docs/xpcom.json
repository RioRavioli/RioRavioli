[["version", 4], ["markdown", "Using this module you can:\n\n* register a component with\n[XPCOM](https://developer.mozilla.org/en/Creating_XPCOM_Components),\nmaking it available to all XPCOM clients\n* retrieve a factory for a given XPCOM component\n* generate a UUID\n\nThe module also exposes the\n[XPCOMUtils](https://developer.mozilla.org/en/JavaScript_code_modules/XPCOMUtils.jsm)\nmodule.\n\n"], ["api-json", {"line_number": 13, "name": "register", "returns": {"datatype": "Factory", "line_number": 82, "description": "See the documentation for the `Factory` class in this page."}, "params": [{"line_number": 61, "name": "options", "datatype": "object", "required": true, "props": [{"datatype": "nsIDPtr", "line_number": 63, "required": false, "name": "uuid", "description": "A [UUID](https://developer.mozilla.org/en/Generating_GUIDs) which will be\nused as the\n[class ID](https://developer.mozilla.org/en/Creating_XPCOM_Components/An_Overview_of_XPCOM#CID)\nfor this component. If you don't include this option, the `register()`\nfunction will generate a new UUID.\n"}, {"datatype": "function", "line_number": 70, "required": true, "name": "create", "description": "The constructor for the component.\n"}, {"datatype": "string", "line_number": 73, "required": true, "name": "name", "description": "A human-readable name for the component.\n"}, {"datatype": "string", "line_number": 76, "required": true, "name": "contractID", "description": "A human-readable string which will be used as the\n[contract ID](https://developer.mozilla.org/en/Creating_XPCOM_Components/An_Overview_of_XPCOM#Contract_ID)\nfor the component. An XPCOM client will be able to use this value to access\nthe component.\n"}], "description": ""}], "signature": "register(options)", "type": "function", "description": "\nMakes a component available through XPCOM.\n\nThis function creates and registers a factory for a component given a\nconstructor for it and some metadata: a\n[class ID](https://developer.mozilla.org/en/Creating_XPCOM_Components/An_Overview_of_XPCOM#CID), a [contract ID](https://developer.mozilla.org/en/Creating_XPCOM_Components/An_Overview_of_XPCOM#Contract_ID),\nand a name.\n\n<span class=\"aside\">In this example the HelloWorld component is available to JavaScript only, so we use the technique documented under the \"Using wrappedJSObject\" section of [How to Build an XPCOM Component in JavaScript](https://developer.mozilla.org/en/How_to_Build_an_XPCOM_Component_in_Javascript).</span>\n\n    var xpcom = require(\"xpcom\");\n\n    function HelloWorld() {\n      this.wrappedJSObject = this;\n    }\n\n    HelloWorld.prototype = {\n      QueryInterface: xpcom.utils.generateQI(),\n      hello: function() {\n        return \"Hello World!\";\n      }\n    };\n\n    xpcom.register({name: \"Hello World Component\",\n                    contractID: \"@me.org/myComponent\",\n                    create: HelloWorld});\n\nXPCOM clients can subsequently access this factory and use it to create\ninstances of the component.\n\n    var {Ci} = require(\"chrome\");\n\n    var factory = xpcom.getClass(\"@me.org/myComponent\", Ci.nsIFactory);\n    var helloWorld = factory.createInstance(null, Ci.nsISupports).wrappedJSObject;\n    console.log(helloWorld.hello());\n\n`register()` returns a Factory object for the component which implements\nthe `createInstance()` and `QueryInterface()` functions of the\n[`nsIFactory`](https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsIFactory) and\n[`nsISupports`](https://developer.mozilla.org/en/XPCOM_Interface_Reference/nsISupports)\ninterfaces, as well as defining an `unregister()` function to remove the\ncomponent from XPCOM.\n\nWhen the module is unloaded, all components registered via the `register()`\nfunction are automatically unregistered.\n"}], ["markdown", "\n\n"], ["api-json", {"line_number": 86, "name": "getClass", "returns": {"datatype": "object", "line_number": 119, "description": "The factory object. The type of this object will depend on the value of the\n`iid` argument. If no `iid` argument is specified it will be of type\n[`nsISupports`](https://developer.mozilla.org/En/NsISupports).\n\nNote that this object is not a `Factory` object as defined by this module.\nIf you previously registered the component by calling the `register()`\nfunction and you need to access the `Factory` object for the component, for\nexample to call the `Factory`'s `unregister()` method, you can do so by\ngetting the\n[`wrappedJSObject`](https://developer.mozilla.org/en/wrappedJSObject)\nproperty of the returned object:\n\n    var factory = xpcom.getClass(\"@me.org/myComp\", Ci.nsIFactory).wrappedJSObject;\n    factory.unregister();\n"}, "params": [{"datatype": "string", "line_number": 101, "required": true, "name": "contractID", "description": "The\n[contract ID](https://developer.mozilla.org/en/Creating_XPCOM_Components/An_Overview_of_XPCOM#Contract_ID)\nfor the component whose factory will be returned.\n"}, {"datatype": "iid", "line_number": 106, "required": false, "name": "iid", "description": "The interface type to be returned. These objects are usually accessed through\nthe `Components.interfaces`, or `Ci`, object.\n\nThe methods of this interface will be callable on the returned factory object.\nUsually you want this to be\n[`Ci.nsIFactory`](https://developer.mozilla.org/En/nsIFactory), but if you know\na component has a factory that implements a more specific type of factory\ninterface, you can pass that interface here.  If you don't include this option\nonly the methods of\n[`nsISupports`](https://developer.mozilla.org/En/NsISupports)\nwill be callable, which is probably not what you want.\n"}], "signature": "getClass(contractID, iid)", "type": "function", "description": "Returns the factory object for the class specified by `contractID`.\n\nFor example, given a registered XPCOM component which is identified with\nthe contract ID \"@me.org/myComponent\", we can access a factory and then\nuse it to instantiate the component in the following way:\n\n    var xpcom = require(\"xpcom\");\n    var {Ci} = require(\"chrome\");\n\n    var factory = xpcom.getClass(\"@me.org/myComponent\", Ci.nsIFactory);\n    var helloWorld = factory.createInstance(null, Ci.nsISupports).wrappedJSObject;\n    console.log(helloWorld.hello());\n"}], ["markdown", "\n\n"], ["api-json", {"datatype": "object", "line_number": 137, "type": "property", "name": "utils", "description": "The\n[XPCOMUtils](https://developer.mozilla.org/en/JavaScript_code_modules/XPCOMUtils.jsm)\nmodule."}], ["markdown", "\n\n"], ["api-json", {"line_number": 144, "name": "makeUuid", "returns": {"datatype": "nsIDPtr", "line_number": 150, "description": ""}, "signature": "makeUuid()", "type": "function", "description": "Generates and returns a new\n[UUID](https://developer.mozilla.org/en/Generating_GUIDs).\n\nCalling `toString()` on this object will yield the UUID in string form."}], ["markdown", "\n\n"], ["api-json", {"methods": [{"line_number": 177, "name": "createInstance", "params": [{"datatype": "nsISupports", "line_number": 181, "required": true, "name": "outer", "description": "This argument must be `null`, or the function throws\n`Cr.NS_ERROR_NO_AGGREGATION`.\n"}, {"datatype": "iid", "line_number": 185, "required": true, "name": "iid", "description": "Interface identifier. These objects are usually accessed through\nthe `Components.interfaces`, or `Ci`, object. The methods of this\ninterface will be callable on the returned object.\n\nIf the object implements an interface that's already defined in XPCOM, you\ncan pass that in here:\n\n    var about = aboutFactory.createInstance(null, Ci.nsIAboutModule);\n    // You can now access the nsIAboutModule interface of the 'about' object\n\nIf you will be getting the `wrappedJSObject` property from the returned\nobject to access its JavaScript implementation, pass `Ci.nsISupports` here:\n\n    var custom = factory.createInstance(null, Ci.nsISupports).wrappedJSObject;\n    // You can now access the interface defined for the 'custom' object\n"}], "signature": "createInstance(outer, iid)", "type": "method", "description": "Creates an instance of the component associated with this factory.\n"}, {"line_number": 204, "name": "QueryInterface", "returns": {"datatype": "Factory", "line_number": 215, "description": ""}, "params": [{"datatype": "iid", "line_number": 210, "required": true, "name": "interfaces", "description": "There are only two legal values for this parameter: `Ci.nsIFactory` and\n`Ci.nsISupports`.  Any other value will cause this method to throw\n`Cr.NS_ERROR_NO_INTERFACE`.\n"}], "signature": "QueryInterface(interfaces)", "type": "method", "description": "This method is called automatically by XPCOM, so usually you don't need\nto call it yourself.  It returns the `Factory` object itself such that the\nmethods of the given interface are callable on it.\n"}, {"line_number": 218, "signature": "unregister()", "type": "method", "name": "unregister", "description": "Unregisters the factory's component."}], "line_number": 153, "type": "class", "name": "Factory", "description": "\nWhen a component is made available through XPCOM using the `register()`\nfunction, `register()` returns a `Factory` object that can be used to\ninstantiate the component using its `createInstance()` function:\n\n    var factory = require(\"xpcom\").register({\n      name: \"My Component\",\n      contractID: \"@me.org/myComponent\",\n      create: MyComponent\n    });\n\n    var {Ci} = require(\"chrome\");\n    var component = factory.createInstance(null, Ci.nsISupports).wrappedJSObject;\n\nIn this example we haven't defined a custom interface ID for the component.\nInstead we pass `Ci.nsISupports` as the interface ID, and use `wrappedJSObject`\nto retrieve the component. For more details on this technique see the\n[guide to building XPCOM components in JavaScript](https://developer.mozilla.org/en/How_to_Build_an_XPCOM_Component_in_Javascript).\n\n`Factory` also implements its own `unregister()` function,\nwhich unregisters the component from XPCOM.\n\n\n\n"}], ["markdown", "\n"]]