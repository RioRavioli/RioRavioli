/** 
 * Node represents a mutable node in a graph.
 * It contains a name to uniquely identify it, and any edges that
 * point to other nodes with a description attached.
 *
 * Specification fields
 * 	@specfield name : string                   //identifies this
 * 	@specfield edges : list of (string, name)  //edges contains destination and label
 *
 * Abstract Invariant
 * 	A name must not be null
 * 	A name must be a string with at least length of one
 * 	List of edges must not be null
 */

public class Node {

	/**
	 * Constructs a new Node with the given name.
	 * @requires name is non-null. and has length larger than 0.
	 * @param name is non-null and has length larger than 0.
	 */
	public Node(String name) {
	}

	/**
	 * Returns the name of this Node.
	 * @return name
	 */
	public String getName() {
	}

	/**
	 * Returns all edges' labels of the destination Node with the given name. 
	 * @return list of labels of all edges with the destination Node with the given name.
	 *				if destName does not represent a valid destination Node, null is returned. 
	 */
	public List<String> getEdgesLabels(String destName) {
	}

	/**
	 * Returns true if this Node contains an edge with with a destination node with the
	 * given name.
	 * @return true if this Node has edge with given name.
	 */
	public boolean containsEdge(String destName) {
	}

	/**
	 * Adds an edge with the given destination and label to this Node.
	 * @requires destName and label are non-null.
	 * @param destName is non-null and has length larger than 0.
	 * @param label is non-null. 
	 * @modifies this
	 * @effects adds a new edge to this Node.
	 */
	public void addEdge(String destName, String label) {
	}

	/**
	 * Removes all edges with the given destination.
	 * @requires destName is non-null and has length larger than 0.
	 * @param destname is non-null and has length larger than 0.
	 * @modifies this
	 * @effects removes all edges that contain the given destination.
	 */
	public void removeEdges(String destName) {
	}	

	/**
	 * Removes all edges with the given destination and label.
	 * @requires destName and label are non-null, and destName has length larger than 0.
	 * @param destName is non-null and has length larger than 0. 
	 * @param label is non-null. 
	 * @modifies this
	 * @effects removes all edges that contain the given destination and label.
	 */
	public void removeEdges(String destName, String label) {
	}

	/**
	 * Returns the names of all Nodes that edges point to.
	 * @return all names of the Nodes that edges point to. If there are no
	 * 			edges, an empty list is returned. 
	 */
	public List<String> getAllDest() {
	}

	/**
	 * Returns the number of edges this Node contains.
	 * @Return the number of edges this Node contains.
	 */
	public int edgeCount() {
	}
}
