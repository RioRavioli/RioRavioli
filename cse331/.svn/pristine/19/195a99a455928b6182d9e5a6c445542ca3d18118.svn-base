/**
 * MarvelPaths uses information given from a file and returns a path between two
 * characters based on character occurances throught the books.
 */

package hw5;
import hw4.*;

import java.util.*;

public class MarvelPaths {
	/*
	 * Specification fields
	 * 	@specfield marvelGraph : graph of characters linked to other characters
	 * 		by book appearance. 
	 *
	 * Abstraction Inavriant
	 * 	the graph cannot be null
	 *
	 * Abstraction Function
	 * 	AF(r) = marvelGraph g, such that
	 * 		g.marvelGraph = marvelGraph 
	 *
	 * Representation Invariant
	 * 	marvelGraph != null
	 */
	private Graph marvelGraph;

	/**
	 * Creates a new MarvelPaths object based on the given filename.
	 * @requires file to be a valid file
	 * @param file that paths will be created on.
	 * @throws IllegalArgumentException if file is null.
	 * @modifies this
	 * @effects creats an empty graph, and sets the url.
	 */
	public MarvelPaths(String file) {
		if (file == null) {
			throw new IllegalArgumentException("file is null!");
		}
		marvelGraph = new Graph();
		createGraph(file);
	}

	/**
	 * Get the list of characters in this graph.
	 * @Return list of characters representing this graph.
	 */
	public List<String> getCharacters() {
		return marvelGraph.getNodeNames();
	}

	/**
	 * Get the list of books the two given characters appears together in, or
	 * null if either character is not in the graph.
	 * @param character1 is not null
	 * @param character2 is not null
	 * @throws IllegalArgumentException if character1 or character2 is null.
	 * @return list of books in which the two characters appear together in, or
	 * null if either character is not in the graph.
	 */
	public List<String> getBooks(String character1, String character2) {
		return marvelGraph.getEdgesLabels(character1, character2);
	}
	
	/**
	 * Returns all characters that coappear in the books the given character appears in,
	 * or null if the given character is not in the graph.
	 * @param character is not null.
	 * @throws IllegalArgumentException if character is null.
	 * @return list of all characters that appear in the same books as the given character,
	 * or null if the given character is not in the graph.
	 */
	public List<String> getCoappearances(String character) {
		return marvelGraph.getAllDests(character);
	}

	/**
	 * Returns the shortest possible path between two characters. A path is represented by
	 * a list of book and character names, where even indices contain books, odd indices
	 * contain characters, and characters appear in books in adjacent indices.
	 * An empty list suggests that no books were needed to link the two characters. A null
	 * value indicates that there were no relations between the characters.
	 * @param startChar the starting character of the path.
	 * @param destChar the ending character of the path. 
	 * @throws IllegalArgumentException if startChar or destChar is null.
	 * @throws IllegalArgumentException if startChar or destChar is not a character in graph.
	 * @return list of strings representing characters and books, where even indices contain
	 * books, odd indices contain characters, and characters appear in books in adjacent
	 * indices. startChar appears in the first book in the list. Returns null if no path was
	 * found between the two characters.
	 */
	public List<String> getPath(String startChar, String destChar) {
		if (startChar == null || destChar == null) {
			throw new IllegalArgumentException("startChar or destChar is null!");
		}
		if (!marvelGraph.containsNode(startChar) || !marvelGraph.containsNode(destChar)) {
			throw new IllegalArgumentException("startChar or destChar is not a chracater in this graph!");
		}

		//set up for path finding
		Queue<String> exploreNodes = new LinkedList<String>();
		Map<String, List<String>> nodePaths = new HashMap<String, List<String>>(); 
		exploreNodes.add(startChar);
		nodePaths.put(startChar, new ArrayList<String>());

		//explore for path
		while(!exploreNodes.isEmpty()) {
			String currentChar = exploreNodes.remove();
			if (currentChar.equals(destChar)) {
				return nodePaths.get(currentChar);
			} else {
				List<String> nextChars = marvelGraph.getAllDests(currentChar); 
				for (String nextChar : nextChars) {
					if (!nodePaths.containsKey(nextChar)) {
						List<String> currentPath = nodePaths.get(currentChar); 
						List<String> newPath = new ArrayList<String>(currentPath);
						String book = marvelGraph.getEdgesLabels(currentChar, nextChar).get(0);
						currentPath.add(book);
						currentPath.add(nextChar);
						exploreNodes.add(nextChar);
					}
				}
			}
		}
		return null;
	}

	//create the graph
	private void createGraph(String url) {
		//get information
		Map<String, List<String>> charactersBooks = new HashMap<String, List<String>>();
		Map<String, List<String>> booksCharacters = new HashMap<String, List<String>>();
		try {
			MarvelParser.parseData(url, charactersBooks, booksCharacters);
		} catch (Exception e) {
			e.printStackTrace();
		}

		//create the graph
		for (String character : charactersBooks.keySet()) {
			marvelGraph.createNode(character);
		}
		for (String character : charactersBooks.keySet()) {
			List<String> books = charactersBooks.get(character);
			for (String book : books) {
				List<String> bookChars = booksCharacters.get(book);
				for (String bookChar : bookChars) {
					marvelGraph.createEdge(character, bookChar, book);
				}
			}
		}
	}
}










