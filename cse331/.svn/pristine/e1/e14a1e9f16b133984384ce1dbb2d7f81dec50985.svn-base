package hw4.test;
import hw3.*;

import org.junit.Test;
import org.junit.Before;
import static org.junit.Assert.*;

public class TestGraph {
	Graph graph;

	@Before
	public void setUp() throws Exception {
		graph = new Graph();
	}

	@Test
	public void testCreateOneNode() {
		graph.createNode("test");
		assertEquals(graph.getNodeCount(), 1);
	}

	@Test
	public void testCreate3Nodes() {
		graph.createNode("test");
		graph.createNode("test2");
		graph.createNode("test3");
		assertEquals(graph.getNodeCount(), 3);
	}

	@Test
	public void testAddAndGetEdges() {
		graph.createNode("test");
		graph.createNode("test2");
		graph.createEdge("test", "test2", "edge");
		List<String> labels = graph.getEdgesLabels("test", "test2");
		assertTrue(labels.get(0).equals("edge"));
	}

	@Test
	public void testAdd5AndGetEdges() {
		graph.createNode("test");
		graph.createNode("test2");
		graph.createEdge("test", "test2", "edge");
		graph.createEdge("test", "test2", "edge");
		graph.createEdge("test2", "test2", "edge2");
		graph.createEdge("test2", "test2", "edge");
		graph.createEdge("test", "test", "edge3");
		List<String> labels = graph.getEdgesLabels("test2", "test2");
		assertEquals(labels.size(), 2);
	}

	@Test
	public void testAdd5AndGetSpecificEdges() {
		graph.createNode("test");
		graph.createNode("test2");
		graph.createEdge("test", "test2", "edge");
		graph.createEdge("test", "test2", "edge");
		graph.createEdge("test", "test2", "edge2");
		graph.createEdge("test2", "test2", "edge");
		graph.createEdge("test", "test", "edge3");
		List<String> labels = graph.getEdgesLabels("test", "test2", "edge");
		assertEquals(labels.size(), 2);
	}

	@Test
	public void testRemoveNode() {
		graph.createNode("test");
		graph.createNode("test2");
		graph.removeNode("test");
		assertEquals(graph.getNodeCount(), 1);
	}

	@Test
	public void testAdd5AndRemoveNodeAndGetAllDest() {
		graph.createNode("test");
		graph.createNode("test2");
		graph.createNode("test3");
		graph.createEdge("test", "test2", "edge");
		graph.createEdge("test", "test3", "edge");
		graph.removeNode("test3");
		graph.createEdge("test", "test2", "edge2");
		graph.createEdge("test2", "test2", "edge");
		graph.createEdge("test", "test", "edge3");
		List<String> labels = graph.getAllDests("test");
		assertEquals(labels.size(), 1);
	}
}
