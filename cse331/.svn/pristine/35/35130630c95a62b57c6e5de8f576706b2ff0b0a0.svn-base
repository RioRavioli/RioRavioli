Rio Bacon

1.

{pre: size > 0}
k = 1;
max = Math.max(items[0], items[k]);
{loop-inv: max = largest in items[0...k]}
while (k + 1!= size) {
		{loop-inv: max = largest in items[0...k]}
		if (max < items[k + 1]) {
				{max = largest in items[0...k] ^ max < items[k + 1]}
				max = items[k + 1]
				{max = largest in items[0...k+1]}
		else {
				{max = largest in items[0...k+1]}
		}
		k = k+1;
		{loop-inv: max = largest in items[0...k]}
}
{loop-inv: max = largest in items[0...k]}
{max = largest in items[0...k] ^ k+1 = size}
		-> {max = largest in items[0...size-1]}


2.

{pre: x==X && y==Y && X>=0 && X>=0}
int expt(int x, int y) {
		int z = 1;
		{z==1 && x==X && y==Y && X>=0 && X>=0}
		{loop-inv: X^Y == z * x^y)
		while (y > 0) {
				{loop-inv: X^Y == z * x^y)
				if (y % 2 == 0) {
						y = y/2;
						x = x*x;
						{z * (x*x)^(y/2) == z * (x^(2 * 1/2 * y)) == z * x^y == X^Y}
				} else {	
						z = z*x;
						y / y-1;	
						{z*x * x^(y-1) == z * (x*x^(y-1)) == z * x^y == X^Y}
				}
				{loop-inv: X^Y == z * x^y)
		}
		{loop-inv: X^Y == z * x^y)
		{X^Y == z * x^y && y == 0 && x^y == x^0 == 1 && z * x^y == z * 1 == z}
				-> {z == X^Y}


3.

{pre: A[0] == a[0]}
int pivot = a[0];	
int swapCount = 1;
int i = 1;

{loop-inv:
all values are larger than pivot in between a[a.length - swapCount] and a[a.length], exclusive both bottom and top bound &&
all values less than pivot are between a[0] and a[i - swapCount], top exclusive &&
a[i - swapCount] == A[0]}

for (int i = i; i < a.length; i++) {

	{loop-inv:
	all values are larger than pivot in between a[a.length - swapCount] and a[a.length], exclusive both bottom and top bound &&
	all values less than pivot are between a[0] and a[i - swapCount], top exclusive &&
	a[i - swapCount] == A[0]}

		if (a[i - swapCount] < a[i - swapCount + 1]) {
				swap(a[i - swapCount + 1], a[a.length - swapCount]);
				{a[a.length - swapCount] is bigger than pivot}
				swapCount++;
				i++;
				{a[a.length - swapCount + 1] is bigger than pivot && a[i - swapCount] == A[0]}
		} else {
				swap(a[i - swapCount], a[i - swapCount + 1])
				i++;
				{a[i - swapCount - 1] is less than pivot && a[i - swapCount] == A[0]} 
		}

	{loop-inv:
	all values are larger than pivot in between a[a.length - swapCount] and a[a.length], exclusive both bottom and top bound &&
	all values less than pivot are between a[0] and a[i - swapCount], top exclusive &&
	a[i - swapCount] == A[0]}

}				

{loop-inv:
all values are larger than pivot in between a[a.length - swapCount] and a[a.length], exclusive both bottom and top bound &&
all values less than pivot are between a[0] and a[i - swapCount], top exclusive &&
a[i - swapCount] == A[0]}

{i == a.length && the loop-inv}

	-> {all values are larger than pivot in between a[a.length - swapCount] and a[a.length], exclusive both bottom and top bound &&
	all values less than pivot are between a[0] and a[a.length - swapCount], top exclusive &&
	a[a.length - swapCount] == A[0]}


4.

{pre: unsorted array a[n]}
int i = 0;
{loop-inv: all values are sorted a[0...i], excluding i} 
while (i < n - 1) {

		{loop-inv: all values are sorted a[0...i], excluding i} 
		int minIndex = i;
		int j = i + 1;
		{loop-inv2: a[minIndex] is smallest among a[i...j], excluding j} 

		while (j < n) {
				{loop-inv2: a[minIndex] is smallest among a[i...j], excluding j} 
				minIndex = min(a[minIndex], a[j]);
				if (a[minIndex] > a[j]) {
						{a[j] is smallest among a[i...j], including j}
						minIndex = j;
						{minIndex == j}
				}
				{a[minIndxe] is smallest among a[i...j], including j}	
				j++;
				{loop-inv2: a[minIndex] is smallest among a[i...j], excluding j} 
		}
		{loop-inv2: a[minIndex] is smallest among a[i...j], excluding j} 
		{j == n && a[minIndex] is smallest among a[i...j], excluding j}		
		{a[minIndex] is smallest among a[i...n], excluding n}

		swap(a[i], a[minIndex]);
		{a[i] is the smallest among a[i...n], excluding n}
		i++;
		{loop-inv: all values are sorted a[0...i], excluding i} 
}
{loop-inv: all values are sorted a[0...i], excluding i} 
{i == n && all values are sorted a[0...i], excluding i}
		-> {all values aare sorted a[0...n], excluding i}






