package hw8;
import hw7.*;

import java.util.*;
import java.io.*;
import javax.swing.*;
import javax.imageio.*;
import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;

public class CampusPathsMain {
	private JFrame frame;
	private CampusMapManager manager;

	public static void main(String[] args) {
		CampusPathsMain main = new CampusPathsMain();
	}

	public CampusPathsMain() {
		frame = new JFrame("Campus Paths");
		manager = new CampusMapManager();

		frame.setFocusable(true);
		frame.setSize(1024, 768);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setLayout(new FlowLayout());
		setComponents(frame);
		frame.setVisible(true);
	}

	private void setComponents(JFrame frame) {
		//create an array of building names
		java.util.List<Building> buildings = manager.getBuildings();
		String[] buildingList = new String[buildings.size()];
		for (int i = 0; i < buildings.size(); i++) {
			String longName = buildings.get(i).getLongName(); 
			buildingList[i] = longName;
		}

		//create components
		JButton resetButton = new JButton("Reset");
		Component startLabel = new JLabel("Start:");
		JComboBox startList = new JComboBox(buildingList);
		Component endLabel = new JLabel("Destination:");
		JComboBox endList = new JComboBox(buildingList);
		JLabel buttonDirections = new JLabel("Map Scrolling:: K: up  J: down  H: left  L: right");
		
		//create components and add action listeners
		JButton searchButton = new JButton("Search");	
		searchButton.addActionListener(new SearchListener(startList, endList, buildings));
		MapCanvas campus = new MapCanvas();
//		campus.addKeyListener(new ImageListener(campus));
		
		/*
		//create directional buttons
		Container directions = new Container();
		directions.setPreferredSize(new Dimension(1000, 1000));
		directions.setVisible(true);
		directions.add(new JButton("up"));
		directions.add(new JButton("left"));
		directions.add(new JButton("down"));
		directions.add(new JButton("right"));
		*/

		//add components to frame
		frame.add(buttonDirections);
		frame.add(resetButton);
		frame.add(startLabel);
		frame.add(startList);
		frame.add(endLabel);
		frame.add(endList);
		frame.add(searchButton);
		//frame.add(directions);
		frame.add(campus);
		KeyListener imageListener = new ImageListener(campus);
		resetButton.addKeyListener(imageListener);
		startList.addKeyListener(imageListener);
		endList.addKeyListener(imageListener);
		searchButton.addKeyListener(imageListener);
		frame.addKeyListener(imageListener);

		campus.updateImage();

	}


	private class SearchListener implements ActionListener {
		JComboBox startList;
		JComboBox endList;
		java.util.List<Building> buildings;

		public SearchListener(
				JComboBox startList, JComboBox endList, java.util.List<Building> buildings) {
			this.startList = startList;
			this.endList = endList;
			this.buildings = buildings;
		}

		@Override
		public void actionPerformed(ActionEvent e) {
			String start = (String) startList.getSelectedItem();
			String end = (String) endList.getSelectedItem();

			//get start and end buildings
			Building startBuilding = null;
			Building endBuilding = null;
			for (Building building : buildings) {
				if (start.equals(building.getLongName())) {
					startBuilding = building;
				}
				if (end.equals(building.getLongName())) {
					endBuilding = building;
				}
			}

			//neither building should ever be null, because user selection comes from the same list
			java.util.List<Path> route = manager.getShortestPath(startBuilding, endBuilding);
			for (Path path : route) {
				System.out.println("Go from " + path.getStart().getX() + " to " + path.getEnd().getX());
			}
		}
	}

	private class MapCanvas extends JComponent {
		private BufferedImage campusMap;
		private int xShift;
		private int yShift;

		private final double ZOOM_VALUE = .5;

		public MapCanvas() {
			try {
				campusMap = ImageIO.read(new File("hw7/data/campus_map.jpg"));
			} catch (IOException e) {
				//
				//
				//
				//
				//
				//
				//Fllllllllllllerr
				//
				//
				//
				//
				//
				e.printStackTrace();
			}

			xShift = 0;
			yShift = 0;
			this.setPreferredSize(new Dimension(1000, 600));
		}

		public void updateImage() {
			this.repaint();
		}

		public void moveImage(int dx, int dy) {
			xShift += dx;
			yShift += dy;
			checkPos();
			System.out.println(xShift);
		}

		public void setImageShift(int xShift, int yShift) {
			this.xShift = xShift;
			this.yShift = yShift;
		}

		private void checkPos() {
			if (xShift > 0)
				xShift = 0;
			else if (xShift < -1170)
				xShift = -1170;

			if (yShift > 0)
				yShift = 0;
			else if (yShift < -880)
				yShift = -880;
		}

		//4330 2964
		@Override
		public void paintComponent(Graphics g) {
			super.paintComponent(g);
			int xZoom = (int) (campusMap.getWidth() * ZOOM_VALUE + xShift);
			int yZoom = (int) (campusMap.getHeight() * ZOOM_VALUE + yShift);
			g.drawImage(campusMap, xShift, yShift, xZoom, yZoom, 0, 0, campusMap.getWidth(), campusMap.getHeight(), null);
		}
	}

	private class ImageListener implements KeyListener {
		private MapCanvas map;
		private final int MOVE_SPEED = 40;

		public ImageListener(MapCanvas map) {
			this.map = map;
		}

		public void keyPressed(KeyEvent event) {
			char key = event.getKeyChar();
			switch (key) {
				case 'j':
					map.moveImage(0, -1 * MOVE_SPEED);
					break;
				case 'k':
					map.moveImage(0, MOVE_SPEED);
					break;
				case 'h':
					map.moveImage(MOVE_SPEED, 0);
					break;
				case 'l':
					map.moveImage(-1 * MOVE_SPEED, 0);
					break;
			}
			map.updateImage();
		}

		public void keyReleased(KeyEvent event) {}

		public void keyTyped(KeyEvent event) {}
	}
}
